<?xml version="1.0" encoding="ISO-8859-1"?>
     <!-- Embedded DTD for validation -->
     <!DOCTYPE upload [
     <!ELEMENT compile (#PCDATA)>
     <!ATTLIST compile
      condition CDATA #REQUIRED
     >
     <!ELEMENT copysrc (#PCDATA)>
     <!ELEMENT install_instructions (#PCDATA)>
     <!ELEMENT install_program (#PCDATA)>
     <!ELEMENT mbr (copysrc)>
     <!ATTLIST mbr
      mbrname CDATA #REQUIRED
      mbrtype CDATA #REQUIRED
      mbrtext CDATA #REQUIRED
      srcfile CDATA #REQUIRED
      srclib CDATA #REQUIRED
      srclen CDATA #REQUIRED
      srccssid CDATA #REQUIRED
     >
     <!ELEMENT qcmdexc (#PCDATA)>
     <!ATTLIST qcmdexc
      condition CDATA #REQUIRED
      release CDATA #REQUIRED
      dltsplf CDATA #REQUIRED
     >
     <!ELEMENT qrycond (#PCDATA)>
     <!ATTLIST qrycond
      msg CDATA #REQUIRED
      values CDATA #REQUIRED
      var CDATA #REQUIRED
     >
     <!ELEMENT sendmsg (#PCDATA)>
     <!ATTLIST sendmsg
      sendmsgid CDATA #REQUIRED
      sendmsgtype CDATA #REQUIRED
     >
     <!ELEMENT rtvobjd (#PCDATA)>
     <!ATTLIST rtvobjd
      condition CDATA #REQUIRED
      obj CDATA #REQUIRED
      lib CDATA #REQUIRED
      objtype CDATA #REQUIRED
      rtnlib CDATA #IMPLIED
     >
     <!ELEMENT upload (install_instructions | install_program | qrycond |
                       qcmdexc | sendmsg | mbr | compile | rtvobjd | chgvar)+>
     <!ATTLIST upload
      appname CDATA #REQUIRED
      appauthor CDATA #REQUIRED
      appblddate CDATA #REQUIRED
     >
     ]>
<upload  appname="LOG4RPG"  appauthor="Thomas Raddatz"  appblddate=" 3/09/2017">
<install_instructions><![CDATA[
     *----------------------------------------------------------------      ------
     *  1. Upload entire XML to your AS/400 to a source file 112 long, into any mbr
     *     name not in this XML (suggest member name like ABCX or XYZX). The source
     *     file must be in the library where source and objects are to be installed.
     *
     *  2. If you have XMLPREVIEW installed, skip to step 3.
     *
     *     Copy the text between the start tag <install_program> and the end
     *     tag </install_program> into any member name (your choice)
     *     in file QRPGLESRC member type RPGLE.   CRTBNDRPG to compile.
     *     NOTE: You need extract the install program only once, this same program
     *           will install any upload on this page.
     *
     *  3. Call the install program (or execute XmlPrevew) passing these 3 parms.
     *       'your-member-name you uploaded this text into'
     *       'your-source-file-name the member is in'
     *       'your-library-name the source file is in'
     *
     *  The various source members will be extracted and the objects required
     *   for the application will be created in your-library-name.
     *----------------------------------------------------------------      ------
]]>  </install_instructions>
<install_program><![CDATA[
      * /// START OF INSTALL PGM HERE   ************************** ///
      *---------------------------------------------------------------------------------------
      * Parse / Install from xml text into source members and objects.
      * Copyright (C) 2001    Craig Rutledge    <craig_rutledge@mohawkind.com>
      * Martin Rowe    <Martin@dbg400.net>          scripting cmd prompts
      * David George   <webmaster@400times.co.uk>   intellectual input
      * Thomas Raddatz <thomas.raddatz@tools400.de> execute SQL statements
      * Thomas Raddatz <thomas.raddatz@tools400.de> conditions
      * Thomas Raddatz <thomas.raddatz@tools400.de> release
      * Thomas Raddatz <thomas.raddatz@tools400.de> retrieve object description
      *
      * Use xml tags in text to trigger:
      * 1. Parse text into source members (create srcfile & member if required).
      * 2. Compile source into objects.
      * 3. Send installation progress user messages.
      * 4. Execute qcmdexc as required.
      * 5. Execute SQL statements as required.
      *
      * This program is free software, you can redistribute it and/or modify it
      * under the terms of the GNU General Public License as published by
      * the Free Software Foundation.  See GNU General Public License for details
      *---------------------------------------------------------------------------------------
      * >>PRE-COMPILER<<
      *   >>CRTCMD<< CRTBNDRPG    PGM(&LI/&OB) SRCFILE(&SL/&SF) SRCMBR(*PGM) +
      *                           DBGVIEW(*LIST) OPTION(*EVENTF);
      *   >>EXECUTE<<
      * >>END-PRE-COMPILER<<
      *---------------------------------------------------------------------------------------
     H DFTACTGRP(*NO) ACTGRP(*CALLER) BNDDIR('QC2LE')
      *---------------------------------------------------------------------------------------
     Fxmlinput  if   f  112        disk    usropn                               uploaded text
     Fqxxxsrc   o    f  112        disk    usropn                               parsed out
      *--------------------------------------------------------------------
      * create parm prototypes
      *--------------------------------------------------------------------
      *  Tokenize String
     D strtok          PR              *          extproc('strtok')
     D  i_string                       *   value  options(*string)
     D  i_token                        *   value  options(*string)
      * retrieve member description
     D qusrmbrd        PR                  ExtPgm('QUSRMBRD')                   MEMBER DESCRIPTION
     D  o_rcvVar                  32767a          options(*varsize)             RECEIVER
     D  i_lenRcvVar                  10i 0 const                                LENGTH OF RECVR
     D  i_format                      8    const                                UPLOAD TYPE
     D  i_qFile                      20    const                                FILE   LIB
     D  i_mbr                        10    const                                MEMBER NAME
     D  i_ovverride                   1    const                                PROCESS OVERIDE
     D  io_errCode                32767a          options(*varsize)             ERROR CODE
      * retrieve object description
     D QUSROBJD...
     D                 PR                         extpgm('QUSROBJD')
     D  o_rcvVar                  65535A          options(*varsize)
     D  i_lenRcvVar                  10I 0 const
     D  i_format                      8A   const
     D  i_qObj                       20A   const
     D  i_type                       10A   const
     D  io_errCode                65535A          options(*nopass: *varsize)    | OptGrp 1
      * send program message
     D qmhsndpm        PR                  ExtPgm('QMHSNDPM')                   SEND MESSAGES
     D  i_msgID                       7a   const                                ID
     D  i_qMsgF                      20a   const                                FILE
     D  i_msgText                 32767a   const  options(*varsize)             TEXT
     D  i_lenMsgText                 10i 0 const                                LENGTH
     D  i_msgType                    10a   const                                TYPE
     D  i_callStackE                 10a   const                                STACK ENTRY
     D  i_callStackC                 10i 0 const                                STACK COUNTER
     D  i_msgKey                      4a   const                                KEY
     D  io_errCode                32767a          options(*varsize)             ERROR CODE
      * execute cl command
     D  qcmdexc        PR                  ExtPgm('QCMDEXC')
     D  i_cmd                        50a   Const
     D  i_lenCmd                     15p 5 Const
      *  Allocate Environment Handle
     D SQLAllocEnv...
     D                 PR                         extproc('SQLAllocEnv')
     D                                     like(SQLRETURN_t )
     D  o_phenv                        *   value
      *  Allocate Connection Handle
     D SQLAllocConnect...
     D                 PR                         extproc('SQLAllocConnect')
     D                                     like(SQLRETURN_t )
     D  i_henv                             value  like(SQLHENV_t   )
     D  o_phdbc                        *   value
      *  Connect to a Data Source
     D SQLConnect...
     D                 PR                         extproc('SQLConnect')
     D                                     like(SQLRETURN_t )
     D  i_hdbc                             value  like(SQLHDBC_t   )
     D  i_szDSN                        *   value  options(*string)
     D  i_cbDSN                            value  like(SQLSMALLINT_t)
     D  i_szUID                        *   value  options(*string)
     D  i_cbUID                            value  like(SQLSMALLINT_t)
     D  i_szAuthStr                    *   value  options(*string)
     D  i_cbAuthStr                        value  like(SQLSMALLINT_t)
      *  Set Connection Option
     D SQLSetConnectOption...
     D                 PR                         extproc('SQLSetConnectOption')
     D                                     like(SQLRETURN_t )
     D  i_hdbc                             value  like(SQLHDBC_t   )
     D  i_fOption                          value  like(SQLSMALLINT_t)
     D  i_vParam                           value  like(SQLPOINTER_t )
      *  Allocate a Statement Handle
     D SQLAllocStmt...
     D                 PR                         extproc('SQLAllocStmt')
     D                                     like(SQLRETURN_t )
     D  i_hdbc                             value  like(SQLHDBC_t   )
     D  o_phstmt                       *   value
      *  Execute a Statement Directly
     D SQLExecDirect...
     D                 PR                         extproc('SQLExecDirect')
     D                                     like(SQLRETURN_t )
     D  i_hstmt                            value  like(SQLHSTMT_t  )
     D  i_szSqlStr                     *   value  options(*string)
     D  i_cbSqlStr                         value  like(SQLINTEGER_t)
      *  Free (or Reset) a Statement Handle
     D SQLFreeStmt...
     D                 PR                         extproc('SQLFreeStmt')
     D                                     like(SQLRETURN_t )
     D  i_hstmt                            value  like(SQLHSTMT_t  )
     D  i_fOption                          value  like(SQLSMALLINT_t)
      *  Disconnect from a Data Source
     D SQLDisconnect...
     D                 PR                         extproc('SQLDisconnect')
     D                                     like(SQLRETURN_t )
     D  i_hdbc                             value  like(SQLHDBC_t   )
      *  Free Connection Handle
     D SQLFreeConnect...
     D                 PR                         extproc('SQLFreeConnect')
     D                                     like(SQLRETURN_t )
     D  i_hdbc                             value  like(SQLHDBC_t   )
      *  Free Environment Handle
     D SQLFreeEnv...
     D                 PR                         extproc('SQLFreeEnv')
     D                                     like(SQLRETURN_t )
     D  i_henv                             value  like(SQLHENV_t   )
      *--------------------------------------------------------------------
     D long_t          S             10I 0                    based(pDummy)
     D short_t         S              5I 0                    based(pDummy)
      *
     D SQLINTEGER_t    S                   like(long_t      ) based(pDummy)
     D SQLSMALLINT_t   S                   like(short_t     ) based(pDummy)
      *
     D PTR_t           S               *                      based(pDummy)
     D SQLPOINTER_t    S                   like(PTR_t       ) based(pDummy)
     D HENV_t          S                   like(long_t      ) based(pDummy)
     D HDBC_t          S                   like(long_t      ) based(pDummy)
     D HSTMT_t         S                   like(long_t      ) based(pDummy)
     D RETCODE_t       S                   like(SQLINTEGER_t) based(pDummy)
      *
     D SQLHENV_t       S                   like(HENV_t      ) based(pDummy)
     D SQLHDBC_t       S                   like(HDBC_t      ) based(pDummy)
     D SQLHSTMT_t      S                   like(HSTMT_t     ) based(pDummy)
     D SQLRETURN_t     S                   like(RETCODE_t   ) based(pDummy)
      *
     D retCode         S                   like(SQLRETURN_t) inz
     D hdbc            S                   like(SQLHDBC_t  ) inz
     D hstmt           S                   like(SQLHSTMT_t ) inz
     D henv            S                   like(SQLHENV_t  ) inz
     D sqlInit         S              1A                     inz(*off)
     D cOptVal         S             10I 0                   inz
      *
     D SQL_NTS         C                   const( -3)
     D SQL_COMMIT_NONE...
     D                 C                   const(  1)
     D SQL_ATTR_COMMIT...
     D                 C                   const(  0)
     D SQL_DROP        C                   const(  1)
      *--------------------------------------------------------------------
      * Read element
      *--------------------------------------------------------------------
     D readElement     PR                        like(bldexc)
     D  i_element                     9A   value varying
      *--------------------------------------------------------------------
      * Define function prototype to double quotes in a string
      *--------------------------------------------------------------------
     D dblQuotes       PR          2048A         varying
     D  i_string                   2048A   value varying
      *--------------------------------------------------------------------
      * Define function prototype to get attribute data from a string
      *--------------------------------------------------------------------
     D getAttrData...
     D                 PR          2000A          varying                       like(string_t)
     D  i_attr                       10a   value
     D  i_string                   2000A   value  varying                       like(string_t)
     D  i_default                  2000A   value  varying                       like(string_t)
      *--------------------------------------------------------------------
      * Define function prototype to check for a condition
      *--------------------------------------------------------------------
     D isCondition...
     D                 PR              n
     D  i_condList                 2000A   value
      *---------------------------------------------------------------------------------------
     D loadConditions...
     D                 PR                  dim(32) like(condition)
     D  i_conditions                128A   value
      *--------------------------------------------------------------------
     D getCurrentRelease...
     D                 PR            10A
      *--------------------------------------------------------------------
     D isRelease...
     D                 PR              n
     D  i_os_release                  6A   value
     D  i_release                    10A   value
      *--------------------------------------------------------------------
     D setTargetRelease...
     D                 PR          2000A          varying
     D  i_keyword                    10A   value  varying
     D  i_string                   2000A   value  varying
     D  i_value                      10A   value  varying
      *--------------------------------------------------------------------
     D setVariable...
     D                 PR
     D  i_fldName                    10A   value  varying
     D  i_value                      64A   value  varying
      *---------------------------------------------------------------------------------------------
     D getVarName...
     D                 PR            11a          varying
     D  i_bldexc                           value  like(bldexc)
     D  i_pos                        10i 0 value
      *---------------------------------------------------------------------------------------------
     D getVarValue...
     D                 PR            64a          varying
     D  i_name                       11a   value  varying
      *---------------------------------------------------------------------------------------------
     D uCase...
     D                 PR          2000A          varying
     D  i_string                   2000A   value  varying
      *--------------------------------------------------------------------
     D vrcvar          s            145
     D qm_msgid        s              7
     D qm_msgtxt       s            500
     D qm_msgq         s             10
     D qm_msgtyp       s             10
     D mbrname         s             10
     D mbrtype         s             10
     D mbrtext         s             50
     D srcfile         s             10
     D srclen          s              5
     D srclenN         s              5  0   inz(0)
     D srccssid        s              5
     D bldexc          s           2000
     D write_flag      s              1n   inz(*off)
     D srcSeqno        s              6s 2 inz(0)
     D aa              s              5u 0 inz(0)
     D ll              s              5u 0 inz(0)
     D qs              c                   ''''
     D qd              c                   '"'
     D errFLag         s              1    inz(*off)
     D cnd_msg         s             42
     D cnd_values      s            110
     D cnd_var         s             10
     D cnd_rtnVal      s             10
     D cnd_array       s                   dim(32) inz like(condition)
     D cnd_ptr         s             10i 0 inz
     D condition       s             10a
     D condList        s           2000a
     D release         s             10a
     D dltsplf         s             10a
     D objd_obj        s             10a
     D objd_lib        s             10a
     D objd_objtype    s             10a
     D objd_rtnlib     s             10a
     D objd0100        ds
     D  od_bytRet              1      4i 0
     D  od_bytAvl              5      8i 0
     D  od_name                9     18a
     D  od_lib                19     28a
     D  od_type               29     38a
     D  od_rtnLib             39     48a
     D fld_array       ds
     D  fld_x                        10i 0 inz
     D  fld_name                     11a   inz dim(64) varying
     D  fld_value                    64a   inz dim(64) varying
     D var_name        s             11a   inz varying
     D var_value       s             64a   inz varying
      * Error return code parm for APIs.
     D errCode         DS
     D  errCode_bytPrv...
     D                               10i 0 inz(%size(errCode))
     D  errCode_bytAvl...
     D                               10i 0 inz(0)
     D  errCode_excID...
     D                                7a   inz
     D  errCode_reserved...
     D                                1a   inz
     D  errCode_escData...
     D                              256a   inz
      * Optional parameters
     D OvrSrcFile      s                   like(i_OvrSrcFile) inz
     D isPreDefCond    s               N   inz(*off)
     D TgtRls          s                   like(i_TgtRls    ) inz
      *
      * Program status data structure.
     D sds            sds
     D  sds_pgmName                  10A
     D  sds_status                    5S 0
     D  sds_prvStat                   5S 0
     D  sds_lastSeq                   8A
     D  sds_lastSubR                  8A
     D  sds_numParm                   3S 0
     D  sds_msgID                     7A
     D  sds_MiInstr                   4A
     D  sds_wrkArea                  30A
     D  sds_lib                      10A
     D  sds_msgText                  80A
      *--------------------------------------------------------------------
     Ixmlinput  ns
     I                                 13   21  xmltag1
     I                                 18   27  xmltag2
     I                                 13  112  xmlcode
      *--------------------------------------------------------------------
     C     *entry        plist
     C                   parm                    ParseSrcMbr      10            source member
     C                   parm                    ParseSrcFile     10            source file
     C                   parm                    ParseSrcLib      10            source lib
      *  optional parameters:
     C                   parm                    i_OvrSrcFile     10            override to src
     C                   parm                    i_Conditions    128            pre-def conditions
     C                   parm                    i_TgtRls         10            target release
      *
      *  get optional parameter: Overrride to Source File
     C                   if        %parms() >= 4
     C                   eval      OvrSrcFile = i_OvrSrcFile
     C                   else
     C                   eval      OvrSrcFile = ''
     C                   endif
      *
      *  get optional parameter: Conditions
     C                   if        %parms() >= 5
     C                   if        %subst(i_Conditions:1:32) <> ''
     C                   eval      cnd_array = loadConditions(i_Conditions)
     C                   eval      isPreDefCond = *on
     C                   else
     C                   eval      isPreDefCond = *off
     C                   endif
     C                   endif
      *
      *  get optional parameter: Target Release
     C                   if        %parms() >= 6
     C                   eval      TgtRls = i_TgtRls
     C                   else
     C                   eval      TgtRls = getCurrentRelease()
     C                   endif
      *
     C                   exsr      srValidate                                   make sure exist
      *
      * Set user selected library *first for remainder of program
     C                   eval      bldexc = 'RMVLIBLE LIB('+
     C                             %trimr(ParseSrcLib) + ')'
     C                   callp(e)  qcmdexc(bldexc:%len(%trimr(bldexc)))
      *
     C                   eval      bldexc = 'ADDLIBLE LIB('+
     C                             %trimr(ParseSrcLib) + ') POSITION(*FIRST)'
     C                   callp(e)  qcmdexc(bldexc:%len(%trimr(bldexc)))
      *
      *       CPF2103 - Library &1 already exists in library list.
     C                   if        %error and sds_msgID <> 'CPF2103'
     C                   eval      qm_msgtxt = '0000 ' + sds_msgText
     C                   exsr      srKill
     C                   endif
      *
      * Set variable &TOLIB
     C                   callp     setVariable('tolib': ParseSrcLib)
      *
      * Set variable &TGTRLS
     C                   callp     setVariable('tgtrls': TgtRls)
      *
      * Override Input file to uploaded text file
     C                   eval      bldexc = 'OVRDBF FILE(XMLINPUT) TOFILE(' +
     C                             %trimr(ParseSrcLib)+'/'+
     C                             %trimr(ParseSrcFile) + ') MBR(' +
     C                             %trimr(ParseSrcMbr) + ')'
     C                   callp     qcmdexc(bldexc:%len(%trimr(bldexc)))
     C                   open      xmlinput
     C                   read      xmlinput
     C                   dow       not %eof
      * write records to outfile if flag is on
     C                   select
     C                   when      write_flag = *on
     C                   if        xmltag2<>'</copysrc>'
     C                   eval      srcSeqno=srcSeqno+1
     C                   except    write_one
     C                   else
     C                   eval      write_flag=*off
     C                   close     qxxxsrc
     C                   endif
      *
      * Extract values based on xml tags.
     C                   when      xmltag1 = 'mbrname ='
     C                   eval      mbrname = %subst(xmlcode:13:10)
     C                   when      xmltag1 = 'mbrtype ='
     C                   eval      mbrtype =%subst(xmlcode:13:10)
     C                   when      xmltag1 = 'mbrtext ='
     C                   eval      mbrtext =dblQuotes(%subst(xmlcode:13:50))
     C                   when      xmltag1 = 'srcfile ='
     C                   if        OvrSrcFile <> ''
     C                   eval      srcfile =OvrSrcFile
     C                   else
     C                   eval      srcfile =%subst(xmlcode:13:10)
     C                   endif
     C                   when      xmltag1 = 'srclen  ='
     C                   eval      srclen  =%subst(xmlcode:13:5)
     C                   when      xmltag1 = 'srccssid='
     C                   eval      srccssid=%subst(xmlcode:13:5)
      *--------------------------------------------------------------------
      * Start of data to copy.  Create source files/mbrs as required.
      *--------------------------------------------------------------------
     C                   when      xmltag1='<copysrc>'
     C                   move      srclen        srclenN
      * crtsrcpf
     C                   eval      bldexc = 'CRTSRCPF FILE(' +
     C                             %trimr(ParseSrcLib)+'/'+
     C                             %trimr(srcfile) + ') RCDLEN(' +
     C                             srclen + ') CCSID(' +
     C                             srccssid + ')'
     C                   callp(e)  qcmdexc(bldexc:%len(%trimr(bldexc)))
      * addpfm
     C                   eval      bldexc = 'ADDPFM   FILE(' +
     C                             %trimr(ParseSrcLib)+'/'+
     C                             %trimr(srcfile) + ') MBR(' +
     C                             %trimr(mbrname) + ') SRCTYPE(' +
     C                             %trimr(mbrtype) + ') TEXT(' +
     C                             qs+%trimr(mbrtext)+qs + ')'
     C                   callp(e)  qcmdexc(bldexc:%len(%trimr(bldexc)))
     C                   if        %error
      * chgpfm
     C                   eval      bldexc = 'CHGPFM   FILE(' +
     C                             %trimr(ParseSrcLib)+'/'+
     C                             %trimr(srcfile) + ') MBR(' +
     C                             %trimr(mbrname) + ') TEXT(' +
     C                             qs+%trimr(mbrtext)+qs + ')'
     C                   callp     qcmdexc(bldexc:%len(%trimr(bldexc)))
      * clr mbr
     C                   eval      bldexc = 'CLRPFM   FILE(' +
     C                             %trimr(ParseSrcLib)+'/'+
     C                             %trimr(srcfile) + ') MBR(' +
     C                             %trimr(mbrname) + ')'
     C                   callp     qcmdexc(bldexc:%len(%trimr(bldexc)))
     C                   endif
      * ovr to outfile mbr
     C                   eval      bldexc = 'OVRDBF QXXXSRC ' +
     C                             %trimr(ParseSrcLib) + '/' +
     C                             %trimr(srcfile) + ' ' +
     C                             mbrname
     C                   callp     qcmdexc(bldexc:%len(%trimr(bldexc)))
     C                   clear                   srcSeqno
     C                   open      qxxxsrc
     C                   eval      write_flag = *on
      *--------------------------------------------------------------------
      * Compile statement.  Read next record and execute it.
      *--------------------------------------------------------------------
     C                   when      xmltag1 = '<compile '
     C                   eval      condList= getAttrData('condition':xmlcode:'')
     C                   read      xmlinput
     C                   eval      bldexc = readElement('compile')
     C                   if        isCondition(condList)
     C                   exsr      RplVars
     C                   exsr      SetTgtRls
     C                   callp     qcmdexc(bldexc:%len(%trimr(bldexc)))
     C                   endif
      *--------------------------------------------------------------------
      * qcmdexc statement. Build statement from each record between start
      * and stop tags.  When stop tag is found, execute statement.
      *--------------------------------------------------------------------
     C                   when      xmltag1 = '<qcmdexc '
     C                   eval      condList = getAttrData('condition'
     C                                                    :xmlcode:'')
     C                   eval      release  = getAttrData('release'
     C                                                    :xmlcode:'*CURRENT')
     C                   eval      dltsplf  = getAttrData('dltsplf'
     C                                                    :xmlcode:'*NONE')
     C                   read      xmlinput
     C                   eval      bldexc = readElement('qcmdexc')
     C                   if        isCondition(condList) and
     C                             isRelease(tgtRls: release)
     C                   exsr      RplVars
     C                   exsr      SetTgtRls
     C                   if        %subst(bldexc: 1: 3) = 'DLT'
     C                   callp (e) qcmdexc(bldexc:%len(%trimr(bldexc)))
     C                   else
     C                   callp (e) qcmdexc(bldexc:%len(%trimr(bldexc)))
     C                   if        %error()
     C                   eval      qm_msgtxt = '0000 Failed to execute: '+bldexc
     C                   exsr      srKill
     C                   endif
     C                   if        dltsplf <> '' and dltsplf <> '*NONE'
     C                   eval      bldexc = 'DLTSPLF FILE(' + dltsplf +
     C                                      ') JOB(*) SPLNBR(*LAST)'
     C                   callp (e) qcmdexc(bldexc:%len(%trimr(bldexc)))
     C                   endif
     C                   endif
     C                   endif
      *--------------------------------------------------------------------
      * SQL statement. Build statement from each record between start
      * and stop tags.  When stop tag is found, execute SQL statement.
      *--------------------------------------------------------------------
     C                   when      xmltag1 = '<execsql '
     C                   eval      condList = getAttrData('condition'
     C                                                    :xmlcode:'')
     C                   read      xmlinput
     C                   eval      bldexc = readElement('execsql')
     C                   if        isCondition(condList)
     C                   exsr      RplVars
     C                   exsr      srSQLExecute
     C                   endif
      *--------------------------------------------------------------------
      * Send messages to user as program executes
      * Extract message ID, Message Type, from <sendmsg>
      * read a record and get the single line of message text.
      *--------------------------------------------------------------------
     C                   when      xmltag1 = '<sendmsg '
     C                   eval      qm_msgid = %subst(xmlcode:22:7)
     C                   eval      qm_msgtyp = %subst(xmlcode:46:10)
     C                   read      xmlinput
     C                   eval      qm_msgq   = '*EXT   '
     C                   eval      qm_msgtxt = xmlcode
     C                   exsr      srSndMessage
      *--------------------------------------------------------------------
      * rtvobjd statement. retrieve object description of the specified
      * object. Store attributes in specified fields.
      *--------------------------------------------------------------------
     C                   when      xmltag1 = '<rtvobjd '
     C                   eval      condList = getAttrData('condition'
     C                                                    :xmlcode:'')
     C                   eval      bldexc = readElement('rtvobjd')
     C                   eval      objd_obj    =getAttrData('obj'    :bldexc:'')
     C                   eval      objd_lib    =getAttrData('lib'    :bldexc:'')
     C                   eval      objd_objtype=getAttrData('objtype':bldexc:'')
     C                   eval      objd_rtnlib =getAttrData('rtnlib' :bldexc:'')
     C                   if        isCondition(condList)
     C                   exsr      srRtvObjD
     C                   endif
      *--------------------------------------------------------------------
      * chgvar statement.
      *--------------------------------------------------------------------
     C                   when      xmltag1 = '<chgvar  '
     C                   eval      condList = getAttrData('condition'
     C                                                    :xmlcode:'')
     C                   eval      bldexc = readElement('chgvar')
     C                   eval      var_name  = getAttrData('var'    :bldexc:'')
     C                   eval      var_value = getAttrData('value'  :bldexc:'')
     C                   if        isCondition(condList)
     C                   exsr      srChgVar
     C                   endif
      *--------------------------------------------------------------------
      * Query condition
      *--------------------------------------------------------------------
     C                   when      xmltag1 = '<qrycond '
     C                   eval      bldexc = readElement('qrycond')
     C                   eval      cnd_msg = getAttrData('msg'   : bldexc: '')
     C                   eval      cnd_values = getAttrData('values': bldexc:'')
     C                   eval      cnd_var = getAttrData('var': bldexc: '*NONE')
     C                   exsr      srQueryCond
     C                   endsl
      *
     C                   read      xmlinput
     C                   enddo
      *
     C                   exsr      srSQLEnd
     C                   eval      *inlr=*on
     C                   return
      *--------------------------------------------------------------------
      * Replace variable names with their associated values.
      *--------------------------------------------------------------------
     C     RplVars       begsr
     C                   eval      aa=%scan('&':bldexc)
     C                   dow       aa>0
     C                   eval      var_name=getVarName(bldexc:aa)
     C                   eval      var_value=getVarValue(var_name)
     C                   eval      bldexc=%replace(var_value:bldexc:aa
     C                                             :%len(var_name))
     C                   eval      aa=%scan('&':bldexc)
     C                   enddo
     C                   endsr
      *--------------------------------------------------------------------
      * Sets the target release according to the optional parameter
      * i_TgtRls.
      *--------------------------------------------------------------------
     C     SetTgtRls     begsr
     C                   if        TgtRls = getCurrentRelease()
     C                   leavesr
     C                   endif
     C                   eval      bldexc =
     C                                setTargetRelease('TGTRLS': bldexc: TgtRls)
     C                   endsr
      *--------------------------------------------------------------------
      * Check of file, lib, member exist.
      *--------------------------------------------------------------------
     C     srValidate    begsr
     C                   callp     QUSRMBRD(
     C                             vrcvar:
     C                             145:
     C                             'MBRD0100':
     C                             ParseSrcFile + ParseSrcLib:
     C                             ParseSrcMbr:
     C                             '0':
     C                             errCode)
      *   --------------------------------------------------------------------------------
      *   If error occurred on call, send appropriate message back to user.
      *   ---------------------------------------------------------------------------------
     C                   if        errCode_bytAvl <> 0                          error occurred
     C                   select
      * lib not found
     C                   when      errCode_excID = 'CPF9810'
     C                   eval      qm_msgtxt = '0000 Library ' +
     C                             %trimr(ParseSrcLib) + ' was not found.'
      * src file not found
     C                   when      errCode_excID = 'CPF9812'
     C                   eval      qm_msgtxt = '0000 Source file ' +
     C                             %trimr(ParseSrcFile)+' was not found in ' +
     C                             %trimr(ParseSrcLib) + '.'
      * member not found
     C                   when      errCode_excID = 'CPF9815'
     C                   eval      qm_msgtxt = '0000 Member ' +
     C                             %trimr(ParseSrcMbr)+' was not found in ' +
     C                             %trimr(ParseSrcLib)+'/'+ %trimr(ParseSrcFile)
      * unexpected
     C                   other
     C                   eval      qm_msgtxt = '0000 Unexpected message ' +
     C                             errCode_excID + ' received. '
     C                   endsl
      * send message
     C                   exsr      srKill
     C                   eval      *inlr=*on
     C                   return
     C                   endif
     C                   endsr
      *--------------------------------------------------------------------
      * kill application
      *--------------------------------------------------------------------
     C     srKill        begsr
     C                   eval      qm_msgid  = 'CPD0006'
     C                   eval      qm_msgtyp = '*DIAG'
     C                   eval      qm_msgq   = '*CTLBDY'
     C                   exsr      srSndMessage
     C                   eval      qm_msgtxt = *blanks
     C                   eval      qm_msgid  = 'CPF0002'
     C                   eval      qm_msgtyp = '*ESCAPE'
     C                   exsr      srSndMessage
     C                   endsr
      *--------------------------------------------------------------------
      * call send program message api
      *--------------------------------------------------------------------
     C     srSndMessage  begsr
     C                   callp     QMHSNDPM(
     C                             qm_msgid:
     C                             'QCPFMSG   *LIBL     ':
     C                             qm_msgtxt:
     C                             %size(qm_msgtxt):
     C                             qm_msgtyp:
     C                             qm_msgq:
     C                             1:
     C                             '    ':
     C                             errCode)
     C                   endsr
      *--------------------------------------------------------------------
      * retrieve object description and store attributes
      *--------------------------------------------------------------------
     C     srRtvObjD     begsr
     C                   callp     QUSROBJD(objd0100
     C                                      : %size(objd0100)
     C                                      : 'OBJD0100'
     C                                      : objd_obj + objd_lib
     C                                      : objd_objtype
     C                                      : errCode)
     C                   if        errCode_bytAvl <> 0                          error occurred
     C                   eval      qm_msgtxt = '0000 Failed to retrieve +
     C                             object description of object ' +
     C                             %trim(objd_lib) + '/' + %trim(objd_obj) +
     C                             ' type ' + %trim(objd_objtype) + '.'
      * send message
     C                   exsr      srKill
     C                   else
     C                   callp     setVariable(objd_rtnlib: od_rtnlib)
     C                   endif
     C                   endsr
      *--------------------------------------------------------------------
      * change variable
      *--------------------------------------------------------------------
     C     srChgVar      begsr
     C                   callp     setVariable(var_name: var_value)
     C                   endsr
      *--------------------------------------------------------------------
      * execute SQL statement.
      *--------------------------------------------------------------------
     C     srSQLExecute  begsr
     C                   exsr      srSQLInit
     C                   Eval      retCode = SQLExecDirect(hstmt    :
     C                                                     bldexc   :
     C                                                     SQL_NTS  )
     C                   endsr
      *--------------------------------------------------------------------
      * query condition.
      *--------------------------------------------------------------------
     C     srQueryCond   begsr
     C                   if        isPreDefCond = *off
     C                   eval      cnd_values = uCase(cnd_values)
     C                   dou       (%scan(cnd_rtnVal: cnd_values) > 0) and
     C                             (cnd_rtnval <> ''                 )
     C                   eval      cnd_rtnval = ' '
     C     cnd_msg       dsply                   cnd_rtnval
     C                   eval      cnd_rtnVal = uCase(cnd_rtnVal)
     C                   enddo
     C                   eval      cnd_ptr = cnd_ptr + 1
     C                   eval      cnd_array(cnd_ptr) = cnd_rtnVal
     C                   endif
     C                   if        (cnd_var <> '*NONE')
     C                   callp     setVariable(cnd_var: cnd_rtnval)
     C                   endif
     C                   endsr
      *--------------------------------------------------------------------
      * initialize SQL.
      *--------------------------------------------------------------------
     C     srSQLInit     begsr
      *
     C                   if        sqlInit = *off
     C                   Eval      retCode = SQLAllocEnv(%addr(henv))
     C                   Eval      retCode = SQLAllocConnect(henv: %addr(hdbc))
     C                   Eval      retCode = SQLConnect(hdbc      :
     C                                                  '*LOCAL'  :
     C                                                  SQL_NTS   :
     C                                                  *null     :
     C                                                  SQL_NTS   :
     C                                                  *null     :
     C                                                  SQL_NTS   )
     C                   Eval      cOptVal = SQL_COMMIT_NONE
     C                   Eval      retCode = SQLSetConnectOption(hdbc          :
     C                                                          SQL_ATTR_COMMIT:
     C                                                          %addr(cOptVal) )
     C                   Eval      retCode = SQLAllocStmt(hdbc       :
     C                                                  %addr(hstmt) )
     C                   eval      sqlInit = *on
     C                   endif
     C                   endsr
      *--------------------------------------------------------------------
      * end SQL.
      *--------------------------------------------------------------------
     C     srSQLEnd      begsr
     C                   if        sqlInit = *on
     C                   Eval      retCode = SQLFreeStmt(hstmt    :
     C                                                   SQL_DROP )
     C                   Eval      retCode = SQLDisconnect(hdbc)
     C                   Eval      retCode = SQLFreeConnect(hdbc)
     C                   Eval      retCode = SQLFreeEnv(henv)
     C                   eval      sqlInit = *off
     C                   endif
     C                   endsr
      *--------------------------------------------------------------------
      * error handler
      *--------------------------------------------------------------------
     C     *pssr         begsr
     C                   if        errFLag = *off
     C                   eval      errFlag = *on
     C                   exsr      srSQLEnd
     C                   endif
     C                   endsr     '*CANCL'
     Oqxxxsrc   e            write_one
     O                       srcSeqno             6
     O                                           12 '000000'
     O                       xmlcode            112
      *--------------------------------------------------------------------
      * Read element
      *--------------------------------------------------------------------
     P readElement...
     P                 B
      *
     D readElement     PI                        like(bldexc)
     D  i_element                     9A   value varying
      *
     D i               S             10I 0 inz
     D value           S                   like(bldexc ) inz
     D endTag          S                   like(xmlTag2) inz
      *
     C                   eval      i = 1
     C                   eval      endTag = '</' + i_element + '>'
     C                   dow       xmltag2 <> endTag
     C                   eval      %subst(value: i: %len(xmlcode)) = xmlcode
     C                   eval      i = i + %len(xmlcode)
     C                   read      xmlinput
     C                   enddo
      *
     C                   Return    value
      *
     P readElement...
     P                 E
      *--------------------------------------------------------------------
      * Double quotes
      *--------------------------------------------------------------------
     P dblQuotes...
     P                 B
      *
     D dblQuotes       PI          2048A         varying
     D  i_string                   2048A   value varying
      *
     D x               S             10I 0         inz
     D string          S           2048A   varying inz
      *
     C                   For       x = 1 to %len(i_string)
     C                   Eval      string = string + %subst(i_string: x:1)
     C                   If        %subst(i_string: x : 1) = qs
     C                   Eval      string = string + qs
     C                   Endif
     C                   Endfor
      *
     C                   Return    string
      *
     P dblQuotes...
     P                 E
      *---------------------------------------------------------------------------------------------
      *  Get Attribute Data from String
      *---------------------------------------------------------------------------------------------
     P getAttrData...
     P                 B
      *
     D getAttrData...
     D                 PI          2000A          varying                       like(string_t)
     D  i_attr                       10a   value
     D  i_string                   2000A   value  varying                       like(string_t)
     D  i_default                  2000A   value  varying                       like(string_t)
      *
      *  return value
     D attrData        S           2000A   varying inz                          like(string_t)
      *
      *  local fields
     D attr            S             20a   varying inz
     D lenAttr         S             10i 0 inz
     D aa              S             10i 0 inz
     D cc              S             10i 0 inz
      *
     D Qd              C                   const('"')
      *-------------------------------------------------------------------*
      *
      *  find the keyword
     C                   eval      attr = %trim(i_attr) + '=' + Qd
      *
     C                   eval      aa   = %scan(attr: i_string)
     C                   if        aa = 0
     C                   return    i_default
     C                   endif
      *
     C                   eval      aa   = aa + %len(attr)
     C                   eval      cc   = %scan(Qd: i_string: aa+1)
      *
      *  return the data between the double-quotes
     C                   if        (cc-aa) > 0
     C                   eval      attrData = %subst(i_string: aa: cc-aa)
     C                   endif
      *
     C                   Return    attrData
      *
     P getAttrData...
     P                 E
      *---------------------------------------------------------------------------------------------
      *  Load condition array
      *---------------------------------------------------------------------------------------------
     P loadConditions...
     P                 B
      *
     D loadConditions...
     D                 PI                  dim(32) like(condition)
     D  i_conditions                128A   value
      *
      *  return value
     D cnd_array       s                   dim(32) inz like(condition)
     D pValue          s               *   inz
     D x               s             10i 0 inz
      *-------------------------------------------------------------------*
     C                   eval      i_conditions = uCase(i_conditions)
      *
     C                   eval      pValue = strtok(i_conditions: ';')
     C                   dow       pValue <> *null
     C                   eval      x = x + 1
     C                   eval      cnd_array(x) = %str(pValue)
     C                   eval      pValue = strtok(*null: ';')
     C                   enddo
      *
     C                   Return    cnd_array
     P loadConditions...
     P                 E
      *---------------------------------------------------------------------------------------------
      *  Check for a condition
      *---------------------------------------------------------------------------------------------
     P isCondition...
     P                 B
      *
     D isCondition...
     D                 PI              n
     D  i_condList                 2000A   value
      *
      *  return value
     D isCondition     S               n   inz
     D pValue          S               *   inz
     D aCondition      S             10a   inz
      *-------------------------------------------------------------------*
     C                   eval      i_condList = uCase(i_condList)
      *
     C                   if        (i_condList = '*NONE')  or
     C                             (i_condList = ''     )
     C                   eval      *in01 = *on
     C                   else
      *
     C                   eval      pValue = strtok(i_condList: ' ')
     C                   dow       pValue <> *null
     C                   eval      aCondition = %str(pValue)
     C     aCondition    lookup    cnd_array                              01
     C                   if        not *in01
     C                   leave
     C                   endif
     C                   eval      pValue = strtok(*null     : ' ')
     C                   enddo
      *
     C                   endif
      *
     C                   if        *in01
     C                   eval      isCondition = *on
     C                   else
     C                   eval      isCondition = *off
     C                   endif
      *
     C                   Return    isCondition
     P isCondition...
     P                 E
      *---------------------------------------------------------------------------------------------
      *  Get the current release level of the operation system
      *---------------------------------------------------------------------------------------------
     P getCurrentRelease...
     P                 B
      *
     D getCurrentRelease...
     D                 PI            10A
      *
      *  QSZRTVPR API
     D QSZRTVPR...
     D                 PR                  extpgm('QSZRTVPR')
     D  o_rcvVar                  65535A          options(*varsize)
     D  i_lenRcvVar                  10I 0 const
     D  i_format                      8A   const
     D  o_prodInf                 65535A   const  options(*varsize)
     D  io_errCode                65535A          options(*varsize)
      *
     D prdi0100        DS                  qualified
     D  productID              1      7A   inz('*OPSYS')
     D  releaseLvl             8     13A   inz('*CUR'  )
     D  productOpt            14     17A   inz('0000'  )
     D  loadID                18     27A   inz('*CODE' )
      *  Shortened!:
     D prdr0100        DS                  qualified
     D  bytRet                 1      4I 0
     D  bytAvl                 5      8I 0
     D  reserved_1             9     12I 0
     D  productID             13     19A
     D  releaseLvl            20     25A
      *  API error code
     D errCode         DS
     D  bytPrv                       10i 0 inz(0)
     D  bytAvl                       10i 0 inz(0)
      *-------------------------------------------------------------------*
     C                   Callp     QSZRTVPR(prdr0100: %size(prdr0100):
     C                                      'PRDR0100': prdi0100: errCode)
     C                   Return    prdr0100.releaseLvl
     P getCurrentRelease...
     P                 E
      *---------------------------------------------------------------------------------------------
      *  Check the release level
      *---------------------------------------------------------------------------------------------
     P isRelease...
     P                 B
      *
     D isRelease...
     D                 PI              n
     D  i_os_release                  6A   value
     D  i_release                    10A   value
      *
      *  return value
     D isRelease       S               n   inz(*off)
      *  Release
     D release         DS
     D  r_operator             1      3a
     D  r_space                4      4a
     D  r_level                5     10a
      *-------------------------------------------------------------------*
     C                   If        i_release = '*CURRENT'
     C                   Eval      isRelease = *on
     C                   Else
     C                   Eval      release = i_release
     C                   Select
     C                   When      r_operator = '*LT' and
     C                             i_os_release < r_level
     C                   Eval      isRelease = *on
     C                   When      r_operator = '*EQ' and
     C                             i_os_release = r_level
     C                   Eval      isRelease = *on
     C                   When      r_operator = '*GT' and
     C                             i_os_release > r_level
     C                   Eval      isRelease = *on
     C                   When      r_operator = '*LE' and
     C                             i_os_release <= r_level
     C                   Eval      isRelease = *on
     C                   When      r_operator = '*GE' and
     C                             i_os_release >= r_level
     C                   Eval      isRelease = *on
     C                   Other
     C                   Eval      isRelease = *off
     C                   Endsl
     C                   Endif
      *
     C                   Return    isRelease
     P isRelease...
     P                 E
      *---------------------------------------------------------------------------------------------
      *  Replaces the value of a given keyword.
      *---------------------------------------------------------------------------------------------
     P setTargetRelease...
     P                 B
      *
     D setTargetRelease...
     D                 PI          2000A          varying
     D  i_keyword                    10A   value  varying
     D  i_string                   2000A   value  varying
     D  i_value                      10A   value  varying
      *
      *  return value
     D string          S           2000A   varying inz
      *
      *  helper fields
     D x               S             10I 0 inz
     D l               S             10I 0 inz
     D tmpKeyword      S                   like(i_keyword) inz
     D tmpString       S                   like(i_string ) inz
     D tmpCmd          S             10A   inz
      *-------------------------------------------------------------------*
      /FREE
         tmpKeyword = uCase(%trimR(i_keyword));
         tmpString  = uCase(%trimR(i_string ));
         x = %scan(' ': tmpString);
         if x = 0;
            return i_string;
         endif;
         tmpCmd = %subst(tmpString: 1: x);
         if tmpCmd <> 'CRTRPGMOD' and
            tmpCmd <> 'CRTRPGPGM' and
            tmpCmd <> 'CRTCLMOD'  and
            tmpCmd <> 'CRTCLPGM'  and
            tmpCmd <> 'CRTCBLMOD' and
            tmpCmd <> 'CRTCBLPGM' and
            tmpCmd <> 'CRTCMOD'   and
            tmpCmd <> 'CRTCPPMOD' and
            tmpCmd <> 'CRTBNDC'   and
            tmpCmd <> 'CRTBNDCBL' and
            tmpCmd <> 'CRTBNDCL'  and
            tmpCmd <> 'CRTBNDCPP' and
            tmpCmd <> 'CRTBNDDIR' and
            tmpCmd <> 'CRTBNDRPG' and
            tmpCmd <> 'CRTPGM'    and
            tmpCmd <> 'CRTSRVPGM' ;
            return i_string;
         endif;
         x = %scan(tmpKeyword + '(': tmpString);
         if x = 0;
            return %trimR(i_string) +
                   ' ' + tmpKeyword + '(' + %trimR(i_value) + ')';
         endif;
         l = %scan(')': tmpString: x + %len(i_keyword) + 1);
         if l = 0;
            return i_string;
         endif;
         l = l - x + 1;
         string = %replace(tmpKeyword + '(' + %trimR(i_value) + ')'
                           : i_string: x: l);
         Return string;
      /END-FREE
      *
     P setTargetRelease...
     P                 E
      *---------------------------------------------------------------------------------------------
      *  Store field value.
      *---------------------------------------------------------------------------------------------
     P setVariable...
     P                 B
      *
     D setVariable...
     D                 PI
     D  i_fldName                    10A   value  varying
     D  i_value                      64A   value  varying
     D i               s             10I 0 inz
      *-------------------------------------------------------------------*
      /FREE
         if (i_fldName = '');
            return;
         endif;
         for i = 1 to fld_x;
            if (uCase('&' + %trim(i_fldName)) = uCase(fld_name(fld_x)));
               fld_value(fld_x) = i_value;
               leave;
            endif;
         endfor;
         if (fld_x >= %elem(fld_name));
            return;
         endif;
         fld_x = fld_x + 1;
         fld_name(fld_x)  = uCase('&' + %trim(i_fldName));
         fld_value(fld_x) = i_value;
      /END-FREE
      *
     P setVariable...
     P                 E
      *---------------------------------------------------------------------------------------------
      *  get variable name from statement.
      *---------------------------------------------------------------------------------------------
     P getVarName...
     P                 B
      *
     D getVarName...
     D                 PI            11a          varying
     D  i_bldexc                           value  like(bldexc)
     D  i_pos                        10i 0 value
     D name            s             11a   varying inz
     D CHARS           c                   '&ABCDEFGHIJKLMNOPQRSTUVWXYZ+
     D                                      abcdefghijklmnopqrstuvwxyz+
     D                                      1234567890_'
      *-------------------------------------------------------------------*
      /FREE
         dow (i_pos<=%len(i_bldexc) and
              %check(CHARS:%subst(i_bldexc:i_pos:1))=0);
            name = name+%subst(i_bldexc:i_pos:1);
            i_pos=i_pos+1;
         enddo;
         return name;
      /END-FREE
      *
     P getVarName...
     P                 E
      *---------------------------------------------------------------------------------------------
      *  get variable value.
      *---------------------------------------------------------------------------------------------
     P getVarValue...
     P                 B
      *
     D getVarValue...
     D                 PI            64a          varying
     D  i_name                       11a   value  varying
     D i               s             10i 0 inz
     D value           s             64a   varying inz('?')
      *-------------------------------------------------------------------*
      /FREE
         for i=1 to fld_x;
            if (ucase(fld_name(i))=uCase(i_name));
               value=%trimR(fld_value(i));
               leave;
            endif;
         endfor;
         return value;
      /END-FREE
      *
     P getVarValue...
     P                 E
      *---------------------------------------------------------------------------------------------
      *  convert to upper case
      *---------------------------------------------------------------------------------------------
     P uCase...
     P                 B
      *
     D uCase...
     D                 PI          2000A          varying
     D  i_string                   2000A   value  varying
     D uCase           s           2000A   inz varying
     D LC              C                   const('abcdefghijklmnopqrstuvwxyz')
     D UC              C                   CONST('ABCDEFGHIJKLMNOPQRSTUVWXYZ')
      *-------------------------------------------------------------------*
      /FREE
         uCase = %xlate(LC:UC:i_string);
         return uCase;
      /END-FREE
      *
     P uCase...
     P                 E
      * /// END   OF INSTALL PGM HERE   ****************************************** ///
      * /// do not copy past this point ///
]]>  </install_program>
<qrycond
  msg="'Use *LIBL at runtime? (L_YES, L_NO)'"
  values="L_YES      L_NO"
  var="USELIBL">
<![CDATA[
]]>  </qrycond>
<qrycond
  msg="'Create sample programs? (YES, NO)'"
  values="YES        NO"
  var="CRTTSTPGM">
<![CDATA[
]]>  </qrycond>
<chgvar   condition="*NONE" var="SRCFILE" value="QLOG4RPG">
<![CDATA[
]]>  </chgvar>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing A_INSTALL  type TXT - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "A_INSTALL "
mbrtype =  "TXT       "
mbrtext =  "Log4rpg Make File                                 "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
     /* =================================================================== */
     /*   >>PRE-COMPILER<<                                                  */
     /*     >>CRTCMD<<  CRTBNDCL      PGM(QTEMP/&OB) +                      */
     /*                               SRCFILE(&SL/&SF) SRCMBR(&SM);         */
     /*     >>IMPORTANT<<                                                   */
     /*       >>PARM<< DBGVIEW(*LIST);                                      */
     /*       >>PARM<< DFTACTGRP(*NO);                                      */
     /*       >>PARM<< ACTGRP(*NEW);                                        */
     /*       >>PARM<< OPTION(*EVENTF);                                     */
     /*     >>END-IMPORTANT<<                                               */
     /*     >>EXECUTE<<                                                     */
     /*     >>CMD<<    CALL    PGM(QTEMP/A_INSTALL) +                       */
     /*                        PARM('&LI' '&SL' '&SF' 'L_NO' 'NO');         */
     /*   >>END-PRE-COMPILER<<                                              */
     /* =================================================================== */
             PGM        PARM(&TGTRLS &SRCFILE &TOLIB &USELIBL &CRTTSTPGM)

             DCL        VAR(&TGTRLS    ) TYPE(*CHAR) LEN(10)
             DCL        VAR(&SRCFILE   ) TYPE(*CHAR) LEN(10)
             DCL        VAR(&TOLIB     ) TYPE(*CHAR) LEN(10)
             DCL        VAR(&USELIBL   ) TYPE(*CHAR) LEN(10)
             DCL        VAR(&CRTTSTPGM ) TYPE(*CHAR) LEN(10)

             DCL        VAR(&SRCLIB    ) TYPE(*CHAR) LEN( 10)
             DCL        VAR(&FAILED    ) TYPE(*DEC ) LEN( 10 0) VALUE(0)
             DCL        VAR(&FAILEDSTR ) TYPE(*CHAR) LEN( 10)
             DCL        VAR(&DBGVIEW   ) TYPE(*CHAR) LEN( 10) VALUE(*LIST)
             DCL        VAR(&TGTRLS    ) TYPE(*CHAR) LEN( 10) VALUE(*CURRENT)
             DCL        VAR(&COMPILEOPT) TYPE(*CHAR) LEN(100)
             DCL        VAR(&OPTIMIZE  ) TYPE(*CHAR) LEN( 10) VALUE(*NONE)

             DCL        VAR(&BASICS1LIB) TYPE(*CHAR) LEN( 10) VALUE('*LIBL')
             DCL        VAR(&IFSLIB    ) TYPE(*CHAR) LEN( 10) VALUE('*LIBL')
             DCL        VAR(&LOG4LIB   ) TYPE(*CHAR) LEN( 10) VALUE('*LIBL')

             CHGVAR     VAR(&SRCLIB) VALUE(&TOLIB   )

             IF         COND(&USELIBL *NE 'L_YES') THEN(DO)
                RTVOBJD    OBJ(*LIBL/BASICS1) OBJTYPE(*SRVPGM) RTNLIB(&BASICS1LIB)
                RTVOBJD    OBJ(*LIBL/IFS    ) OBJTYPE(*SRVPGM) RTNLIB(&IFSLIB)
                CHGVAR     VAR(&LOG4LIB) VALUE(&TOLIB)
             ENDDO

   /* ------------------------------------------- */
   /*   Delete old objects                        */
   /* ------------------------------------------- */
             DLTMOD     MODULE(&TOLIB/LOG4RPG00 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG01 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG02 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG03 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG04 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG07 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG08 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG09 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG10 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG11 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG12 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG13 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG14 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG15 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG16 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG17 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG18 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG50 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG51 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG52 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG60 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG61 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG62 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG97 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG98 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG99 )
             MONMSG     MSGID(CPF0000)

             DLTSRVPGM  SRVPGM(&TOLIB/LOG4RPG)
             MONMSG     MSGID(CPF0000)

             DLTSRVPGM  SRVPGM(&TOLIB/LOG4RPGS)
             MONMSG     MSGID(CPF0000)

             DLTMOD     MODULE(&TOLIB/LOG4HTMLAY)
             MONMSG     MSGID(CPF0000)
             DLTSRVPGM  SRVPGM(&TOLIB/LOG4HTMLAY)
             MONMSG     MSGID(CPF0000)

             DLTMOD     MODULE(&TOLIB/LOG4PROFLT)
             MONMSG     MSGID(CPF0000)
             DLTSRVPGM  SRVPGM(&TOLIB/LOG4PROFLT)
             MONMSG     MSGID(CPF0000)

             DLTMOD     MODULE(&TOLIB/LOG4RLFAPP)
             MONMSG     MSGID(CPF0000)
             DLTSRVPGM  SRVPGM(&TOLIB/LOG4RLFAPP)
             MONMSG     MSGID(CPF0000)

             DLTMOD     MODULE(&TOLIB/LOG4SCKAPP)
             MONMSG     MSGID(CPF0000)
             DLTSRVPGM  SRVPGM(&TOLIB/LOG4SCKAPP)
             MONMSG     MSGID(CPF0000)

             DLTMOD     MODULE(&TOLIB/LOG4SHBAPP)
             MONMSG     MSGID(CPF0000)
             DLTSRVPGM  SRVPGM(&TOLIB/LOG4SHBAPP)
             MONMSG     MSGID(CPF0000)

             DLTMOD     MODULE(&TOLIB/LOG4SHBAPC)
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4SOCK  )
             MONMSG     MSGID(CPF0000)
             DLTPGM     PGM(&TOLIB/LOG4SHBAPC)
             MONMSG     MSGID(CPF0000)

             DLTMOD     MODULE(&TOLIB/LOG4_X1   )
             MONMSG     MSGID(CPF0000)
             DLTPGM     PGM(&TOLIB/LOG4_X1PGM)
             MONMSG     MSGID(CPF0000)

             DLTMOD     MODULE(&TOLIB/LOG4_X2   )
             MONMSG     MSGID(CPF0000)
             DLTPGM     PGM(&TOLIB/LOG4_X2PGM)
             MONMSG     MSGID(CPF0000)


   /* ------------------------------------------- */
   /*   Create Log4rpg modules                    */
   /* ------------------------------------------- */
M0:          CRTRPGMOD  MODULE(&TOLIB/LOG4RPG00) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M1)
             ENDDO
             DLTSPLF    FILE(LOG4RPG00 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M1:          CRTRPGMOD  MODULE(&TOLIB/LOG4RPG01) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M2)
             ENDDO
             DLTSPLF    FILE(LOG4RPG01 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M2:          CRTRPGMOD  MODULE(&TOLIB/LOG4RPG02) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M3)
             ENDDO
             DLTSPLF    FILE(LOG4RPG02 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M3:          CRTRPGMOD  MODULE(&TOLIB/LOG4RPG03) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M4)
             ENDDO
             DLTSPLF    FILE(LOG4RPG03 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M4:          CRTRPGMOD  MODULE(&TOLIB/LOG4RPG04) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M5)
             ENDDO
             DLTSPLF    FILE(LOG4RPG04 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M5:          CRTRPGMOD  MODULE(&TOLIB/LOG4RPG07) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M6)
             ENDDO
             DLTSPLF    FILE(LOG4RPG07 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M6:          CRTRPGMOD  MODULE(&TOLIB/LOG4RPG08) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M7)
             ENDDO
             DLTSPLF    FILE(LOG4RPG08 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M7:          CRTRPGMOD  MODULE(&TOLIB/LOG4RPG09) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M8)
             ENDDO
             DLTSPLF    FILE(LOG4RPG09 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M8:          CRTRPGMOD  MODULE(&TOLIB/LOG4RPG10) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M9)
             ENDDO
             DLTSPLF    FILE(LOG4RPG10 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M9:          CRTRPGMOD  MODULE(&TOLIB/LOG4RPG11) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M10)
             ENDDO
             DLTSPLF    FILE(LOG4RPG11 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M10:         CRTRPGMOD  MODULE(&TOLIB/LOG4RPG12) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M11)
             ENDDO
             DLTSPLF    FILE(LOG4RPG12 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M11:         CRTRPGMOD  MODULE(&TOLIB/LOG4RPG13) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M12)
             ENDDO
             DLTSPLF    FILE(LOG4RPG13 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M12:         CRTRPGMOD  MODULE(&TOLIB/LOG4RPG14) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M13)
             ENDDO
             DLTSPLF    FILE(LOG4RPG14 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M13:         CRTRPGMOD  MODULE(&TOLIB/LOG4RPG15) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M14)
             ENDDO
             DLTSPLF    FILE(LOG4RPG15 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M14:         CRTRPGMOD  MODULE(&TOLIB/LOG4RPG16) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M15)
             ENDDO
             DLTSPLF    FILE(LOG4RPG16 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M15:         CRTRPGMOD  MODULE(&TOLIB/LOG4RPG17) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M16)
             ENDDO
             DLTSPLF    FILE(LOG4RPG17 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M16:         CRTRPGMOD  MODULE(&TOLIB/LOG4RPG18) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M17)
             ENDDO
             DLTSPLF    FILE(LOG4RPG18 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M17:         CRTRPGMOD  MODULE(&TOLIB/LOG4RPG50) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M18)
             ENDDO
             DLTSPLF    FILE(LOG4RPG50 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M18:         CRTRPGMOD  MODULE(&TOLIB/LOG4RPG51) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M19)
             ENDDO
             DLTSPLF    FILE(LOG4RPG51 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M19:         CRTRPGMOD  MODULE(&TOLIB/LOG4RPG52) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M20)
             ENDDO
             DLTSPLF    FILE(LOG4RPG52 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M20:         CRTRPGMOD  MODULE(&TOLIB/LOG4RPG60) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M21)
             ENDDO
             DLTSPLF    FILE(LOG4RPG60 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M21:         CRTRPGMOD  MODULE(&TOLIB/LOG4RPG61) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M22)
             ENDDO
             DLTSPLF    FILE(LOG4RPG61 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M22:         CRTRPGMOD  MODULE(&TOLIB/LOG4RPG62) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M23)
             ENDDO
             DLTSPLF    FILE(LOG4RPG62 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M23:         CRTRPGMOD  MODULE(&TOLIB/LOG4RPG97) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M24)
             ENDDO
             DLTSPLF    FILE(LOG4RPG97 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M24:         CRTRPGMOD  MODULE(&TOLIB/LOG4RPG98) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M25)
             ENDDO
             DLTSPLF    FILE(LOG4RPG98 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M25:         CRTRPGMOD  MODULE(&TOLIB/LOG4RPG99) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(CRT_PGM1)
             ENDDO
             DLTSPLF    FILE(LOG4RPG99 ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

   /* ------------------------------------------- */
   /*   Create Log4rpg service programs           */
   /* ------------------------------------------- */
CRT_PGM1:
             CRTSRVPGM  SRVPGM(&TOLIB/LOG4RPG) +
                          MODULE(&TOLIB/LOG4RPG01  +
                                 &TOLIB/LOG4RPG02  +
                                 &TOLIB/LOG4RPG03  +
                                 &TOLIB/LOG4RPG04  +
                                 &TOLIB/LOG4RPG07  +
                                 &TOLIB/LOG4RPG08  +
                                 &TOLIB/LOG4RPG09  +
                                 &TOLIB/LOG4RPG10  +
                                 &TOLIB/LOG4RPG11  +
                                 &TOLIB/LOG4RPG12  +
                                 &TOLIB/LOG4RPG13  +
                                 &TOLIB/LOG4RPG14  +
                                 &TOLIB/LOG4RPG15  +
                                 &TOLIB/LOG4RPG16  +
                                 &TOLIB/LOG4RPG17  +
                                 &TOLIB/LOG4RPG18  +
                                 &TOLIB/LOG4RPG50  +
                                 &TOLIB/LOG4RPG51  +
                                 &TOLIB/LOG4RPG52  +
                                 &TOLIB/LOG4RPG60  +
                                 &TOLIB/LOG4RPG61  +
                                 &TOLIB/LOG4RPG62  +
                                 &TOLIB/LOG4RPG97  +
                                 &TOLIB/LOG4RPG98  +
                                 &TOLIB/LOG4RPG99) +
                          EXPORT(*SRCFILE) SRCFILE(&TOLIB/QLOG4RPG) SRCMBR(LOG4RPG) +
                          BNDSRVPGM((&IFSLIB/IFS) +
                                    (&BASICS1LIB/BASICS1)) +
                          BNDDIR(QC2LE) ACTGRP(*CALLER) DETAIL(*BASIC) +
                          ALWUPD(*YES) ALWLIBUPD(*YES) TGTRLS(&TGTRLS) +
                          TEXT('Tools/400 - Log4rpg     ')
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M27)
             ENDDO
             DLTSPLF    FILE(LOG4RPG   ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M27:         CRTSRVPGM  SRVPGM(&TOLIB/LOG4RPGS) +
                          MODULE(&TOLIB/LOG4RPG00) +
                          EXPORT(*SRCFILE) SRCFILE(&TOLIB/QLOG4RPG) SRCMBR(LOG4RPGS) +
                          BNDSRVPGM(*N) +
                          BNDDIR(QC2LE) ACTGRP(*CALLER) DETAIL(*BASIC) +
                          ALWUPD(*YES) ALWLIBUPD(*YES) TGTRLS(&TGTRLS) +
                          TEXT('Tools/400 - Log4rpg Stub')
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(CRT_MOD2)
             ENDDO
             DLTSPLF    FILE(LOG4RPGS  ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

   /* ------------------------------------------- */
   /*   Create Plug-in modules                    */
   /* ------------------------------------------- */
CRT_MOD2:
             CRTRPGMOD  MODULE(&TOLIB/LOG4HTMLAY) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M29)
             ENDDO
             DLTSPLF    FILE(LOG4HTMLAY) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M29:         CRTRPGMOD  MODULE(&TOLIB/LOG4PROFLT) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M30)
             ENDDO
             DLTSPLF    FILE(LOG4PROFLT) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M30:         CRTRPGMOD  MODULE(&TOLIB/LOG4RLFAPP) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M31)
             ENDDO
             DLTSPLF    FILE(LOG4RLFAPP) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M31:

M32:         CRTRPGMOD  MODULE(&TOLIB/LOG4SCKAPP) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M33)
             ENDDO
             DLTSPLF    FILE(LOG4SCKAPP) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M33:         CRTRPGMOD  MODULE(&TOLIB/LOG4SHBAPP) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M34)
             ENDDO
             DLTSPLF    FILE(LOG4SHBAPP) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M34:         CRTRPGMOD  MODULE(&TOLIB/LOG4SHBAPC) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M35)
             ENDDO
             DLTSPLF    FILE(LOG4SHBAPC) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M35:         CRTRPGMOD  MODULE(&TOLIB/LOG4SOCK  ) +
                          SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                          DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                          OPTIMIZE(&OPTIMIZE)
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(CRT_PGM2)
             ENDDO
             DLTSPLF    FILE(LOG4SOCK  ) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

   /* ------------------------------------------- */
   /*   Create Plug-in service programs           */
   /* ------------------------------------------- */
CRT_PGM2:
             CRTSRVPGM  SRVPGM(&TOLIB/LOG4HTMLAY) +
                          MODULE(&TOLIB/LOG4HTMLAY) +
                          EXPORT(*ALL) +
                          BNDSRVPGM(&LOG4LIB/LOG4RPG +
                                    &BASICS1LIB/BASICS1 ) +
                          BNDDIR(QC2LE) ACTGRP(*CALLER) DETAIL(*BASIC) +
                          ALWUPD(*YES) ALWLIBUPD(*YES) TGTRLS(&TGTRLS) +
                          TEXT('Tools/400 - Log4rpg HTMLLayout ')
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M38)
             ENDDO
             DLTSPLF    FILE(LOG4HTMLAY) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M38:         CRTSRVPGM  SRVPGM(&TOLIB/LOG4PROFLT) +
                          MODULE(&TOLIB/LOG4PROFLT) +
                          EXPORT(*ALL) +
                          BNDSRVPGM(&LOG4LIB/LOG4RPG +
                                    &BASICS1LIB/BASICS1 ) +
                          BNDDIR(QC2LE) ACTGRP(*CALLER) DETAIL(*BASIC) +
                          ALWUPD(*YES) ALWLIBUPD(*YES) TGTRLS(&TGTRLS) +
                          TEXT('Tools/400 - Log4rpg Property Filter')
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M39)
             ENDDO
             DLTSPLF    FILE(LOG4PROFLT) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M39:         CRTSRVPGM  SRVPGM(&TOLIB/LOG4RLFAPP) +
                          MODULE(&TOLIB/LOG4RLFAPP +
                                 &TOLIB/LOG4RPG97) +
                          EXPORT(*ALL) +
                          BNDSRVPGM(&LOG4LIB/LOG4RPG +
                                    &BASICS1LIB/BASICS1 +
                                    &BASICS1LIB/IFS) +
                          BNDDIR(QC2LE) ACTGRP(*CALLER) DETAIL(*BASIC) +
                          ALWUPD(*YES) ALWLIBUPD(*YES) TGTRLS(&TGTRLS) +
                          TEXT('Tools/400 - Log4rpg RollingFileAppender')
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M40)
             ENDDO
             DLTSPLF    FILE(LOG4RLFAPP) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M40:

M41:         CRTSRVPGM  SRVPGM(&TOLIB/LOG4SCKAPP) +
                          MODULE(&TOLIB/LOG4SCKAPP +
                                 &TOLIB/LOG4SOCK) +
                          EXPORT(*ALL) +
                          BNDSRVPGM(&LOG4LIB/LOG4RPG +
                                    &BASICS1LIB/BASICS1) +
                          BNDDIR(QC2LE) ACTGRP(*CALLER) DETAIL(*BASIC) +
                          ALWUPD(*YES) ALWLIBUPD(*YES) TGTRLS(&TGTRLS) +
                          TEXT('Tools/400 - Log4rpg XMLSocketAppender')
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(M42)
             ENDDO
             DLTSPLF    FILE(LOG4SCKAPP) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M42:         CRTSRVPGM  SRVPGM(&TOLIB/LOG4SHBAPP) +
                          MODULE(&TOLIB/LOG4SHBAPP) +
                          EXPORT(*ALL) +
                          BNDSRVPGM(&LOG4LIB/LOG4RPG +
                                    &BASICS1LIB/BASICS1) +
                          BNDDIR(QC2LE) ACTGRP(*CALLER) DETAIL(*BASIC) +
                          ALWUPD(*YES) ALWLIBUPD(*YES) TGTRLS(&TGTRLS) +
                          TEXT('Tools/400 - Log4rpg XMLSocketHubAppender')
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(CRTTSTPGM)
             ENDDO
             DLTSPLF    FILE(LOG4SHBAPP) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

M43:         CRTPGM     PGM(&TOLIB/LOG4SHBAPC) +
                          MODULE(&TOLIB/LOG4SHBAPC   +
                                 &TOLIB/LOG4SOCK   ) +
                          BNDSRVPGM(&LOG4LIB/LOG4RPG   +
                                    &BASICS1LIB/BASICS1 ) +
                          BNDDIR(QC2LE ) ACTGRP(*NEW) DETAIL(*BASIC) +
                          TGTRLS(&TGTRLS) +
                          TEXT('Tools/400 - Log4rpg XMLSocketHubAppender')
             MONMSG     MSGID(CPF0000) EXEC(DO)
                CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                GOTO       CMDLBL(CRTTSTPGM)
             ENDDO
             DLTSPLF    FILE(LOG4SHBAPC) JOB(*) SPLNBR(*LAST)
             MONMSG     MSGID(CPF0000)

   /* ------------------------------------------- */
   /*   Create test programs                      */
   /* ------------------------------------------- */
CRTTSTPGM:
             IF         COND(&CRTTSTPGM *EQ 'YES') THEN(DO)

M50:            CRTRPGMOD  MODULE(&TOLIB/LOG4_X1   ) +
                             SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                             DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                             OPTIMIZE(&OPTIMIZE)
                MONMSG     MSGID(CPF0000) EXEC(DO)
                   CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                   GOTO       CMDLBL(M51)
                ENDDO
                DLTSPLF    FILE(LOG4_X1   ) JOB(*) SPLNBR(*LAST)
                MONMSG     MSGID(CPF0000)

M51:            CRTPGM     PGM(&TOLIB/LOG4_X1PGM) +
                             MODULE(&TOLIB/LOG4_X1) +
                             BNDSRVPGM(&LOG4LIB/LOG4RPG) +
                             BNDDIR(QC2LE ) ACTGRP(*NEW) DETAIL(*BASIC) +
                             TGTRLS(&TGTRLS) +
                             TEXT('Sample: Loads config from mbr:LOG4_X1P1')
                MONMSG     MSGID(CPF0000) EXEC(DO)
                   CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                   GOTO       CMDLBL(M52)
                ENDDO
                DLTSPLF    FILE(LOG4_X1PGM) JOB(*) SPLNBR(*LAST)
                MONMSG     MSGID(CPF0000)

M52:            CRTRPGMOD  MODULE(&TOLIB/LOG4_X2   ) +
                             SRCFILE(&SRCLIB/&SRCFILE) SRCMBR(*MODULE) +
                             DBGVIEW(&DBGVIEW) TRUNCNBR(*NO) TGTRLS(&TGTRLS) +
                             OPTIMIZE(&OPTIMIZE)
                MONMSG     MSGID(CPF0000) EXEC(DO)
                   CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                   GOTO       CMDLBL(M53)
                ENDDO
                DLTSPLF    FILE(LOG4_X2   ) JOB(*) SPLNBR(*LAST)
                MONMSG     MSGID(CPF0000)

M53:            CRTPGM     PGM(&TOLIB/LOG4_X2PGM) +
                             MODULE(&TOLIB/LOG4_X2) +
                             BNDSRVPGM(&LOG4LIB/LOG4RPG) +
                             BNDDIR(QC2LE ) ACTGRP(*NEW) DETAIL(*BASIC) +
                             TGTRLS(&TGTRLS) +
                             TEXT('Sample: Loads config from mbr:LOG4_X1P1')
                MONMSG     MSGID(CPF0000) EXEC(DO)
                   CHGVAR     VAR(&FAILED) VALUE(&FAILED + 1)
                   GOTO       CMDLBL(CLEAN_UP)
                ENDDO
                DLTSPLF    FILE(LOG4_X2PGM) JOB(*) SPLNBR(*LAST)
                MONMSG     MSGID(CPF0000)

             ENDDO

             CHGVAR     VAR(&FAILEDSTR) VALUE(&FAILED)
             ADDENVVAR  ENVVAR(QRB_NUMBER_FAILED) VALUE(&FAILEDSTR) REPLACE(*YES)

   /* ------------------------------------------- */
   /*   Delete Log4rpg modules                    */
   /* ------------------------------------------- */
CLEAN_UP:
/*              DLTMOD     MODULE(&TOLIB/LOG4RPG00 )                                              */
/*              MONMSG     MSGID(CPF0000)                                                         */
             DLTMOD     MODULE(&TOLIB/LOG4RPG01 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG02 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG03 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG04 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG07 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG08 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG09 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG10 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG11 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG12 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG13 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG14 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG15 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG16 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG17 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG18 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG50 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG51 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG52 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG60 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG61 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG62 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG97 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG98 )
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4RPG99 )
             MONMSG     MSGID(CPF0000)

   /* ------------------------------------------- */
   /*   Delete Plug-in modules                    */
   /* ------------------------------------------- */
             DLTMOD     MODULE(&TOLIB/LOG4HTMLAY)
             MONMSG     MSGID(CPF0000)

             DLTMOD     MODULE(&TOLIB/LOG4PROFLT)
             MONMSG     MSGID(CPF0000)

             DLTMOD     MODULE(&TOLIB/LOG4RLFAPP)
             MONMSG     MSGID(CPF0000)

             DLTMOD     MODULE(&TOLIB/LOG4SCKAPP)
             MONMSG     MSGID(CPF0000)

             DLTMOD     MODULE(&TOLIB/LOG4SHBAPP)
             MONMSG     MSGID(CPF0000)

             DLTMOD     MODULE(&TOLIB/LOG4SHBAPC)
             MONMSG     MSGID(CPF0000)
             DLTMOD     MODULE(&TOLIB/LOG4SOCK  )
             MONMSG     MSGID(CPF0000)

             DLTMOD     MODULE(&TOLIB/LOG4_X1   )
             MONMSG     MSGID(CPF0000)

             ENDPGM
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing A_README  type TXT - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "A_README  "
mbrtype =  "TXT       "
mbrtext =  "History LOG4RPG Service Program                   "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
-----------------------
      History
-----------------------

Version 1.12
------------

Fixed:   Changed *_doAppend() to better handle unexpected errors
         when renaming the log file. (RollingFileAppender and
         DailyRollingFileAppender)


Version 1.11
------------

Fixed:   Fixed problem that the hierachy of the loggers was broken
         when a logger of a higher level had been defined after a
         a loger of a lower level.
New:     Now the logger hierachy is dumped to the debug log, when
         the Log4rpg debug log is set to VERBOSE.
         Setting: log4rpg.debug=verbose


Version 1.10.1
--------------

Fixed:   Fixed problem that some special charcaters were not properly
         translated to job CCSID when producing the XML message.


Version 1.10
------------

Changed: Changed the logging procedures to use the Logger_is*Enabled()
         procedures rather than checking all the stuff by themselves.

Added:   Exported procedures:
            Logger_isDebugEnabled()
            Logger_isInfoEnabled()
            Logger_isWarnEnabled()
            Logger_isErrorEnabled()
            Logger_isFatalEnabled()


Version 1.9.5
-------------

Fixed:   Fixed problem that the following procedures did not return a
         return value if logging was disabled:
            Logger_getInternalDebugMode()
            LogLog_getInternalDebugOutput()


Version 1.9.4
-------------

New:     RollingFileAppender: Added parameter 'ccsid' to enable the user
         to specify the ccsid of the log file.
New:     DailyRollingFileAppender: Added parameter 'ccsid' to enable the
         user to specify the ccsid of the log file.


Version 1.9.3
-------------

Fixed:   Introduced special host name 'localclient' that resolves to the
         TCP/IP address of the 5250 client of the current job.
         'localclient' can be used to configure the XMLSocketAppender to
         connect to a server running of the 5250 client of the current job.


Version 1.9.2
-------------

Fixed:   Updated CEELIB, CLIB and CLIB2 to latest version.


Version 1.9.1
-------------

Fixed:   Changed passing mode of parameter i_followLnk of prototype Qp0lGetAttr
         from 'const' to 'value'.


Version 1.9
-----------

Changed: Removed dependency to BASICS1 from logger stub service program LOG4RPGS.


Version 1.8
-----------

Fixed:   Fixed synchronisation problems, when sharing the log file with another job.
Added:   Exported procedures:
            getObject()
            getProcedure()
            getSrvPgm()
Added:   Added property 'syncObj' to DailyRollingFileAppender and RollingFileAppender.
         Default values are:   DailyRollingFileAppender - QGPL/LOG4RPG50
                               RollingFileAppender      - QGPL/LOG4RLFAPP
Added:   Added property 'syncMode' to DailyRollingFileAppender and RollingFileAppender.
         Default value for both appenders is: 'false' = do not log sync lock holder.
Added:   Added property 'syncText' to DailyRollingFileAppender and RollingFileAppender.
         Default values are:
               DailyRollingFileAppender - Log4rpg Daily RollingFileAppender Sync. Object
               RollingFileAppender      - Log4rpg RollingFileAppender Sync. Object


Version 1.7.1
-------------

Fixed:   Now LOG4_X1PGM (LOG4_X1) compiles without erroes.


Version 1.7
-----------

Fixed:   Fixed problem when the same log file is used by multiple jobs. This fix
         requires IFS V1.7.
Changed: New requisites:   Service program IFS V1.7
Changed: Changed parameter 'i_filterName' of Appender_setFilter() to 'i_pFilter'.
Changed: Changed parameter 'i_appName' of Logger_addAppender() to 'i_pAppender'.
Changed: DailyRollingFileAppender, RollingFileAppender and DailyRollingPrintAppender:
         Improved performance when calling f_writeLineIfsFile() / Rwrite().
Changed: Added optional parameter i_width to LogEvent_getFirstLineOfText() and
         LogEvent_getNextLineOfText() procedures.
Changed: New exported procedures to configure a logger within a program.
Added:   Added new procedures to Log4rpg stub module:
            Layout_new()         Appender_new()
            Layout_null()        Appender_null()
            Filter_new()         Appender_setLayout()
            Filter_null()        Appender_setFilter()
            Filter_setNext()     Logger_addAppender()


Version 1.6.1
-------------

Fixed:   Fixed problem in "RollingFileAppender" plugin. Now correctly passing a file name to
         f_renameIfsFile().


Version 1.6
-----------

Fixed:   Fixed problem that appenders, layouts and filters were not (re)configured
         when reloading configuration data. Only the log level was properly configured.
Fixed:   Fixed potential memory leak in PropertyList object. Handle may not have been
         correctly freed in PropertyList_delete().
Added:   Special value *SEARCH for the library name when loading properties from
         a physical file member. When *SEARCH is specified as the library name,
         all files in the library list that matches the specified file name are
         searched for the member. The first member that is found is used to load
         the configuration data.
Changed: New requisites:   Service program BASICS1: V1.9
Changed: Changed Log4rpg to log empty messages. You may considers that as a bug fix.
Changed: Enhanced the Log4rpg stub module to optionally load the Log4rpg service
         program and forward procedure calls to it. Added setStubOfs() to let the
         stub module set an offset to let f_caller() skip the stub module.


Version 1.5
-----------

Added:   Added pluggable appender: RollingFileAppender
Added:   Added feature to periodically reload the configuration data.
Added:   Added procedure Configurator_loadAndWatchPropertiesConfiguration().
Changed: New requisites:   Service program IFS    : V1.5
                           Service program BASICS1: V1.7.2
Changed: Changed all Appender to use the new OptionConverter to convert
         properties.
Fixed:   Fixed problem that loadPropertiesFromMbr crashed with RNX0100
         if the record length of a non-source member exceeded 512.
Fixed:   Fixed typo in PLOG4RPG11. Renamed 'Layouder_isNull' to 'Layout_isNull'.


Version 1.4.5
-------------

Added:   Added stub module 'LOG4RPG00' to distribution package.
Changed: Moved URL object to BASICS1.
Changed: Change size of 'logger name' from 32A to 128A.


Version 1.4.4
-------------

Fixed:   Fixed RNX0100 (Length or start position is out of range) error
         in logLoggingEvent() when the message description could be
         retrieved.


Version 1.4.3
-------------

Added:   Fixed problem that the log file could not be renamed because
         'getArchivePath' returned a path instead of a file name.


Version 1.4.2
-------------

Added:   Added property 'share' to DailyRollingFileAppender. Default
         value is 'false' = do not share log file with other jobs.


Version 1.4.1
-------------

Added:   Fixed problem that the log event was not correctly produced
         when i_text contained ']]>'. Now it is replaced with ']]&gt'.


Version 1.4
-----------

Added:   Added property 'connectTimeout' to XMLSocketAppender. Default
         connect timeout is 5.000 milliseconds = 5 seconds.


Version 1.3.1
-------------

Fixed:   Fixed problem that LOG4RPG50 crashed, when the appender could
         not be opened. (error on 'f_left(i_handle.dateValue: 1)' due to
         missing dateValue)
Added:   Added property 'reconnectionDelay' to XMLSocketAppender. Default
         reconnection delay is 30.000 milliseconds = 30 seconds.


Version 1.3
-----------

Fixed:   Fixed probem that parameter 'ccsid' was not properly handled.
         Changed XMLSocketAppender_setProperties() to correctly call
         initIconv().
Fixed:   Changed call to f_getProcPtrByName() to omit message parameter
         to avoid program crash on error.
Fixed:   Fixed problem that appender 'defaultFile' was not found when
         the default configuration was used.
Changed: Now using LogLog_verbose() to log errors when Layout_getHeader()
         or Layout_getFooter() could not be resolved.
Added:   Added procedures: Logger_getInternalDebugMode()
                           Logger_getInternalDebugOutput()
Added:   Added properties 'writeHeader' and 'writeFooter' to the
         DailyRollingFileAppender that control whether a header
         or footer is appended to the log.
Added:   Added pluggable appender: XMLSocketHubAppender (used to connect to Chainsaw)


Version 1.2.1
-------------

Fixed:   Added missing </title> tag to HTMLLayout.


Version 1.2
-----------

Changed: Replaced data structure logEvent with object LogEvent.
Changed: Moved wordWrap processing to Appender implementation objects.
Changed: Now changing property key to lower case, when adding a property.
Changed: Removed return value from procedure: Layout_format().
Changed: Added parameter i_level to Logger_forcedLog() and Logger_forcedLogMsg().
Changed: Added parameter i_pAppender to appender implementation objects.
Changed: Added parameter i_pLayout to layout implementation objects.
Fixed:   Fixed problem that properties were not found because auf case mismatch.
Added:   Added feature to completely enable/disable Log4rpg. Logger_setLogging().
Added:   Introduced Filter to Log4rpg.
Added:   Added procedure Appender_knowsProperty().
Added:   Added procedure Layout_knowsProperty().
Added:   Added procedure Layout_newLine() which returns the new-line character.
Added:   Added pluggable layout: HTMLLayout
Added:   Added pluggable filter: PropertyFilter
Added:   Added pluggable appender: XMLSocketAppender (used to connect to Chainsaw)


Version 1.1
-----------

Fixed:   Released Version 0.9 instead of 1.0.
Fixed:   Fix bug in PropertyList_loadFromUrl(). Now returning cFalse
         on unknown URL protocol.
Fixed:   Logger_addAppender() failed when attempting to add an appender
         to the appender list.
Changed: Added the following export to the Log4rpg service program:
            - LOG4RPG07_PropertyList_getFirst
            - LOG4RPG07_PropertyList_getIterator
            - LOG4RPG07_PropertyList_getNext
            - LOG4RPG07_PropertyList_isNull


Version 1.0
-----------

Relased: 10.10.2006

]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing CEELIB  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "CEELIB    "
mbrtype =  "RPGLE     "
mbrtext =  "Prototypes of CEE APIs                   (include)"
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
 DEF  /IF NOT DEFINED(CEELIB)
 DEF  /DEFINE CEELIB
      *
      * ---------------------------------------------------------------
      *   Program or Procedure Call APIs
      * ---------------------------------------------------------------
      *
      *  Condition token, used as feedback code
     D cee_fc_t        DS                  qualified               based(pDummy)
     D  Condition_ID...
     D                         1      4A
     D   MsgSev                1      2I 0
     D   Msg_No                3      4U 0
     D  Flags                  5      5A
     D  Facility_ID...
     D                         6      8A
     D  I_S_Info               9     12A
      *
      *  Retrieve Operational Descriptor Information (CEEDOD)
     D CEEDOD...
     D                 PR
     D                                            extproc('CEEDOD')
     D  i_posn                       10I 0 const
     D  o_desctype                   10I 0
     D  o_datatype                   10I 0
     D  o_descinf1                   10I 0
     D  o_descinf2                   10I 0
     D  o_datalen                    10I 0
     D  o_fc                         12A          options(*omit   )
      *
      *  Reference fields for CEEDOD API
     D descInf_t       DS                  based(pDummy)   qualified
     D  desctype                     10I 0
     D  datatype                     10I 0
     D  descinf1                     10I 0
     D  descinf2                     10I 0
     D  datalen                      10I 0
      *
      *  Test for Omitted Argument (CEETSTA) API
     D CEETSTA...
     D                 PR
     D                                            extproc('CEETSTA')
     D  io_isPresent                 10I 0
     D  i_argNum                     10I 0 const
     D  o_fc                         12A          options(*omit   )
      *
      *  Get String Information (CEEGSI) API
     D CEEGSI...
     D                 PR
     D                                            extproc('CEEGSI')
     D  i_posn                       10I 0 const
     D  o_datatype                   10I 0
     D  o_curlen                     10I 0
     D  o_maxlen                     10I 0
     D  o_fb                         12A          options(*omit   )
      *
      *  Reference fields for CEEGSI API
     D strInf_t        DS                  based(pDummy)   qualified
     D  datatype                     10I 0
     D  curlen                       10I 0
     D  maxlen                       10I 0
      *
      * ---------------------------------------------------------------
      *   Math APIs
      * ---------------------------------------------------------------
      *
      *  Logarithm base 10 (double float)
     D CEESDLG1...
     D                 PR                  extproc('CEESDLG1')
     D  i_value                       8F   const
     D  o_result                      8F
      *
      * ---------------------------------------------------------------
      *   ILE CEE Date and Time APIs
      * ---------------------------------------------------------------
      *
      *  Calculate Day of Week from Lilian Date (CEEDYWK) API
     D CEEDYWK         PR                  opdesc extproc('CEEDYWK')
     D   lilian_date                 10I 0 const
     D   day_no                      10I 0
     D   feedback                    12A   options(*omit)
      *
      *  Convert Lilian Date to Character Format (CEEDATE) API
     D CEEDATE         PR                  opdesc extproc('CEEDATE')
     D   lilian_date                 10I 0 const
     D   date_format                 80A   const options(*varsize)
     D   char_date                   80A   options(*varsize)
     D   feedback                    12A   options(*omit)
      *
      *  Convert Date to Lilian Format (CEEDAYS) API
     D CEEDAYS         PR                  opdesc extproc('CEEDAYS')
     D   char_date                   80A   const options(*varsize)
     D   date_format                 80A   const options(*varsize)
     D   lilian_date                 10I 0
     D   feedback                    12A   options(*omit)
      *
      * ---------------------------------------------------------------
      *   Activation Group and Control Flow APIs
      * ---------------------------------------------------------------
      *
      *  Register Activation Group Exit Procedure (CEE4RAGE) API
     D CEE4RAGE...
     D                 PR                  extproc('CEE4RAGE')
     D  i_pProc                        *   const procptr
     D   fc                          12A         options(*OMIT)
      *
     D END_ACTGRP_CODE_EXCEPTION_MESSAGE...
     D                 C                   x'40000000'
     D END_ACTGRP_CODE_ABNORMAL_END...
     D                 C                   x'00008000'
     D END_ACTGRP_CODE_ACTGRP_IS_ENDING...
     D                 C                   x'00004000'
     D END_ACTGRP_CODE_INIT_BY_RCLACTGRP...
     D                 C                   x'00002000'
     D END_ACTGRP_CODE_INIT_BY_JOB_END...
     D                 C                   x'00001000'
     D END_ACTGRP_CODE_INIT_BY_EXIT_VERB...
     D                 C                   x'00000800'
     D END_ACTGRP_CODE_INIT_BY_FUNCTION_CHECK...
     D                 C                   x'00000400'
     D END_ACTGRP_CODE_INIT_BY_OUT_OF_SCOPE_JUMP...
     D                 C                   x'00000200'
      *
      *  Register Call Stack Entry Termination User Exit Procedure (CEERTX)
     D CEERTX...
     D                 PR                         extproc('CEERTX')
     D  i_procPtr                      *   const  procptr
     D  i_rtxToken                     *   const  options(*omit)
     D  o_fc                         12A          options(*omit)
      *
     D CEERTX_user_exit...
     D                 PR                         extproc('CEERTX_user_exit')
     D  i_rtxToken                     *   const
      *
      *  Unregister Call Stack Entry Termination User Exit Procedure (CEEUTX)
     D CEEUTX...
     D                 PR                         extproc('CEEUTX')
     D  i_procPtr                      *   const  procptr
     D  o_fc                         12A          options(*omit)
      *
 DEF  /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing CLIB  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "CLIB      "
mbrtype =  "RPGLE     "
mbrtext =  "Prototypes of C-Library                  (include)"
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
 DEF  /IF NOT DEFINED(CLIB)
 DEF  /DEFINE CLIB
      *
      *  Basic C data types
     D uLong_t         S             10U 0 based(pDummy)
     D uInt_t          S             10U 0 based(pDummy)
      *
      *  stdin, stdout and stderr
     D stdin           S               *   import('_C_IFS_stdin')
     D stdout          S               *   import('_C_IFS_stdout')
     D stderr          S               *   import('_C_IFS_stderr')
      *
      *  system -- Execute a Command
     D system          PR            10I 0 extproc('system')
     D  i_clCommand                    *   value options(*string)
      *
     D EXCP_MSGID      S              7A   import('_EXCP_MSGID')
      *
      *  time -- Determine Current Time
     D time...
     D                 PR            10i 0 extproc('time')
     D  timeptr                        *   value
      *
      *  strftime -- Convert to Formatted Time
     D strftime...
     D                 PR            10i 0 extproc('strftime')
     D  dest                           *   value
     D  maxsize                      10i 0 value
     D  format                         *   value options(*string)
     D  timeptr                            const  likeds(tm_t)
      *
     D tm_t            DS                  qualified  based(pDummy)
     D  tm_sec                       10I 0
     D  tm_min                       10I 0
     D  tm_hour                      10I 0
     D  tm_mday                      10I 0
     D  tm_mon                       10I 0
     D  tm_year                      10I 0
     D  tm_wday                      10I 0
     D  tm_yday                      10I 0
     D  tm_isdst                     10I 0
      *
      *  localtime() -- Correct Local Time, returns tm_t*
     D localtime...
     D                 PR              *   extproc('localtime')
     D  time                         10I 0 const
      *
      *  localtime_r() -- Correct Local Time
     D localtime_r...
     D                 PR              *   extproc('localtime_r')
     D  time                         10I 0 const
     D  tm                                 const  likeds(tm_t)
      *
      *  strtok -- Tokenize String
     D strtok          PR              *          extproc('strtok')
     D  i_string                       *   value  options(*string)
     D  i_delimiters                   *   value  options(*string)
      *
      *  atoi -- Convert Character String to Integer
     D atoi            PR            10I 0        extproc('atoi')
     D  i_string                       *   value  options(*string)
      *
      *  memcpy -- Copy Bytes
     D memcpy          PR              *          extproc('memcpy')
     D  i_pDest                        *   value
     D  i_pSrc                         *   value
     D  i_count                      10U 0 value
      *
      *  memset -- Set Bytes to Value
     D memset          PR              *          extproc('memset')
     D  i_pDest                        *   value
     D  i_char                       10I 0 value
     D  i_count                      10U 0 value
      *
      *  memmove -- Copy Bytes
      *     memmove allows copying between objects that may overlap
      *     as if src is first copied into a temporary array.
     D memmove         PR              *          extproc('memmove')
     D  pMemDest                       *   value
     D  pMemSrc                        *   value
     D  memSize                            value like(size_t)
      *
      *  memcmp -- Compare Buffers
     D memcmp          PR            10I 0        extproc('memcmp')
     D  pBuf1                          *   value
     D  pBuf2                          *   value
     D  count                              value like(size_t)
      *
      *  memicmp -- Compare Bytes (ignore case)
     D memicmp         PR            10I 0        extproc('__memicmp')
     D  pBuf1                          *   value
     D  pBuf2                          *   value
     D  count                        10U 0 value
      *
      *  strcmp() -- Compare Strings
      *  rc:   less than 0      -   string 1 less than string 2
      *        0                -   string 1 equivalent to string 2
      *        greater than 0   -   string 1 greater than string 2
     D strcmp...
     D                 PR            10I 0
     D                                            extproc('strcmp')
     D  string1                        *   value  options(*string)
     D  string2                        *   value  options(*string)
      *
      *  strcasecmp() -- Compare Strings without Case Sensitivity
      *  rc:   less than 0      -   string 1 less than string 2
      *        0                -   string 1 equivalent to string 2
      *        greater than 0   -   string 1 greater than string 2
     D strcasecmp...
     D                 PR            10I 0
     D                                            extproc('strcasecmp')
     D  string1                        *   value  options(*string)
     D  string2                        *   value  options(*string)
      /IF NOT DEFINED(TESTPTR)
      /DEFINE TESTPTR
      *
      *  Test Pointer (TESTPTR)
     D testptr         PR            10I 0 extproc('_TESTPTR')
     D  i_ptr                          *   value
     D  i_test_type                  10I 0 value
      *
     D cTESTPTR_TYPE_PROCPTR...
     D                 C                   0
     D cTESTPTR_NO_OPTIMIZED_PARAMETER_PASSING...
     D                 C                   0
     D cTESTPTR_OPTIMIZED_PARAMETER_PASSING...
     D                 C                   1
      *
     D cTESTPTR_TYPE_MEMPTR...
     D                 C                   1
     D cTESTPTR_NON_TERASPACE...
     D                 C                   0
     D cTESTPTR_TERASPACE...
     D                 C                   1
      *
     D cTESTPTR_ERROR_NOT_EXIST...
     D                 C                   x'2401'
     D cTESTPTR_ERROR_INVALID...
     D                 C                   x'2402'
     D cTESTPTR_ERROR_OBJECT_DESTROYED...
     D                 C                   x'2202'
      /ENDIF
      *
      *  malloc() - Reserve Storage Block
     D TS_malloc...
     D                 PR              *   extproc('_C_TS_malloc')
     D  i_size                       10U 0 value
      *
      *  realloc() - Change Reserved Storage Block Size
     D TS_realloc...
     D                 PR              *   extproc('_C_TS_realloc')
     D  i_pMem                         *   value
     D  i_size                       10U 0 value
      *
      *  free() - Release Storage Blocks
     D TS_free...
     D                 PR                  extproc('_C_TS_free')
     D  i_pMem                         *   value
      *
      *  _C_TS_malloc_info() - Determine amount of teraspace memory used
     D TS_malloc_info...
     D                 PR            10I 0 extproc('_C_TS_malloc_info')
     D  o_c_mallinfo                       const  likeds(C_mallinfo_t)
     D  i_size                       10U 0 value
      *
      *  _C_TS_malloc_debug() - Determine amount of teraspace memory
      *                         used (with optional dumps and verification)
     D TS_malloc_debug...
     D                 PR            10I 0 extproc('_C_TS_malloc_debug')
     D  i_dump_level                 10U 0 value
     D  i_vrfy_level                 10U 0 value
     D  o_c_mallinfo                       const  likeds(C_mallinfo_t)
     D  i_size                       10U 0 value
      *
      * The following are possible values for the dump_level parameter
     D C_NO_DUMPS      C                   0
      *  Dumps the _C_mallinfo_t structure:
     D C_DUMP_TOTALS   C                   1
      *  Does a hex dump of all allocated chunks of teraspace storage,
      *  this is the entire 512K chunk of storage:
     D C_DUMP_CHUNKS   C                   2
      *  Dumps each of the allocated nodes.
      *  There is a node for each malloc performed with the header
      *  associated with that malloc:
     D C_DUMP_NODES    C                   3
      *  Dumps the cartesian tree used to keep track of the freed nodes:
     D C_DUMP_TREE     C                   4
     D C_DUMP_ALL      C                   9999
      *
      *  The following are possible values for the verify_level parameter
     D C_NO_CHECKS     C                   0
     D C_CHECK_TOTALS  C                   1
     D C_CHECK_CHUNKS  C                   2
     D C_CHECK_NODES   C                   3
     D C_CHECK_TREE    C                   4
     D C_CHECK_ALL     C                   9998
      *  Will call abort() if verification fails
     D C_CHECK_ALL_AND_ABORT...
     D                 C                   9999
      *
      * The following structure is used to return information
      * from the _C_TS_malloc_info routine.  The fields are:
      *   total_bytes        - bytes allocated from system
      *                        (high water mark)
      *   allocated_bytes    - number of allocated bytes
      *   unallocated_bytes  - number of unallocated bytes
      *   allocated_blocks   - number of allocated blocks
      *   unallocated_blocks - number of unallocated blocks
      *   requested_bytes    - bytes actually requested from malloc
      *   pad_bytes          - bytes used to pad allocation length
      *                        to a multiple of 16
      *   overhead_bytes     - bytes used for malloc overhead
     D C_mallinfo_t...
     D                 DS                  qualified               based(pDummy)
     D  total_bytes...
     D                               20I 0
     D  allocated_bytes...
     D                               20I 0
     D  unallocated_bytes...
     D                               20I 0
     D  allocated_blocks...
     D                               20I 0
     D  unallocated_blocks...
     D                               20I 0
     D  requested_bytes...
     D                               20I 0
     D  pad_bytes...
     D                               20I 0
     D  overhead_bytes...
     D                               20I 0
      *
      *  malloc -- Reserve Storage Block
     D malloc          PR              *          extproc('malloc')
     D  i_size                       10U 0 value
      *
      *  realloc -- Change Reserved Storage Block Size
     D realloc         PR              *          extproc('realloc')
     D  i_pMem                         *   value
     D  i_size                       10U 0 value
      *
      *  free -- Release Storage Blocks
     D free            PR                         extproc('free')
     D  i_pMem                         *   value
      *
      *  srand -- Set Seed for rand Function   e.g.:   srand(getSeed(*null))
     D srand           PR                         extproc('srand')
     D  i_seed                       10U 0 value
      *
      *  rand -- Generate Random Number                x = rand()
     D rand            PR            10I 0        extproc('rand')
      *
     D RAND_MAX        C                   const(32767)
      *
      *  getSeed -- Get Seed for srand function
     D getSeed         PR            10I 0        extproc('time')
     D  i_timePtr                      *   value
      *
      *  strlen -- Determine String Length
     D strlen...
     D                 PR            10U 0 extproc('strlen')
     D  i_string                       *   value
      *
      *  tmpnam -- Produce Temporary File Name
     D tmpnam          PR              *          extproc('tmpnam')
     D  pTmpNme                        *   value
      *
      *  _C_IFS_tmpnam -- Produce Temporary File Name for the IFS file system
     D ifs_tmpnam      PR              *          extproc('_C_IFS_tmpnam')
     D  fileName                       *   value
      *
     D L_tmpnam        C                   const(39)                            ! <stdio.h>
      *
     D TMP_MAX         C                   const(32767)                         ! <stdio.h>
      *
      *  qsort -- Sort Array
     D qsort           PR              *                       extproc('qsort')
     D  memPtr                         *   value
     D  numElem                            value  like(size_t)
     D  width                              value  like(size_t)
     D  pSortFunc                      *   value  procptr
      *
      *  bsearch -- Search Arrays
     D bsearch         PR              *          extproc('bsearch')
     D  keyPtr                         *   value
     D  memPtr                         *   value
     D  numElem                            value  like(size_t)
     D  width                              value  like(size_t)
     D  pSearchFnc                     *   value  procptr
      *
      *  iconv_open()--Code Conversion Allocation API
     D iconv_open...
     D                 PR                  extproc('iconv_open')
     D                                     like(iconv_t   )
     D  i_toCode                       *   value
     D  i_fromCode                     *   value
      *
     D iconv_t         DS                  qualified   based(pDummy)   align
     D  return_value                 10I 0
     D  cd                           10I 0 dim(12)
      *
     D iconv_fromcode_t...
     D                 DS                  qualified   based(pDummy)
     D  ibmccsid                      8A
     D  ccsid                         5A
     D  convAlt                       3A
     D  substAlt                      1A
     D  shiftStateAlt                 1A
     D  inpLengthOpt                  1A
     D  errOption                     1A
     D  reserved                     12A
      *
     D iconv_tocode_t...
     D                 DS                  qualified   based(pDummy)
     D  ibmccsid                      8A
     D  ccsid                         5A
     D  reserved                     19A
      *
      *  QtqIconvOpen()--Code Conversion Allocation API
     D QtqIconv_open...
     D                 PR                  extproc('QtqIconvOpen')
     D                                     likeds(iconv_t )
     D  i_toCode                           const  likeds(QtqCode_t)
     D  i_fromCode                         const  likeds(QtqCode_t)
      *
     D QtqCode_t...
     D                 DS                  qualified   based(pDummy)
     D  ccsid                        10I 0
     D  conversionA                  10I 0
     D  substitutionA                10I 0
     D  shiftStateA                  10I 0
     D  inpLenOpt                    10I 0
     D  errOptMxdDta                 10I 0
     D  reserved                     12A
      *
      *  iconv()--Code Conversion API
     D iconv...
     D                 PR            10U 0        extproc('iconv')
     D  i_cd                               value likeds(iconv_t  )
     D  i_pInBuf                       *
     D  i_inBytLeft                  10U 0
     D  i_pOutBuf                      *
     D  i_outBytLeft                 10U 0
      *
     D cICONV_ERROR    C                   const(4294967295)
      *
      *  iconv_close()--Code Conversion Deallocation API
     D iconv_close...
     D                 PR            10I 0        extproc('iconv_close')
     D  i_cd                               value likeds(iconv_t  )
      *
      *  0/-1 = stat()--Get File Information                include <sys/stat.h>
     D stat...
     D                 PR            10I 0        extproc('stat')               = int
     D  i_pPath                        *   value options(*string)               = *path
     D  i_pStat                        *   value                                = *buf
      *
      *  0/-1 = fstat()--Get File Information by Descriptor include <sys/stat.h>
     D fstat...
     D                 PR            10I 0        extproc('fstat')              = int
     D  i_fd                         10I 0 value                                = int
     D  i_stat                             const likeds(st_stat_t)              = *buf
      *
      *  0/-1 = lstat()--Get File or Link Information       include <sys/stat.h>
     D lstat...
     D                 PR            10I 0        extproc('lstat')              = int
     D  i_pPath                        *   value options(*string)               = *path
     D  i_pStat                        *   value                                = *buf
      *
     D st_stat_t       DS                  qualified   based(pDummy)   align
     D  mode                         10U 0                                      mode_t =uint
     D  ino                          10U 0                                      ino_t  =uint
     D  nlink                         5U 0                                      nlink_t=ushort
     D  reserved2                     2A
     D  uid                          10U 0                                      uid_t  =uint
     D  gid                          10U 0                                      gid_t  =uint
     D  size                         10I 0                                      off_t  =int
     D  atime                        10I 0                                      time_t =long
     D  mtime                        10I 0                                      time_t =long
     D  ctime                        10I 0                                      time_t =long
     D  dev                          10U 0                                      dev_t  =uint
     D  blksize                      10U 0                                      size_t =uint
     D  allocsize                    10U 0                                      ulong
     D  objtype                      11A                                        qp0l_objtype_t
     D  reserved3                     1A
     D  codepage                      5U 0                                      ushort
     D  ccsid                         5U 0                                      ushort
     D  rdev                         10U 0                                      dev_t  =uint
     D  nlink32                      10U 0                                      nlink32_t=ulng
     D  rdev64                       20U 0                                      dev64_t=ullng
     D  dev64                        20U 0                                      dev64_t=ullng
     D  reserved1                    36A
     D  ino_gen_id                   10U 0                                      uint
      *
      *  Qp0lGetAttr()--Get Attributes
     D Qp0lGetAttr...
     D                 PR            10I 0 extproc('Qp0lGetAttr')
     D  i_path                             const  likeds(Qlg_Path_Name_t)
     D  i_attrArray                        const  like(Qlg_attrArray_t  )
     D  i_pBuffer                      *   value
     D  i_bytPrv                     10U 0 value
     D  o_sizeNeeded                 10U 0
     D  o_bytRet                     10U 0
     D  i_followLnk                  10U 0 value
      *
     D Qlg_Path_Name_t...
     D                 DS                  qualified align         based(pDummy)
     D   CCSID                       10I 0
     D   Country_ID                   2A
     D   Language_ID                  3A
     D   Reserved                     3A
     D   Path_Type                   10U 0
     D   Path_Length                 10I 0
     D   Path_Name_Delimiter...
     D                                2A
     D   Reserved2                   10A
     D   Path_Name                  256A
      *
     D QLG_PATH_JOB_CCSID...
     D                 C                   const(0)
     D QLG_PATH_JOB_COUNTRYID...
     D                 C                   const(X'0000')
     D QLG_PATH_JOB_LANGUAGEID...
     D                 C                   const(X'000000')
      *
      *  The Path_Name is a character string and the delimiter is one byte long.
     D QLG_CHAR_SINGLE...
     D                 C                   const(0)
      *
      *  The Path_Name is a pointer and the delimiter is one byte long.
     D QLG_PTR_SINGLE...
     D                 C                   const(1)
      *
      *  The Path_Name is a character string and the delimiter is two bytes long.
     D QLG_CHAR_DOUBLE...
     D                 C                   const(2)
      *
      *  The Path_Name is a pointer and the delimiter is two bytes long.
     D QLG_PTR_DOUBLE...
     D                 C                   const(3)
      *
     D Qlg_attrArray_t...
     D                 DS                  qualified               based(pDummy)
     D  numE                         10I 0
     D  attr                         10I 0 dim(64)
      *
     D Qlg_rtnAttr_t...
     D                 DS                  qualified               based(pDummy)
     D  ofsNextAttr                  10I 0
     D  ID                           10I 0
     D  size                         10I 0
     D  reserved                      4A
      *
     D QP0L_ATTR_OBJTYPE...
     D                 C                   const(0)                             CHAR(10)
     D QP0L_ATTR_DATA_SIZE...
     D                 C                   const(1)                             UINT(4)
     D QP0L_ATTR_ALLOC_SIZE...
     D                 C                   const(2)                             UINT(4)
     D QP0L_ATTR_EXTENDED_ATTR_SIZE...
     D                 C                   const(3)                             UINT(4)
     D QP0L_ATTR_CREATE_TIME...
     D                 C                   const(4)                             UINT(4)
     D QP0L_ATTR_ACCESS_TIME...
     D                 C                   const(5)                             UINT(4)
     D QP0L_ATTR_CHANGE_TIME...
     D                 C                   const(6)                             UINT(4)
     D QP0L_ATTR_MODIFY_TIME...
     D                 C                   const(7)                             UINT(4)
     D QP0L_ATTR_STG_FREE...
     D                 C                   const(8)                             CHAR(1)
     D QP0L_ATTR_CHECKED_OUT...
     D                 C                   const(9)                             chkOut Fmt
     D QP0L_ATTR_LOCAL_REMOTE...
     D                 C                   const(10)                            CHAR(1)
      *
     D QP0L_DONOT_FOLLOW_SYMLNK...
     D                 C                   const(x'00')
     D QP0L_FOLLOW_SYMLNK...
     D                 C                   const(x'01')
      *
     D QP0L_NOT_CHECKED_OUT...
     D                 C                   const(x'00')
     D QP0L_CHECKED_OUT...
     D                 C                   const(x'01')
      *
     D QP0L_LOCAL_OBJ...
     D                 C                   const(x'01')
     D QP0L_REMOTE_OBJ...
     D                 C                   const(x'02')
      *
      *  QlgGetcwd()--Get Current Directory (using NLS-enabled path name)
      *  Returns: Qlg_Path_Name_T
     D QlgGetcwd...
     D                 PR              *   extproc('QlgGetcwd')
     D  o_path                             const  likeds(Qlg_Path_Name_t)
     D  i_size                             value  like(size_t)
      *
      *  getcwd()--Get Current Directory
     D getcwd...
     D                 PR              *   extproc('getcwd')
     D  o_path                    65535A   const  options(*varsize)
     D  i_size                             value  like(size_t)
      *
      *  QlgChdir()--Change Current Directory (using NLS-enabled path name)
      *  Returns: Qlg_Path_Name_T
     D QlgChdir...
     D                 PR            10I 0 extproc('QlgChdir')
     D  i_path                             const  likeds(Qlg_Path_Name_t)
      *
      *  chdir()--Change Current Directory
     D chdir...
     D                 PR            10I 0 extproc('chdir')
     D  i_path                         *   value  options(*string)
      *
      *  QSYSINC/SYS.TYPES
     D off_t           S             10I 0 based(pDummy)
     D size_t          S             10U 0 based(pDummy)
     D ssize_t         S             10I 0 based(pDummy)
     D time_t          S             10I 0 based(pDummy)
      *
      *  0/-1 = chmod()--Change File Authorizations         include <sys/stat.h>
     D chmod...
     D                 PR            10I 0        extproc('chmod')              = int
     D  i_pPath                        *   value  options(*string)              = *path
     D  i_mode                       10U 0 value                                = mode_t =uint
      *
      *  mkdir()--Make Directory                            include <sys/stat.h>
     D mkdir...
     D                 PR            10I 0        extproc('mkdir')              = rc
     D  i_pPath                        *   value options(*string)               = *path
     D  i_mode                       10U 0 value                                = mode_t =uint
      *
      *  rmdir()--Remove Directory                          include <sys/stat.h>
     D rmdir...
     D                 PR            10I 0        extproc('rmdir')              = rc
     D  i_pPath                        *   value options(*string)               = *path
      *
      *  opendir()--Open Directory                          include <dirent.h>
     D opendir...
     D                 PR              *          extproc('opendir')            = *DIR
     D  i_pDirName                     *   value options(*string)               = *dirname
      *
      *  readdir()--Read Directory Entry
     D readdir...
     D                 PR              *          extproc('readdir')            = *dirent
     D  i_dirp                         *   value                                = *DIR
      *
     D dirent_t        DS                  qualified  based(pDummy)
     D   d_reserv1                   16A
     D   d_fileno_gen_id...
     D                               10U 0
     D   d_fileno                    10U 0
     D   d_reclen                    10U 0
     D   d_reserv3                   10I 0
     D   d_reserv4                    8A
      /if not defined(*V5R2M0)
     D   d_nlsinfo                         like(qlg_nls_t)
      /else
     D   d_nlsinfo                         likeds(qlg_nls_t)
      /endif
     D   d_namelen                   10U 0
     D   d_name                     640A
      *
     D qlg_nls_t       DS                  qualified  based(pDummy)    align
     D  ccsid                        10I 0
     D  country_id                    2A
     D  language_id                   3A
     D  nls_reserved                  3A
      *
      *  rewinddir()--Reset Directory Stream to Beginning
     D rewinddir...
     D                 PR                  extproc('rewinddir')
     D  i_dirp                         *   value                                = *DIR
      *
      *  closedir()--Close Directory
     D closedir...
     D                 PR            10I 0        extproc('closedir')           = rc
     D  i_dirp                         *   value                                = *DIR
      *
      *  fd/-1 = open()--Open File                          include <fcntl.h>
     D open...
     D                 PR            10I 0        extproc('open')               = int
     D  i_pPath                        *   value  options(*string)              = *path
     D  i_opnFLag                    10I 0 value                                = int
     D  i_mode                       10U 0 value  options(*nopass)              = uint
     D  i_codePage                   10U 0 value  options(*nopass)              = uint
     D  i_crtCodePage                10U 0 value  options(*nopass)              = uint
      *
      *  <sys/stat.h>
     D S_IRUSR         C                   const(         256)                  ! Read For Own
     D S_IWUSR         C                   const(         128)                  ! Write For Ow
     D S_IXUSR         C                   const(          64)                  ! Exc/Srch For
     D S_IRWXU         C                   const(         448)                  ! Rd/Wrt/Exc O
      *
     D S_IRGRP         C                   const(          32)                  ! Read For Gro
     D S_IWGRP         C                   const(          16)                  ! Write For Gr
     D S_IXGRP         C                   const(           8)                  ! Exc/Srch For
     D S_IRWXG         C                   const(          56)                  ! Rd/Wrt/Exc G
      *
     D S_IROTH         C                   const(           4)                  ! Read For Oth
     D S_IWOTH         C                   const(           2)                  ! Write For Ot
     D S_IXOTH         C                   const(           1)                  ! Exc/Srch For
     D S_IRWXO         C                   const(           7)                  ! Rd/Wrt/Exc O
      *
     D S_ISUID         C                   const(        2048)
     D S_ISGID         C                   const(        1024)
     D S_ISVTX         C                   const(         512)
      *
      *  <h/fcntl.h>
     D O_CREAT         C                   const( 8)                            ! Append Mode
     D O_EXCL          C                   const(16)                            ! Exclusive Us
     D O_TRUNC         C                   const(64)                            ! Truncate Fla
      *
     D O_APPEND        C                   const(256)                           ! Append Mode
      *
     D O_CODEPAGE      C                   const(  8388608)                     ! Codepage Fla
     D O_TEXTDATA      C                   const( 16777216)                     ! Text Data Fl
     D O_FORCE_SCAN    C                   const( 67108864)                     ! Force scan
     D O_INHERITMODE   C                   const(134217728)                     ! Inherit Mode
     D O_CCSID         C                   const(       32)                     ! CCSID
     D O_TEXT_CREAT    C                   const( 33554432)                     !
      *
     D O_SHARE_RDONLY  C                   const( 65536)                        ! Shared Read
     D O_SHARE_WRONLY  C                   const(131072)                        ! Shared Write
     D O_SHARE_RDWR    C                   const(262144)                        ! Shared Rd/Wr
     D O_SHARE_NONE    C                   const(524288)                        ! No Share
      *
     D O_RDONLY        C                   const(1)                             ! Read Only
     D O_WRONLY        C                   const(2)                             ! Write Only
     D O_RDWR          C                   const(4)                             ! Read/Write
      *
      *  value/-1 = read()--Write from Descriptor           include <unistd.h>
     D read...
     D                 PR                  extproc('read')   like(ssize_t   )   = ssize_t
     D  i_fd                         10I 0 value                                = int
     D  i_pBuffer                      *   value                                = *buf
     D  i_buflen                           value like(size_t    )               = size_t
      *
      *  value/-1 = write()--Write to Descriptor            include <unistd.h>
     D write...
     D                 PR                  extproc('write')  like(ssize_t   )   = ssize_t
     D  i_fd                         10I 0 value                                = int
     D  i_pBuffer                      *   value                                = *buf
     D  i_buflen                           value like(size_t    )               = size_t
      *
      *  0/-1 = ftruncate()--Truncate File                  include <unistd.h>
     D ftruncate...
     D                 PR            10I 0 extproc('ftruncate')                 = int
     D  i_fd                         10I 0 value                                = int
     D  i_length                           value like(off_t     )               = off_t
      *
      *  off_t = lseek()--Set File Read/Write Offset        include <unistd.h>
     D lseek...
     D                 PR                  extproc('lseek')  like(off_t     )   = off_t
     D  i_fd                         10I 0 value                                = int
     D  i_offset                           value like(off_t     )               = off_t
     D  i_whence                     10I 0 value                                = int
      *
      *  <h/unistd.h>
     D SEEK_SET        C                   const(0)                             ! seek start
     D SEEK_CUR        C                   const(1)                             ! seek curPos
     D SEEK_END        C                   const(2)                             ! seek end
      *
      *  0/-1 = unlink()--Remove Link to File               include <unistd.h>
     D unlink...
     D                 PR            10I 0 extproc('unlink')                    = int
     D  i_pPath                        *   value options(*string)               = *path
      *
      *  0/-1 = Qp0lRenameKeep()--Rename File or Directory, Keep "new" If It Exists
     D Qp0lRenameKeep...
     D                 PR            10I 0 extproc('Qp0lRenameKeep')            = int
     D  i_pOldPath                     *   value options(*string)               = *path
     D  i_pNewPath                     *   value options(*string)               = *path
      *
      *  0/-1 = Qp0lRenameUnlink()--Rename File or Directory, Unlink "new" If It Exists
     D Qp0lRenameUnlink...
     D                 PR            10I 0 extproc('Qp0lRenameUnlink')          = int
     D  i_pOldPath                     *   value options(*string)               = *path
     D  i_pNewPath                     *   value options(*string)               = *path
      *
      *  0/-1 = close()--Close File or Socket Descriptor    include <unistd.h>
      /IF NOT DEFINED(c_close_function)
      /DEFINE c_close_function
     D close...
     D                 PR            10I 0 extproc('close')                     = int
     D  i_fd                         10I 0 value                                = int
      /ENDIF
      *
      *  erno--Set Pointer to Runtime Error Code
     D errno           PR              *                     extproc('__errno')
      *
      *  strerror -- Set Pointer to Runtime Error Message
     D strerror        PR              *                     extproc('strerror')
     D  errno                        10I 0 value
      *
      *  <sys/errno.h>
     D EDOM_C          C                   const(3001)                          domain error i
     D ERANGE_C        C                   const(3002)                          range error in
     D ETRUNC_C        C                   const(3003)                          truncation on
     D ENOTOPEN_C      C                   const(3004)                          file has not b
     D ENOTREAD_C      C                   const(3005)                          file not opene
     D ERECIO_C        C                   const(3008)                          file opened fo
     D ENOTWRITE_C     C                   const(3009)                          file not opene
     D ESTDIN_C        C                   const(3010)                          stdin cannot b
     D ESTDOUT_C       C                   const(3011)                          stdout cannot
     D ESTDERR_C       C                   const(3012)                          stderr cannot
     D EBADSEEK_C      C                   const(3013)                          bad offset to
     D EBADNAME_C      C                   const(3014)                          invalid file n
     D EBADMODE_C      C                   const(3015)                          invalid file m
     D EBADPOS_C       C                   const(3017)                          invalid positi
     D ENOPOS_C        C                   const(3018)                          no record at s
     D ENUMMBRS_C      C                   const(3019)                          no ftell if mo
     D ENUMRECS_C      C                   const(3020)                          no ftell if to
     D EBADFUNC_C      C                   const(3022)                          invalid functi
     D ENOREC_C        C                   const(3026)                          record not fou
     D EBADDATA_C      C                   const(3028)                          message data i
     D EBADOPT_C       C                   const(3040)                          bad option on
     D ENOTUPD_C       C                   const(3041)                          file not opene
     D ENOTDLT_C       C                   const(3042)                          file not opene
     D EPAD_C          C                   const(3043)                          padding occurr
     D EBADKEYLN_C     C                   const(3044)                          bad key length
     D EPUTANDGET_C    C                   const(3080)                          illegal write
     D EGETANDPUT_C    C                   const(3081)                          illegal read a
     D EIOERROR_C      C                   const(3101)                          I/O exception
     D EIORECERR_C     C                   const(3102)                          I/O exception
      *
      *  The following values are defined by POSIX ISO/IEC 9945-1:1990.
     D EINVAL_C        C                   const(3021)                          invalid argume
     D EIO_C           C                   const(3006)                          input/output e
     D ENODEV_C        C                   const(3007)                          no such device
     D EBUSY_C         C                   const(3029)                          resource busy
     D ENOENT_C        C                   const(3025)                          no such file o
     D EPERM_C         C                   const(3027)                          operation not
      *
      *  AS/400 specific error numbers
     D EACCES_C        C                   const(3401)                          Permission den
     D ENOTDIR_C       C                   const(3403)                          Not a director
     D ENOSPC_C        C                   const(3404)                          No space avail
     D EXDEV_C         C                   const(3405)                          Improper link.
     D EWOULDBLOCK_C   C                   const(3406)                          Operation woul
     D EAGAIN_C        C                   const(3406)                          Operation woul
     D EINTR_C         C                   const(3407)                          Interrupted fu
     D EFAULT_C        C                   const(3408)                          The address us
     D ETIME_C         C                   const(3409)                          Operation time
     D ENXIO_C         C                   const(3415)                          No such device
     D ECLOSED_C       C                   const(3417)                          Socket closed
     D EADDRINUSE_C    C                   const(3420)                          Address alread
     D EADDRNOTAVAIL_C...
     D                 C                   const(3421)                          Address not av
     D EAFNOSUPPORT_C  C                   const(3422)                          The type of so
     D EALREADY_C      C                   const(3423)                          Operation alre
     D ECONNABORTED_C  C                   const(3424)                          Connection end
     D ECONNREFUSED_C  C                   const(3425)                          A remote host
     D ECONNRESET_C    C                   const(3426)                          A connection w
     D EDESTADDRREQ_C  C                   const(3427)                          Operation requ
     D EHOSTDOWN_C     C                   const(3428)                          A remote host
     D EHOSTUNREACH_C  C                   const(3429)                          A route to the
     D EINPROGRESS_C   C                   const(3430)                          Operation in p
     D EISCONN_C       C                   const(3431)                          A connection h
     D EMSGSIZE_C      C                   const(3432)                          Message size o
     D ENETDOWN_C      C                   const(3433)                          The network is
     D ENETRESET_C     C                   const(3434)                          A socket is co
     D ENETUNREACH_C   C                   const(3435)                          Cannot reach t
     D ENOBUFS_C       C                   const(3436)                          There is not e
     D ENOPROTOOPT_C   C                   const(3437)                          The protocol d
     D ENOTCONN_C      C                   const(3438)                          Requested oper
     D ENOTSOCK_C      C                   const(3439)                          The specified
     D ENOTSUP_C       C                   const(3440)                          Operation not
     D EOPNOTSUPP_C    C                   const(3440)                          Operation not
     D EPFNOSUPPORT_C  C                   const(3441)                          The socket pro
     D EPROTONOSUPPORT_C...
     D                 C                   const(3442)                          No protocol of
     D EPROTOTYPE_C    C                   const(3443)                          The socket typ
     D ERCVDERR_C      C                   const(3444)                          An error indic
     D ESHUTDOWN_C     C                   const(3445)                          Cannot send da
     D ESOCKTNOSUPPORT_C...
     D                 C                   const(3446)                          The specified
     D ETIMEDOUT_C     C                   const(3447)                          A remote host
     D EUNATCH_C       C                   const(3448)                          The protocol r
     D EBADF_C         C                   const(3450)                          Descriptor not
     D EMFILE_C        C                   const(3452)                          Too many open
     D ENFILE_C        C                   const(3453)                          Too many open
     D EPIPE_C         C                   const(3455)                          Broken pipe.
     D EEXIST_C        C                   const(3457)                          File exists.
     D EDEADLK_C       C                   const(3459)                          Resource deadl
     D ENOMEM_C        C                   const(3460)                          Storage alloca
     D EOWNERTERM_C    C                   const(3462)                          The mutex no l
     D EDESTROYED_C    C                   const(3463)                          he synchroniza
     D ETERM_C         C                   const(3464)                          Operation term
     D EMLINK_C        C                   const(3468)                          Maximum link c
     D ESPIPE_C        C                   const(3469)                          Seek request n
     D ENOSYS_C        C                   const(3470)                          Function not i
     D EISDIR_C        C                   const(3471)                          Specified targ
     D EROFS_C         C                   const(3472)                          Read-only file
     D EUNKNOWN_C      C                   const(3474)                          Unknown system
     D EITERBAD_C      C                   const(3475)                          Iterator is in
     D EDAMAGE_C       C                   const(3484)                          A damaged obje
     D ELOOP_C         C                   const(3485)                          A loop exists
     D ENAMETOOLONG_C  C                   const(3486)                          A path name is
     D ENOLCK_C        C                   const(3487)                          No locks avail
     D ENOTEMPTY_C     C                   const(3488)                          Directory not
     D ENOSYSRSC_C     C                   const(3489)                          System resourc
     D ECONVERT_C      C                   const(3490)                          Conversion err
     D E2BIG_C         C                   const(3491)                          Argument list
     D EILSEQ_C        C                   const(3492)                          Conversion sto
     D ESOFTDAMAGE_C   C                   const(3497)                          Object has sof
     D ENOTENROLL_C    C                   const(3498)                          User not enrol
     D EOFFLINE_C      C                   const(3499)                          Object is susp
     D EROOBJ_C        C                   const(3500)                          Object is a re
     D ELOCKED_C       C                   const(3506)                          Area being rea
     D EFBIG_C         C                   const(3507)                          Object too lar
     D EIDRM_C         C                   const(3509)                          The semaphore,
     D ENOMSG_C        C                   const(3510)                          The queue does
     D EFILECVT_C      C                   const(3511)                          File ID conver
     D EBADFID_C       C                   const(3512)                          A File ID coul
     D ESTALE_C        C                   const(3513)                          A File ID coul
     D ESRCH_C         C                   const(3515)                          No such proces
     D ENOTSIGINIT_C   C                   const(3516)                          Process not en
     D ECHILD_C        C                   const(3517)                          No child proce
     D EBADH_C         C                   const(3520)                          Handle is not
     D ETOOMANYREFS_C  C                   const(3523)                          The operation
     D ENOTSAFE_C      C                   const(3524)                          Function not a
     D EOVERFLOW_C     C                   const(3525)                          Object is too
     D EJRNDAMAGE_C    C                   CONST(3526)                          Journal damage
     D EJRNINACTIVE_C  C                   CONST(3527)                          Journal inacti
     D EJRNRCVSPC_C    C                   CONST(3528)                          Journal space
     D EJRNRMT_C       C                   CONST(3529)                          Journal is rem
     D ENEWJRNRCV_C    C                   CONST(3530)                          New journal re
     D ENEWJRN_C       C                   CONST(3531)                          New journal is
     D EJOURNALED_C    C                   CONST(3532)                          Object already
     D EJRNENTTOOLONG_C...
     D                 C                   CONST(3533)                          Entry too larg
     D EDATALINK_C     C                   CONST(3534)                          Object is a Da
     D ENOTAVAIL_C     C                   CONST(3535)                          Independent AS
     D ENOTTY_C        C                   CONST(3536)                          Inappropriate
     D EFBIG2_C        C                   CONST(3540)                          Write or trunc
     D ETXTBSY_C       C                   CONST(3543)                          Text file busy
     D EASPGRPNOTSET_C...
     D                 C                   CONST(3544)                          ASP group not
     D ERESTART_C      C                   CONST(3545)                          System call ca
     D ESCANFAILURE_C  C                   CONST(3546)                          Object marked
      *
      *  Unix return codes
     D RC_OK           C                   const(0)
     D RC_ERROR        C                   const(-1)
      *
      *  Convert External Form to Numeric Value (CVTEFN)
     D cvtefnd...
     D                 PR             8F   extproc('cvtefnd')
     D  i_source                       *   value
     D  i_len                        10U 0 value
     D  i_mask                         *   value
      *
      *  Test Bit in String (TSTBTS)
     D tstbts...
     D                 PR            10I 0 extproc('tstbts')
     D  bit_string                     *   value
     D  bit_offset                   10I 0 value
      *
      *  getenv()--Get Value of Environment Variable
     D getenv...
     D                 PR              *   extproc('getenv')
     D  name                           *   value  options(*string)
      *
      *  putenv()--Change or Add Environment Variable
     D putenv...
     D                 PR            10I 0 extproc('putenv')
     D  string                         *   value  options(*string)
      *
      *  Qp0zDltEnv()--Delete an Environment Variable
     D Qp0zDltEnv...
     D                 PR            10I 0 extproc('Qp0zDltEnv')
     D  name                           *   value  options(*string)
      *
      *  Qp0zInitEnv()--Initialize Environment for Variables
     D Qp0zInitEnv...
     D                 PR            10I 0 extproc('Qp0zInitEnv')
      *
     D ENVIRON         S               *   import('environ')
      *
      *  Generate Universal Unique Identifier (GENUUID)
     D genUUID...
     D                 PR                  extproc('_GENUUID')
     D  uuid_template                  *   value
      *
     D uuid_template_t...
     D                 DS                  qualified  based(pDummy)
     D  bytPrv                       10U 0
     D  bytAvl                       10U 0
     D  reserved                      8A
     D  uuid                         16A
      *
      *  Convert Hex to Character (CVTHC)
     D cvthc...
     D                 PR                  extproc('cvthc')
     D  pResult                        *   value
     D  pSource                        *   value
     D  sourceSize                   10I 0 value
      *
      *  Convert Eight Bit Character to Hex Nibbles (CVTCH)
     D cvtch...
     D                 PR                  extproc('cvtch')
     D  pResult                        *   value
     D  pSource                        *   value
     D  sourceLen                    10I 0 value
      *
      *  Cipher (CIPHER)
     D cipher...
     D                 PR                  extproc('_CIPHER')
     D                                 *   const
     D                                 *   value
     D                                 *   const
      *
     D cipherCtrls_t   DS                  qualified  based(pDummy)  align
     D  function               1      2A
     D  hashAlg                3      3A
     D  sequence               4      4A
     D  dataLength             5      8U 0
     D  output                 9      9A
     D  reserved_1            10     16A
     D  hashContext           17     32*
     D  HMACKey               33     48*
     D  HMACKeyLength         49     52U 0
     D  reserved_2            53     96A
      *
     D cCIPHER_MD5...
     D                 C                   const(x'00')
     D cCIPHER_SHA1...
     D                 C                   const(x'01')
      *
     D cCIPHER_ONLY...
     D                 C                   const(x'00')
     D cCIPHER_FIRST...
     D                 C                   const(x'01')
     D cCIPHER_MIDDLE...
     D                 C                   const(x'02')
     D cCIPHER_FINAL...
     D                 C                   const(x'03')
      *
     D cCIPHER_HASH...
     D                 C                   const(x'00')
     D cCIPHER_HMAC...
     D                 C                   const(x'01')
      *
 DEF  /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing CLIB2  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "CLIB2     "
mbrtype =  "RPGLE     "
mbrtext =  "Prototypes of C-Library   Record IO      (include)"
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
 DEF  /IF NOT DEFINED(CLIB2)
 DEF  /DEFINE CLIB2
      *
      *  File open feedback data structure
     D RFILE_t         DS                  based(pDummy)         qualified
     D  res01                        16A
     D  pInBuf                         *
     D  pOutBuf                        *
     D  res02                        48A
      /if not defined(*V5R3M0)
     D  riofb                              like(RIOFB_t)
      /else
     D  riofb                              likeds(RIOFB_t)
      /endif
     D  res03                        32A
     D  bufLen                       10U 0
     D  res04                        28A
     D  pInNull                        *
     D  pOutNul                        *
     D  pKeyNul                        *
     D  res05                        48A
     D  minLen                       10I 0
     D  nMapLen                       5I 0
     D  nKeyLen                       5I 0
     D  res06                         8A
      *
      *  Record IO feedback data structure
     D RIOFB_t         DS                  based(pDummy)  align  qualified
     D  pKey                           *
     D  pSysP                          *
     D  rrn                          10U 0
     D  numByt                       10I 0
     D  blkCnt                        5I 0
     D  blkFld                        1A
     D  bitfld                        1A
     D   dupKy                        1A   overlay(bitfld: 1)
     D   icfLc                        1A   overlay(bitfld: 1)
     D   res01                        1A   overlay(bitfld: 1)
     D  res02                        20A
      *
      *  Constants used by IO feedback procedures
     D RRN_EQ          C                   const(x'08000300')
      *
     D KEY_EQ          C                   const(x'0B000100')
     D KEY_GT          C                   const(x'0D000100')
     D KEY_LT          C                   const(x'09000100')
     D KEY_LE          C                   const(x'0A000100')
     D KEY_GE          C                   const(x'0C000100')
     D KEY_NEXTUNQ     C                   const(x'05000100')
     D KEY_PREVUNQ     C                   const(x'06000100')
     D KEY_NEXTEQ      C                   const(x'0E000100')
     D KEY_PREVEQ      C                   const(x'0F000100')
      *
     D FIRST           C                   const(x'01000300')
     D LAST            C                   const(x'02000300')
     D NEXT            C                   const(x'03000300')
     D PREVIOUS        C                   const(x'04000300')
      *
     D START_FRC       C                   const(x'03000004')
     D START           C                   const(x'01000004')
     D END_FRC         C                   const(x'04000004')
     D END             C                   const(x'02000004')
      *
     D NO_LOCK         C                   const(x'00000001')
     D DFT             C                   const(x'0B000100')
     D NO_POSITION     C                   const(x'00100000')
     D PRIOR           C                   const(x'00001000')
     D DATA_ONLY       C                   const(x'00000002')
     D NULL_KEY_MAP    C                   const(x'00000008')
      *
     D EOF             C                   const(-1)
      *
      *  _Ropen -- Open a Record File for I/O Operatins                                      R
      *    #include <recio.h>
      *    _RFILE *_Ropen(const char * filename, const char * mode, ...);
     D Ropen           PR              *          extproc('_Ropen')             _RFILE
     D  i_fileName                     *   value  options(*string)
     D  i_mode                         *   value  options(*string)
      *
      *  _Rclose -- Close a File
      *    #include <recio.h>
      *    int _Rclose(_RFILE *fp);
     D Rclose          PR            10I 0        extproc('_Rclose')
     D  i_fp                           *   value
      *
      *  _Rlocate -- Position to a Record
      *    #include <recio.h>
      *    _RIOFB_T *_Rlocate(_RFILE *fp, void *key, int klen_rrn, int opts);
     D Rlocate         PR              *          extproc('_Rlocate')           _RIOFB_T
     D  i_fp                           *   value
     D  i_key                          *   value
     D  i_klen_rrn                   10I 0 value
     D  i_opts                       10I 0 value
      *
      *  _Rreadd -- Read a Record by Relative Record Number
      *    #include <recio.h>
      *    _RIOFB_T *_Rreadd (_RFILE *fp, void *buf, size_t size,
      *                                int opts, long rrn);
     D Rreadd          PR              *          extproc('_Rreadd')            _RIOFB_T
     D  i_fp                           *   value
     D  i_pBuffer                      *   value
     D  i_size                       10U 0 value
     D  i_opts                       10I 0 value
     D  i_rrn                        10I 0 value
      *
      *  _Rreadn -- Read the next Record
      *    #include <recio.h>
      *    _RIOFB_T *_Rreadn (_RFILE *fp, void *buf, size_t size, int opts);
     D Rreadn          PR              *          extproc('_Rreadn')            _RIOFB_T
     D  i_fp                           *   value
     D  i_pBuffer                      *   value
     D  i_size                       10U 0 value
     D  i_opts                       10I 0 value
      *
      *  _Rreadk -- Read a Record by Key
      *    #include <recio.h>
      *    _RIOFB_T *_Rreadk(_RFILE *fp, void *buf, size_t size,
      *                       int opts, void *key, unsigned int keylen);
     D Rreadk          PR              *          extproc('_Rreadk')            _RIOFB_T
     D  i_fp                           *   value
     D  i_pBuffer                      *   value
     D  i_size                       10U 0 value
     D  i_opts                       10I 0 value
     D  i_key                          *   value
     D  i_klen                       10I 0 value
      *
      *  _Rreads -- Read the Same Record
      *    #include <recio.h>
      *    _RIOFB_T *_Rreads(_RFILE *fp, void *buf, size_t size, int opts);
     D Rreads          PR              *          extproc('_Rreads')            _RIOFB_T
     D  i_fp                           *   value
     D  i_pBuffer                      *   value
     D  i_size                       10U 0 value
     D  i_opts                       10I 0 value
      *
      *  _Rrlslck -- Release a Record Lock
      *    #include <recio.h>
      *    int _Rrlslck(_RFILE *fp);
     D RrlsLck         PR              *          extproc('_Rrlslck')           int 1=success
     D  i_fp                           *   value                                    0=error
      *  _Rupdate -- Update a Record
      *    #include <recio.h>
      *    _RIOFB_T *_Rupdate(_RFILE *fp, void *buf, size_t size);
     D Rupdate         PR              *          extproc('_Rupdate')           _RIOFB_T
     D  i_fp                           *   value
      /if defined(RUPDATE_OPTIONS_STRING)
     D  i_pBuffer                      *   value  options(*string)
      /else
     D  i_pBuffer                      *   value
      /endif
     D  i_size                       10U 0 value
      *
      *
      *  _Rwrite -- Write the next record
      *    #include <recio.h>
      *    _RIOFB_T * _Rwrite(_RFILE *fp, void *buf, size_t size);
     D Rwrite          PR              *          extproc('_Rwrite')            _RIOFB_T
     D  i_fp                           *   value
      /if defined(RWRITE_OPTIONS_STRING)
     D  i_pBuffer                      *   value  options(*string)
      /else
     D  i_pBuffer                      *   value
      /endif
     D  i_size                       10U 0 value
      *
      *  _Rwrited -- Write a Record Directly
      *    #include <recio.h>
      *    _RIOFB_T *_Rwrited(_RFILE *fp, void *buf, size_t size, unsigned long rrn);
     D Rwrited         PR              *          extproc('_Rwrited')           _RIOFB_T
     D  i_fp                           *   value
      /if defined(RWRITE_OPTIONS_STRING)
     D  i_pBuffer                      *   value  options(*string)
      /else
     D  i_pBuffer                      *   value
      /endif
     D  i_size                       10U 0 value
     D  i_rrn                        10U 0 value
      *
      *  _Rformat -- Set the Record Format Name
      *    #include <recio.h>
      *    void  _Rformat(_RFILE *fp, char *fmt);
     D Rformat         PR                         extproc('_Rformat')           void
     D  i_handle                       *   value
     D  i_format                       *   value  options(*string)
      *
 DEF  /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing COPYRIGHT  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "COPYRIGHT "
mbrtype =  "RPGLE     "
mbrtext =  "Copyright information                             "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /if not defined(COPYRIGHT_DSPEC)
     H COPYRIGHT('+
     HLOG4RPG V1.12 - 19.07.2015 - mailto:thomas.raddatz@tools400.de')
      /eof
      /endif
     D cLOG4RPG_VERSION...
     D                 C                   '1.12'
     D cLOG4RPG_DATE...
     D                 C                   '19.07.2015'
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing FDINFDS  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "FDINFDS   "
mbrtype =  "RPGLE     "
mbrtext =  "File information data structures                  "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF DEFINED(fileInfDS_DB)
      /IF DEFINED(infDS_DB_t)
      /EOF
      /ENDIF
      /DEFINE infDS_DB_t
      /ENDIF
      *
      /IF DEFINED(fileInfDS_prtF)
      /IF DEFINED(infDS_prtF_t)
      /EOF
      /ENDIF
      /DEFINE infDS_prtF_t
      /ENDIF
      *
      /IF DEFINED(fileInfDS_dspF)
      /IF DEFINED(infDS_dspF_t)
      /EOF
      /ENDIF
      /DEFINE infDS_dspF_t
      /ENDIF
      *
      *===============================================================*
      *  File information data structure                              *
      *===============================================================*
      /IF DEFINED(fileInfDS_DB)
     D infDS_DB_t      DS                  qualified               based(pDummy)
      /ELSEIF DEFINED(fileInfDS_PRTF)
     D infDS_prtF_t    DS                  qualified               based(pDummy)
      /ELSEIF DEFINED(fileInfDS_DSPF)
     D infDS_dspF_t    DS                  qualified               based(pDummy)
      /ENDIF
      * Reserved 01
     D  reserved_01            1      8A
      * Open indication 1=open
     D  isOpen                 9      9A
      * End of file 1=EOF
     D  isEOF                 10     10A
      * Status
     D  status                11     15S 0
      * Operation code, first 5 pos.
     D  opCode                16     20A
      * IO-Type:
      *   F=The last operation was specified for a file name
      *   R=The last operation was specified for a record
      *   I=The last operation was an implicit file operation.
     D  IO_type               21     21A
      * Routine of operation code
     D  routine               22     29A
      * RPG source listing line nbr
     D  srcSeq                30     37A
      * Record format
     D  rcdFormat             38     45A
      * System message number
     D  sysMsgNbr             46     52A
      * Reserved 02
     D  reserved_02           53     66A
      *
      * Valid after post:
      *    Screen size (product of the number of rows
      *    and the number of columns on the device screen).
     D  screenSize            67     70S 0
      *    The display's keyboard type.
      *       00 = alphanumeric or katakana
      *       10 = ideographic
     D  kbdType               71     72S 0
      *    The display type.
      *       00 = alphanumeric or katakana
      *       10 = ideographic
      *       20 = DBCS
     D  displayType           73     74S 0
      *    Always set to 00.
     D  mode                  75     76S 0
      * Reserved_03
     D  reserved_03           77     80A
      *
      *  -----------------------------------------
      *    Open Feedback            81 - 240
      *  -----------------------------------------
     D  openFB                             likeds(openFeedback_t)
      *
      *  -----------------------------------------
      *    Input/Output Feedback      241 - 366
      *  -----------------------------------------
     D  IO_FB                              likeds(IO_feedback_t )
      *
      *  -----------------------------------------
      *    Device Specific Feedback   367 -
      *  -----------------------------------------
      /IF DEFINED(fileInfDS_DB)
     D  deviceFB_DB...
     D                                     likeds(deviceFeedback_DB_t)
      /ELSEIF DEFINED(fileInfDS_PRTF)
     D  deviceFB_PrtF...
     D                                     likeds(deviceFeedback_PrtF_t)
      /ELSEIF DEFINED(fileInfDS_DSPF)
     D  deviceFB_DspF...
     D                                     likeds(deviceFeedback_DspF_t)
      /ENDIF
      *
      /IF NOT DEFINED(openFeedback_t)
      /DEFINE openFeedback_t
      *  -----------------------------------------
      *    Open Feedback
      *  -----------------------------------------
     D openFeedback_t...
     D                 DS           160    qualified               based(pDummy)
      * DS=Display DB=File SP=Spooled File
     D  ODP_type               1      2A
      * Qualified file name
     D  qFile                              likeds(infds_qFile_t)
      * File name
     D  file                   3     12A
      * Library
     D  lib                   13     22A
      * Spool file name
     D  spoolFile             23     32A
      * Spool file library
     D  spoolLib              33     42A
      * Spool file number
     D  spoolNbr              43     44I 0
      * Record length
     D  maxRcdLength          45     46I 0
      * Key length
     D  maxKeyLength          47     48I 0
      * Member
     D  mbr                   49     58A
      * Reserved
     D  reserved_01           59     62I 0
      * Reserved
     D  reserved_02           63     66I 0
      * File type
      *     1  =  Display
      *     2  =  Printer
      *     4  =  Diskette
      *     5  =  Tape
      *     9  =  Save
      *    10  =  DDM
      *    11  =  ICF
      *    20  =  Inline data
      *    21  =  Database
     D  fileType              67     68I 0
      * Reserved
     D  reserved_03           69     71A
      * Number of lines on a display screen or       (Display, printer)
      * number of lines on a printed page.
     D  rows                  72     73I 0
      * Length of the null field byte map.           (Database)
     D  lenNullFldMap         72     73I 0
      * Number of positions on a display screen or   (Display, printer)
      * number of characters on a printed line.
     D  columns               74     75I 0
      * Length of the null key field byte map.       (Database)
     D  lenKeyFldMap          74     75I 0
      * Number of records in the member at open
      * at open time.
     D numRcdsAtOpen          76     79I 0
      * Access type
     D accessType             80     81A
      * Duplicate key?
     D isDupKey               82     82A
      * Source file?
     D isSrcFile              83     83A
      * Reserved
     D reserved_04            84     93A
      * Reserved
     D reserved_05            94    103A
      * Offset to volume label fields of open
      * feedback area.
     D ofsVolLblFld          104    105I 0
      * Max rcds in blk
     D maxBlkRcds            106    107I 0
      * Overflow line
     D overflow              108    109I 0
      * Blk increment
     D blkInc                110    111I 0
      * Reserved
     D reserved_06           112    115A
      * Miscellaneous flags
     D flags1                116    116A
      * Requester name
     D requester             117    126A
      * Open count
     D openCount             127    128I 0
      * Reserved
     D reserved_07           129    130I 0
      * Num based mbrs
     D numBasedMbrs          131    132I 0
      * Miscellaneous flags
     D flags2                133    133A
      * Open identifier
     D openID                134    135A
      * Max rcd fmt length
     D maxRcdFmtLen          136    137I 0
      * Database CCSID
     D CCSID                 138    139I 0
      * Miscellaneous flags
     D flags3                140    140A
      * Reserved
     D reserved_08           141    146A
      * Num devs defined
     D numDevices            147    148I 0
      * Device name definition list
     D devices               149    160A
      *
     D infds_qFile_t...
     D                 DS                  qualified               based(pDummy)
     D  name                   1     10A
     D  lib                   11     20A
      *
      /ENDIF
      /IF NOT DEFINED(IO_feedback_t)
      /DEFINE IO_feedback_t
      *  -----------------------------------------
      *    Input/Output Feedback
      *  -----------------------------------------
     D IO_feedback_t...
     D                 DS           126    qualified               based(pDummy)
      * Offset to file dependant feedback
     D ofsFileDepFB            1      2I 0
      * Write count
     D writeCount              3      6I 0
      * Read count
     D readCount               7     10I 0
      * Write/read count
     D writeReadCount         11     14I 0
      * Other I/O count
     D otherCount             15     18I 0
      * Reserved
     D reserved_01            19     19A
      * Current operation
      *   hex 01 =  Read or read block or read from invited devices
      *   hex 02 =  Read direct
      *   hex 03 =  Read by key
      *   hex 05 =  Write or write block
      *   hex 06 =  Write-read
      *   hex 07 =  Update
      *   hex 08 =  Delete
      *   hex 09 =  Force-end-of-data
      *   hex 0A =  Force-end-of-volume
      *   hex 0D =  Release record lock
      *   hex 0E =  Change end-of-data
      *   hex 0F =  Put deleted record
      *   hex 11 =  Release device
      *   hex 12 =  Acquire device
     D operation              20     20A
      * Rcd format name
     D IO_rcdFmt              21     30A
      * Device class
     D deviceClass            31     32A
      * Pgm device name
     D IO_pgmDevice           33     42A
      * Rcd len of I/O
     D IO_rcdLength           43     46I 0
      * Reserved
     D reserved_02            47    126A
      *
      /ENDIF
      /IF NOT DEFINED(deviceFeedback_DB_t)
      /DEFINE deviceFeedback_DB_t
      *  -----------------------------------------
      *    Device Specific Feedback of
      *    Database Files.
      *  -----------------------------------------
     D deviceFeedback_DB_t...
     D                 DS                  qualified               based(pDummy)
      * Size of feedback information
     D  size                   1      4I 0
      * Join logical file bits
     D  JFILE_bits             5      8I 0
      * Offset from the beginning of the I/O feedback area
      * for database files to the null key field byte map.
     D  ofsNullKeyFldMap...
     D                         9     10I 0
      * Number of locked records
     D  numLckRcds            11     12I 0
      * Maximum number of fields
     D  maxNumFlds            13     14I 0
      * Offset to the field-mapping error-bit map.
     D  ofsFldMapErrBitMap...
     D                        15     18I 0
      * Current file position indication.
     D                        19     19A
      * Current record deleted indication
     D                        20     20A
      * Number of key fields
     D  nbrOfKeyFlds          21     22I 0
      * Reserved
     D  resreved_1            23     26A
      * Key length
     D  keyLength             27     28I 0
      * Data member number
     D  dtaMbrNum             29     30I 0
      * Relative record number in data member
     D  rcdNbr                31     34U 0
      * Key value                      *
      * Null key field byte map        *
      *
      /ENDIF
      /IF NOT DEFINED(deviceFeedback_PrtF_t)
      /DEFINE deviceFeedback_PrtF_t
      *  -----------------------------------------
      *    Device Specific Feedback of
      *    Printer Files.
      *  -----------------------------------------
     D deviceFeedback_PrtF_t...
     D                 DS                  qualified               based(pDummy)
      * Current line number in a page
     D  curLine                1      2I 0
      * Current page count
     D  curPage                3      6I 0
      * Spooled file bits
     D  splF_bits              7      7A
      * Reserved
     D  reserved_1             8     34A
      * Major return code
     D  majorRtnCode          35     36A
      * Minor return code
     D  minorRtnCode          37     38A
      *
      /ENDIF
      /IF NOT DEFINED(deviceFeedback_DspF_t)
      /DEFINE deviceFeedback_DspF_t
      *  -----------------------------------------
      *    Device Specific Feedback of
      *    Display Files.
      *  -----------------------------------------
     D deviceFeedback_DspF_t...
     D                 DS                  qualified               based(pDummy)
      * Flag bits
     D  flag_bits              1      2A
      * AID byte
     D  aid_byte               3      3A
      * Cursor location (line and position)
     D  cursorPos              4      5U 0
      * Actual data length
     D  dataLength             6      9I 0
      * Relative record number of a subfile record
     D  rrn                   10     11I 0
      * Lowest subfile
     D  rrn_lowest            12     13I 0
      * Total number of records in a subfile
     D  numRcds               14     15I 0
      * Cursor location (line and position) within active window
     D  cursorPosWdw          16     17U 0
      * Reserved
     D  reserved_1            18     34A
      * Major return code
     D  majorRtnCode          35     36A
      * Minor return code
     D  minorRtnCode          37     38A
      * Systems Network Architecture (SNA) sense return code              (ICF only)
     D  snaCode               39     46A
      * Safe indicator                                                    (ICF only)
     D  saveInd               47     47A
      * Reserved
     D  reserved_2            48     48A
      * Request Write (RQSWRT) command from remote system/application     (ICF only)
     D  rqsWrt                49     49A
      * Record format name received from the remote system                (ICF only)
     D  rcdFormat             50     59A
      * Reserved
     D  reserved_3            60     63A
      * Mode name                                                         (ICF only)
     D  mode                  64     71A
      * Reserved
     D  reserved_4            72     80A
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing FDJOBI0600  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "FDJOBI0600"
mbrtype =  "RPGLE     "
mbrtext =  "cpybk   : QUSRJOBI API - JOBI0600                 "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(jobi0600_t)
      /DEFINE jobi0600_t
      *===============================================================*
      *  QUSRJOBI API - JOBI0600                                      *
      *===============================================================*
      *
     D jobi0600_t      DS                  qualified           based(pDummy)
     D  bytRet                       10I 0
     D  bytAvl                       10I 0
     D  job                          10A
     D  user                         10A
     D  nbr                           6A
     D  intJobID                     16A
     D  status                       10A
     D  type                          1A
     D  subType                       1A
     D  jobSws                        8A
     D  endStatus                     1A
     D  sbsD                         10A
     D  sbsDLib                      10A
     D  curUser                      10A
     D  dbcs                          1A
     D  exitKey                       1A
     D  cancelKey                     1A
     D  prdRetCode                   10I 0
     D  userRetCode                  10I 0
     D  pgmretCode                   10I 0
     D  spcEnv                       10A
     D  device                       10A
     D  grpPrf                       10A
     D  grpPrfAry                    10A   dim(15)
     D  jobUsrID                     10A
     D  jobUsrIDStg                   1A
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing FDMSG  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "FDMSG     "
mbrtype =  "RPGLE     "
mbrtext =  "cpybk   : Message                                 "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(msg_t     )
      /DEFINE msg_t
      * ============================================================= *
      *   Message structure                                           *
      * ============================================================= *
      *
     D msg_t           DS                  qualified           based(pDummy)
      /if defined(*V5R3M0)
     D  ID                                 likeds(msgID_t)
      /else
     D  ID                            7A
      /endif
     D  data                        512A
     D  type                         10A
     D  file                         10A
     D  lib                          10A
      *
      /if defined(*V5R3M0)
     D msgID_t         DS                  qualified           based(pDummy)
     D  prefix                        3A
     D  nbr                           4S 0
      /endif
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing FDQJOB  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "FDQJOB    "
mbrtype =  "RPGLE     "
mbrtext =  "cpybk   : Qualified job name                      "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(qJob_t    )
      /DEFINE qJob_t
      * ============================================================= *
      *   Qualified job name                                          *
      *===============================================================*
      *
     D qJob_t          DS                  qualified           based(pDummy)
     D  name                         10A
     D  user                         10A
     D  nbr                           6A
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing H_SPEC  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "H_SPEC    "
mbrtype =  "RPGLE     "
mbrtext =  "H-Specification                                   "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(H_SPEC)
      /DEFINE H_SPEC
      *
      /IF NOT DEFINED(UNIT_TEST)
     H NOMAIN
      /ENDIF
      *  Standard H-Specs
     H DEBUG
     H OPTION(*SRCSTMT : *NODEBUGIO)
     H DECEDIT('0,') DATEDIT(*DMY.)
     H DATFMT(*ISO ) TIMFMT(*ISO )
     H EXPROPTS(*RESDECPOS)
     H EXTBININT(*YES)
     H CCSID(*CHAR: *JOBRUN)
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4_PROPS  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4_PROPS"
mbrtype =  "RPGLE     "
mbrtext =  "Configures various Appenders, Layouts and Filters "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
# -----------------------------------------------------------------------
#  Enable/disable Log4rpg
#    log4rpg=mode
# -----------------------------------------------------------------------
#      mode     :  on, off
# -----------------------------------------------------------------------
log4rpg=on

# -----------------------------------------------------------------------
#  Set internal logging
#    log4rpg.debug=mode, output
# -----------------------------------------------------------------------
#      mode     :  on, off, verbose, quiet
#      output   :  printer, stdout
# -----------------------------------------------------------------------
log4rpg.debug=on, printer

# -----------------------------------------------------------------------
#  Set log level for root logger
#    log4rpg.rootLogger=level, appender, ...
# -----------------------------------------------------------------------
#      level    : DEBUG, INFO, WARN, ERROR, FATAL
#      appender : a1, a2, a3, ...
# -----------------------------------------------------------------------
log4rpg.rootLogger=DEBUG, file

# -----------------------------------------------------------------------
#  Set log level for named logger
#    log4rpg.logger.name=level, appender, ...
# -----------------------------------------------------------------------
#      level    : DEBUG, INFO, WARN, ERROR, FATAL
#      appender : [a1, a2, a3, ...
# -----------------------------------------------------------------------
log4rpg.logger.de.tools400=DEBUG

# -----------------------------------------------------------------------
#  Define a print appender
#    log4rpg.appender.name=lib/srvpgm(procedure)
# -----------------------------------------------------------------------
#      lib      : Name of the library that contains 'srvpgm'.
#      srvpgm   : Name of the service program that exports 'procedure'.
#      procedure: Prefix of the procedure that implements the appender.
#    Properties
#      outQ     : The output where the splooled file goes to.
#      splfName : The name of the spooled file.
#      usrdta   : The user data of the spooled file.
#      length   : Page length measured in lines.
#      width    : Page width measured in characters.
#      lpi      : Lines per inch.
#      cpi      : Characters per inch.
#      ovrflw   : Overflow line.
#      leftMargin  : Left margin of the page.
#      rightMargin : Right margin of the page.
#      datePattern : Date pattern.  dd   = days
#                                   MM   = months
#                                   yy   = years
#                                   mm   = minutes
#                                   HH   = hours
#      layout      : Layout to use.
#      layout.conversionPattern : Conversion pattern for 'layout'.
# -----------------------------------------------------------------------
log4rpg.appender.print=*LIBL/LOG4RPG(DailyRollingPrintAppender)
log4rpg.appender.print.outQ=RADDATZ
log4rpg.appender.print.splfName=PRINT_APP
log4rpg.appender.print.usrdta=PRINT
log4rpg.appender.print.length=49
log4rpg.appender.print.width=132
log4rpg.appender.print.lpi=6
log4rpg.appender.print.cpi=10
log4rpg.appender.print.ovrflw=42
log4rpg.appender.print.leftMargin=10
log4rpg.appender.print.rightMargin=10
log4rpg.appender.print.datePattern=yyyy-MM-dd-HH.mm
log4rpg.appender.print.layout=PatternLayout
log4rpg.appender.print.layout.conversionPattern=%z [%-5p] %P(%M).%F (%S) %m%n

# -----------------------------------------------------------------------
#  Define a file appender
#    log4rpg.appender.name=lib/srvpgm(procedure)
# -----------------------------------------------------------------------
#      lib      : Name of the library that contains 'srvpgm'.
#      srvpgm   : Name of the service program that exports 'procedure'.
#      procedure: Prefix of the procedure that implements the appender.
#    Properties
#      path     : The directory and name of the log file.
#      share    : Specifies whether to share the log file for writing with other jobs
#      datePattern : Date pattern.  dd   = days
#                                   MM   = months
#                                   yy   = years
#                                   mm   = minutes
#                                   HH   = hours
#      layout      : Layout to use.
#      layout.conversionPattern : Conversion pattern for 'layout'.
#      writeHeader : Specifies whether layout header data is appended or not.
#      writeFooter : Specifies whether layout footer data is appended or not.
# -----------------------------------------------------------------------
log4rpg.appender.file=*LIBL/LOG4RPG(DailyRollingFileAppender)
log4rpg.appender.file.path=log4rpg.log
log4rpg.appender.file.datePattern=yyyy-MM-dd-HH.mm.
log4rpg.appender.file.layout=PatternLayout
log4rpg.appender.file.layout.conversionPattern=%z [%-5p] %L/%P(%M).%F (%S) %m%n

# -----------------------------------------------------------------------
#  Define a HTML file appender
#    log4rpg.appender.name=lib/srvpgm(procedure)
# -----------------------------------------------------------------------
log4rpg.appender.html=*LIBL/LOG4RPG(DailyRollingFileAppender)
log4rpg.appender.html.path=log4rpg.html
log4rpg.appender.html.datePattern=yyyy-MM-dd-HH.mm.
log4rpg.appender.html.layout=*LIBL/LOG4HTMLAY(HTMLLayout)

# -----------------------------------------------------------------------
#  Define a XMLSocketAppender
#    log4rpg.appender.name=lib/srvpgm(procedure)
# -----------------------------------------------------------------------
#      lib      : Name of the library that contains 'srvpgm'.
#      srvpgm   : Name of the service program that exports 'procedure'.
#      procedure: Prefix of the procedure that implements the appender.
#    Properties
#      host     : Name of the host.
#      port     : Port number.
#      ccsid    : CCSID of XML stream.
#      layout   : Layout to use.
#      filter   : Filter used to modify the log event. In this specific case
#                 the 'application' property is added and set to 'myApplication'.
#                 This way Chainsaw is told to display the events in a tab
#                 called 'myApplication'.
# -----------------------------------------------------------------------
log4rpg.appender.chainsaw=*LIBL/LOG4SCKAPP(XMLSocketAppender)
log4rpg.appender.chainsaw.remoteHost=xxx.xxx.xxx.xxx
log4rpg.appender.chainsaw.port=4448
log4rpg.appender.chainsaw.ccsid=819
log4rpg.appender.chainsaw.layout=XMLLayout
log4rpg.appender.chainsaw.filter=AppName

log4rpg.filter.appName=LOG4PROFLT(PropertyFilter)
log4rpg.filter.appName.property.application=myApplication

# -----------------------------------------------------------------------
#  Properties of the 'PatternLayout'
#      %p      priority
#      %t      time
#      %d      date
#      %z      timestamp
#      %l      logger name
#      %m      application supplied message text
#      %n      new line
#      %P      program name
#      %L      program library name
#      %M      module name
#      %F      function/procedure name
#      %S      statement
#      %j      qualified job name
#      %u      user name
#      %U      name of the current user
#
#  Sample:         '%z [%M.%F]  %-5p  %S - %m'
#
#  Formatted as:   2006-02-22-11.38.42.567000 [LOG4RPG_T1.P_MAIN]  debug  0000010500 -
#
#  Description:    '%z'          produces the current timestamp.
#                  '%M'          prints the name of the module the logger was called f
#                  '%F'          prints the name of the procedure the logger was calle
#                  '%-5p'        prints the logging priority, left adjusted in a 5 cha
#                  '%S'          prints the statement identifier the logger was called
#                  '%m'          prints the message text supplied by the application.
# -----------------------------------------------------------------------

]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4_X1  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4_X1   "
mbrtype =  "RPGLE     "
mbrtext =  "Sample: Loads config from mbr:LOG4_X1P1           "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  Sample: Loads config from mbr:LOG4_X1P1                            *
      *=====================================================================*
      *  This sample program loads the configuration data from member       *
      *  QLOG4RPG.LOG4_X1P1.                                                *
      *  The program writes some log events to file 'log4_x1p1.log'         *
      *  in the user's current directory. Usually it is the user's home     *
      *  directory. Please verify that appending log entries to file        *
      *  'log4_x1p1.log' in the current directory does not harm your        *
      *  system. You may use WRKLNK 'log4_x1p1.log' to check where the      *
      *  output goes.                                                       *
      *                                                                     *
      *  Caution: The log events will be added to 'log4_x1.log'             *
      *           without warning.                                          *
      *                                                                     *
      *=====================================================================*
      * >>PRE-COMPILER<<                                                    *
      *                                                                     *
      *   >>CRTCMD<< CRTRPGMOD    MODULE(&LI/&OB) +                         *
      *                           SRCFILE(&SL/&SF) +                        *
      *                           SRCMBR(&SM);                              *
      *                                                                     *
      *   >>COMPILE<<                                                       *
      *     >>PARM<< TRUNCNBR(*NO);                                         *
      *     >>PARM<< DBGVIEW(*LIST);                                        *
      *   >>END-COMPILE<<                                                   *
      *                                                                     *
      *   >>EXECUTE<<                                                       *
      *                                                                     *
      *   >>CMD<<    CRTPGM       PGM(&LI/LOG4_X1PGM) +                     *
      *                           MODULE(&LI/&OB          +                 *
      *                                          ) +                        *
      *                           BNDSRVPGM(*LIBL/BASICS1      +            *
      *                                     *LIBL/IFS          +            *
      *                                     *LIBL/LOG4RPG )    +            *
      *                           BNDDIR(*LIBL/QC2LE) +                     *
      *                           DETAIL(*BASIC) +                          *
      *                           ACTGRP(*NEW);                             *
      *                                                                     *
      * >>END-PRE-COMPILER<<                                                *
      *=====================================================================*
     H DEBUG
     H OPTION(*SRCSTMT : *NODEBUGIO)
     H DECEDIT('0,') DATEDIT(*DMY.)
     H DATFMT(*ISO )  TIMFMT(*ISO )
     H EXPROPTS(*RESDECPOS)
     H EXTBININT(*YES)
      *=====================================================================*
      *
      * ------------------------------------
      *  Type definitions
      * ------------------------------------
      *
      * ------------------------------------
      *  External Prototypes
      * ------------------------------------
      /COPY QBASICS1,PBASICS1                      SrvPgm: Basics 1
      /COPY QLOG4RPG,PLOG4RPG                      Log4rpg
      *
      * ------------------------------------
      *  Global Fields
      * ------------------------------------
      *
      * ------------------------------------
      *  Globale Konstanten
      * ------------------------------------
      *
      * ------------------------------------
      *  Prototypes
      * ------------------------------------
      *
     D PGM_ENTRY_POINT...
     D                 PR                  extpgm('LOG4_X1')
     D gi_properties                 32A   const  options(*nopass)
      *
     D main...
     D                 PR
     D i_properties                  32A   value  varying
      *
      *=====================================================================*
      *  Program Entry Point
      *=====================================================================*
     D PGM_ENTRY_POINT...
     D                 PI
     D gi_properties                 32A   const  options(*nopass)
      *
      /FREE

         if %parms() >= 1;
            main(%trim(gi_properties));
         else;
            main('mbr:QLOG4RPG.LOG4_X1P1');
         endif;

         *inlr = *on;

         return;

      /END-FREE
      *
      *=====================================================================*
      *  Main procedure
      *=====================================================================*
     P main...
     P                 B
      *
     D main...
     D                 PI
     D i_properties                  32A   value  varying
      *
      *  Helper fields
     D hLog1           S                   like(LOG4RPG_hLogger_t         ) inz
     D hLog2           S                   like(LOG4RPG_hLogger_t         ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Control block
         dou 1=1;

            Configurator_loadPropertiesConfiguration(i_properties);

            hLog1 = Logger_getRootLogger();
            hLog2 = Logger_getLogger('de.tools400');

            Logger_debug(hLog1: 'Testnachricht 1.1');
            Logger_debug(hLog1: 'Testnachricht 1.1.1 + Dies ist eine sehr +
                                 lange Nachricht. Sie muss daher bei einem +
                                 Print Appender über mehrere Zeilen gedruckt +
                                 werden.');
            Logger_debug(hLog1: 'Testnachricht 1.2');
            Logger_debug(hLog1: 'Testnachricht 1.3');
            Logger_debug(hLog1: 'Testnachricht 1.4');
            Logger_debug(hLog1: 'Testnachricht 1.5');
            Logger_debug(hLog1: 'Testnachricht 1.6');

            Logger_info(hLog2: 'Hello World (de.tools400)');
            Logger_debug(hLog2: 'Hello World (de.tools400)');
            Logger_warn(hLog2: 'Hello World (de.tools400)');
            Logger_error(hLog2: 'Hello World (de.tools400)');
            Logger_fatal(hLog2: 'Hello World (de.tools400)');

         enddo;

         return;

      /END-FREE
      *
     P main...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4_X1P1  type PROPS - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4_X1P1 "
mbrtype =  "PROPS     "
mbrtext =  "Configures a DailyRollingFileAppender             "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[

log4rpg.debug=off, printer

log4rpg.rootLogger=DEBUG, file
log4rpg.logger.de.tools400=INFO

log4rpg.appender.file=*LIBL/LOG4RPG(DailyRollingFileAppender)
log4rpg.appender.file.path=log4_x1p1.log
log4rpg.appender.file.layout=PatternLayout
log4rpg.appender.file.layout.conversionPattern=%z [%-5p] %L/%P(%M).%F (%S) %m%n








]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4_X1P2  type PROPS - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4_X1P2 "
mbrtype =  "PROPS     "
mbrtext =  "Configures a DailyRollingPrintAppender            "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[

log4rpg.debug=off, printer

log4rpg.rootLogger=DEBUG, print
log4rpg.logger.de.tools400=INFO

log4rpg.appender.print=*LIBL/LOG4RPG(DailyRollingPrintAppender)
log4rpg.appender.print.splfName=LOG4_X1P2
log4rpg.appender.print.length=49
log4rpg.appender.print.width=132
log4rpg.appender.print.lpi=6
log4rpg.appender.print.cpi=10
log4rpg.appender.print.ovrflw=42
log4rpg.appender.print.leftMargin=10
log4rpg.appender.print.rightMargin=10
log4rpg.appender.print.layout=PatternLayout
log4rpg.appender.print.layout.conversionPattern=%z [%-5p] %P(%M).%F (%S) %m%n

]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4_X1P3  type PROPS - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4_X1P3 "
mbrtype =  "PROPS     "
mbrtext =  "Configures a DailyRollingFileAppender + HTMLLayout"
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[

log4rpg.debug=off, printer

log4rpg.rootLogger=DEBUG, htmlFile
log4rpg.logger.de.tools400=INFO

log4rpg.appender.htmlFile=DailyRollingFileAppender
log4rpg.appender.htmlFile.path=log4_x1p3.html
log4rpg.appender.htmlFile.layout=*LIBL/LOG4HTMLAY(HTMLLayout)

// Enforce a new file every minute!
log4rpg.appender.htmlFile.datePattern=_yyyy-MM-dd-HH.mm.






]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4_X1P4  type PROPS - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4_X1P4 "
mbrtype =  "PROPS     "
mbrtext =  "Configures a XMLSocketAppender for Chainsaw       "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[

log4rpg.debug=off, printer

log4rpg.rootLogger=DEBUG, chainsaw
log4rpg.logger.de.tools400=INFO

log4rpg.appender.chainsaw=*LIBL/LOG4SCKAPP(XMLSocketAppender)
log4rpg.appender.chainsaw.remoteHost=xxx.xxx.xxx.xxx
log4rpg.appender.chainsaw.port=4448
log4rpg.appender.chainsaw.layout=XMLLayout
log4rpg.appender.chainsaw.filter=appName

log4rpg.filter.appName=*LIBL/LOG4PROFLT(PropertyFilter)
log4rpg.filter.appName.property.application=myApplication




]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4_X1P5  type PROPS - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4_X1P5 "
mbrtype =  "PROPS     "
mbrtext =  "Configures a DailyRollingFileAppender + XMLLayout "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[

log4rpg.debug=off, printer

log4rpg.rootLogger=DEBUG, xmlFile
log4rpg.logger.de.tools400=INFO

log4rpg.appender.xmlFile=DailyRollingFileAppender
log4rpg.appender.xmlFile.path=log4_x1p5.xml
log4rpg.appender.xmlFile.layout=XMLLayout

// Enforce a new file every day!
log4rpg.appender.xmlFile.datePattern=_yyyy-MM-dd.






]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4_X1P6  type PROPS - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4_X1P6 "
mbrtype =  "PROPS     "
mbrtext =  "Configures a XMLSocketHubAppender for Chainsaw    "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[

log4rpg.debug=verbose , printer

log4rpg.rootLogger=DEBUG, chainsawHub
log4rpg.logger.de.tools400=DEBUG

log4rpg.appender.chainsawHub=*LIBL/LOG4SHBAPP(XMLSocketHubAppender)
log4rpg.appender.chainsawHub.port=4560
log4rpg.appender.chainsawHub.ccsid=819
log4rpg.appender.chainsawHub.layout=XMLLayout
log4rpg.appender.chainsawHub.layout.replaceUnprintableCharacters=true
log4rpg.appender.chainsawHub.filter=appName

log4rpg.filter.appName=LOG4PROFLT(PropertyFilter)
log4rpg.filter.appName.property.application=myApplication



]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4_X1P7  type PROPS - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4_X1P7 "
mbrtype =  "PROPS     "
mbrtext =  "Configures a RollingFileAppender                  "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[

log4rpg.debug=off, printer

log4rpg.rootLogger=DEBUG, file
log4rpg.logger.de.tools400=INFO

log4rpg.appender.file=*LIBL/LOG4RLFAPP(RollingFileAppender)
log4rpg.appender.file.path=log4_x1p7.log
log4rpg.appender.file.maxfilesize=128
log4rpg.appender.file.maxbackupindex=10
log4rpg.appender.file.layout=PatternLayout
log4rpg.appender.file.layout.conversionPattern=%z [%-5p] %L/%P(%M).%F (%S) %m%n






]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4_X2  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4_X2   "
mbrtype =  "RPGLE     "
mbrtext =  "Sample: Speed Test                                "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  Sample: Loads config from mbr:LOG4_X1P1                            *
      *=====================================================================*
      *  This sample program loads the configuration data from member       *
      *  QLOG4RPG.LOG4_X1P1.                                                *
      *  The program writes some log events to file 'log4_x1p1.log'         *
      *  in the user's current directory. Usually it is the user's home     *
      *  directory. Please verify that appending log entries to file        *
      *  'log4_x1p1.log' in the current directory does not harm your        *
      *  system. You may use WRKLNK 'log4_x1p1.log' to check where the      *
      *  output goes.                                                       *
      *                                                                     *
      *  Caution: The log events will be added to 'log4_x1.log'             *
      *           without warning.                                          *
      *                                                                     *
      *=====================================================================*
      * >>PRE-COMPILER<<                                                    *
      *                                                                     *
      *   >>CRTCMD<< CRTRPGMOD    MODULE(&LI/&OB) +                         *
      *                           SRCFILE(&SL/&SF) +                        *
      *                           SRCMBR(&SM);                              *
      *                                                                     *
      *   >>COMPILE<<                                                       *
      *     >>PARM<< TRUNCNBR(*NO);                                         *
      *     >>PARM<< DBGVIEW(*LIST);                                        *
      *   >>END-COMPILE<<                                                   *
      *                                                                     *
      *   >>EXECUTE<<                                                       *
      *                                                                     *
      *   >>CMD<<    CRTPGM       PGM(&LI/LOG4_X2PGM) +                     *
      *                           MODULE(&LI/&OB          +                 *
      *                                          ) +                        *
      *                           BNDSRVPGM(*LIBL/BASICS1      +            *
      *                                     *LIBL/IFS          +            *
      *                                     *LIBL/LOG4RPG )    +            *
      *                           BNDDIR(*LIBL/QC2LE) +                     *
      *                           DETAIL(*BASIC) +                          *
      *                           ACTGRP(*NEW);                             *
      *                                                                     *
      * >>END-PRE-COMPILER<<                                                *
      *=====================================================================*
     H DEBUG
     H OPTION(*SRCSTMT : *NODEBUGIO)
     H DECEDIT('0,') DATEDIT(*DMY.)
     H DATFMT(*ISO )  TIMFMT(*ISO )
     H EXPROPTS(*RESDECPOS)
     H EXTBININT(*YES)
      *=====================================================================*
      *
      * ------------------------------------
      *  Type definitions
      * ------------------------------------
      *
      * ------------------------------------
      *  External Prototypes
      * ------------------------------------
      /COPY QBASICS1,PBASICS1                      SrvPgm: Basics 1
      /COPY QLOG4RPG,PLOG4RPG                      Log4rpg
      *
      * ------------------------------------
      *  Global Fields
      * ------------------------------------
      *
      * ------------------------------------
      *  Globale Konstanten
      * ------------------------------------
      *
      * ------------------------------------
      *  Prototypes
      * ------------------------------------
      *
     D PGM_ENTRY_POINT...
     D                 PR                  extpgm('LOG4_X2PGM')
     D gi_properties                 32A   const  options(*nopass)
      *
     D main...
     D                 PR
     D i_properties                  32A   value  varying
      *
      *=====================================================================*
      *  Program Entry Point
      *=====================================================================*
     D PGM_ENTRY_POINT...
     D                 PI
     D gi_properties                 32A   const  options(*nopass)
      *
      /FREE

         if %parms() >= 1;
            main(%trim(gi_properties));
         else;
            main('mbr:QLOG4RPG.LOG4_X1P1');
         endif;

         *inlr = *on;

         return;

      /END-FREE
      *
      *=====================================================================*
      *  Main procedure
      *=====================================================================*
     P main...
     P                 B
      *
     D main...
     D                 PI
     D i_properties                  32A   value  varying
      *
      *  Helper fields
     D hLog1           S                   like(LOG4RPG_hLogger_t         ) inz
     D hLog2           S                   like(LOG4RPG_hLogger_t         ) inz
      *
     D x               S             10I 0 inz(10000)
     D startTime       S               Z   inz
     D endTime         S               Z   inz
     D mSecs           S             20I 0 inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Control block
         dou 1=1;

            Configurator_loadPropertiesConfiguration(i_properties);

            hLog1 = Logger_getRootLogger();
            hLog2 = Logger_getLogger('de.tools400');

            Logger_debug(hLog2: 'Starting speed test ...');

            startTime = %timestamp();

            dow (x > 0);
               Logger_debug(hLog2: '*** Speed test running ***');
               x = x - 1;
            enddo;

            endTime = %timestamp();
            mSecs = %diff(endTime: startTime: *MSECONDS);

            Logger_debug(hLog2: '... finished speed test.');
            Logger_debug(hLog2: 'Time elapsed: ' + %char(mSecs));

         enddo;

         return;

      /END-FREE
      *
     P main...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4HTMLAY  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4HTMLAY"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: HTMLLayout              "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PROTOTYPES_ONLY)
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: HTMLLayout                               *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  02.11.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *  07.11.2006  Th.Raddatz    Added missing '</title>' tag.            *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *     >>CMD<<     CRTSRVPGM    SRVPGM(&LI/&OB) +                      *
      *                              MODULE(&LI/&OB) +                      *
      *                              EXPORT(*ALL) +                         *
      *                              ACTGRP(*CALLER) +                      *
      *                              ALWUPD(*YES) +                         *
      *                              ALWLIBUPD(*YES) +                      *
      *                              BNDDIR(QC2LE) +                        *
      *                              BNDSRVPGM(*LIBL/LOG4RPG   +            *
      *                                        *LIBL/BASICS1 ) +            *
      *                              TEXT('Tools/400 - Log4rpg +            *
      *                                    HTMLLayout              ') +     *
      *                              DETAIL(*BASIC);                        *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      /COPY QLOG4RPG,COPYRIGHT
      *=====================================================================*
      /ENDIF
      *
      *  Creates a new HTMLLayout.
     D HTMLLayout_new...
     D                 PR              N   extproc('HTMLLayout+
     D                                     _new')
     D  i_pSuper                           const  like(LOG4RPG_pLayout_t       )
     D  io_pHandle                     *
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Renders the log event.
     D HTMLLayout_format...
     D                 PR                  extproc('HTMLLayout+
     D                                     _format')
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t )
      *
      *  Returns the header of this layout.
     D HTMLLayout_getHeader...
     D                 PR                         like(LOG4RPG_header_t)
     D                                     extproc('HTMLLayout+
     D                                     _getHeader')
     D  i_pHandle                      *   const
      *
      *  Returns the header of this layout.
     D HTMLLayout_getFooter...
     D                 PR                         like(LOG4RPG_footer_t)
     D                                     extproc('HTMLLayout+
     D                                     _getFooter')
     D  i_pHandle                      *   const
      *
      *  Used to set the properties of the layout.
     D HTMLLayout_setProperties...
     D                 PR                  extproc('HTMLLayout+
     D                                     _setProperties')
     D  i_pHandle                      *   const
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Deletes a given HTMLLayout.
     D HTMLLayout_delete...
     D                 PR              N   extproc('HTMLLayout+
     D                                     _delete')
     D  io_pHandle                     *
      *
      /IF DEFINED(PROTOTYPES_ONLY)
      /EOF
      /ENDIF
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG52
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG                     Public interface & type definitions
      *
     D handle_t...
     D                 DS                  qualified           based(pDummy)
     D  pSuper                             like(LOG4RPG_pLayout_t  )
     D  title                       128A   varying
     D  color                              likeds(color_t )
      *
     D color_t...
     D                 DS                  qualified           based(pDummy)
     D  info                               like(LOG4RPG_colorAttr_t)
     D  debug                              like(LOG4RPG_colorAttr_t)
     D  warn                               like(LOG4RPG_colorAttr_t)
     D  error                              like(LOG4RPG_colorAttr_t)
     D  fatal                              like(LOG4RPG_colorAttr_t)
      *
     D LOG4RPG_colorAttr_t...
     D                 S             32A   varying             based(pDummy)
      *
     D LOG4RPG_color_t...
     D                 S              7A   varying             based(pDummy)
      *
     D LOG4RPG_strong_t...
     D                 S              6A   varying             based(pDummy)
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QLOG4RPG,CLIB                          C-Library
      *
 CPY  *COPY QLOG4RPG,PLOG4RPG07                    PropertyList
      /COPY QLOG4RPG,PLOG4RPG09                    Level
      /COPY QLOG4RPG,PLOG4RPG10                    LogLog
      /COPY QLOG4RPG,PLOG4RPG99                    Helper
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      *  Loads the configuration parameters from the specified property list.
     D loadConfiguration...
     D                 PR
     D  io_handle                                 likeds(handle_t              )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Returns the color for a log event.
     D getColorAttr...
     D                 PR                         like(LOG4RPG_colorAttr_t)
     D  i_handle                           const  likeds(handle_t         )
     D  i_level                            const  like(LOG4RPG_level_t    )
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
     D cTHIS_CLASS...
     D                 C                          const(
     D                                            'HTMLLayout')
      *
      /COPY QLOG4RPG,PLAYOUT
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Program status data structure
      * -----------------------------------------
      /DEFINE SDS_EXTENDED
      /COPY QLOG4RPG,SDS
      /UNDEFINE SDS_EXTENDED
      *
      *=====================================================================*
      *  Creates a new HTMLLayout.
      *=====================================================================*
      *  Parameters:
      *   io_pHandle   - Handle that is passed around the various calls to
      *                  this HTMLLayout.
      *   i_pPropsList - Handle of the property list that contains the
      *                  properties for the layout.
      *   i_prefix     - Prefix of the relevant property keys.
      *
      *  Returns:
      *   isDone       - Returns TRUE on success, else FALSE.
      *=====================================================================*
     P HTMLLayout_new...
     P                 B                   export
      *
     D HTMLLayout_new...
     D                 PI              N
     D  i_pSuper                           const  like(LOG4RPG_pLayout_t       )
     D  io_pHandle                     *
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Helper fields
     D tmpHandle       DS                  likeds(handle_t ) inz
     D msg             DS                  likeds(msg_t    ) inz
      *
      *  Layout handle
     D handle          DS                  likeds(handle_t ) based(io_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         clear tmpHandle;

         // Initialize handle
         tmpHandle.pSuper    = i_pSuper;   // Handle of the super class 'Layout'
         tmpHandle.title     = 'Log4rpg Log Messages';

         tmpHandle.color.info  = '';
         tmpHandle.color.debug = '#339933';              // green
         tmpHandle.color.warn  = '#FFCC00; strong';      // orange
         tmpHandle.color.error = '#CC3300; strong';      // red
         tmpHandle.color.fatal = '#993300; strong';      // dark red

         // Initialize handle from configuration properties
         if (i_pPropList <> *NULL) and not PropertyList_isNull(i_pPropList);
            loadConfiguration(tmpHandle: i_pPropList: i_prefix);
         endif;

         io_pHandle = %alloc(%size(tmpHandle));
         handle = tmpHandle;

         LogLog_debug('Loaded instance of [' + cTHIS_CLASS + '].');

         return isDone;

      /END-FREE
      *
     P HTMLLayout_new...
     P                 E
      *
      *=====================================================================*
      *  Decides what to do with the log event.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle    - Handle that is passed around the various calls to
      *                  this HTMLLayout.
      *   i_pLogEvent  - Handle of the Log event.
      *
      *  Returns:
      *   isDone       - Returns TRUE on success, else FALSE.
      *=====================================================================*
     P HTMLLayout_format...
     P                 B                   export
      *
     D HTMLLayout_format...
     D                 PI
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t )
      *
      *  Helper fields
     D htmlString      S                   like(LOG4RPG_formattedText_t) inz
     D colorAttr       S             32A   varying                       inz
     D color           S                   like(LOG4RPG_color_t        ) inz
     D strong          S                   like(LOG4RPG_strong_t       ) inz
     D pToken          S               *                                 inz
     D caller          DS                  likeds(LOG4RPG_caller_t  ) inz
      *
      *  Layout handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Start log event ...
         htmlString = Layout_newLine() + '<tr>' + Layout_newLine();

         // ... adding time
         htmlString = htmlString +
            '<td title="Time">' +
               %char(LogEvent_getTime(i_pLogEvent)) +
            '</td>' + Layout_newLine();

         // ... adding job (thread)
         htmlString = htmlString +
            '<td title="Qualified job name">' + %editc(sds.nbr: 'X') + '/' +
                                                %trimR(sds.user)     + '/' +
                                                %trimR(sds.job )           +
            '</td>' + Layout_newLine();

         // ... adding level
         htmlString = htmlString +
            '<td title="Level">';

         colorAttr = getColorAttr(handle: LogEvent_getLevel(i_pLogEvent));

         pToken = strtok(colorAttr: ';');
         if pToken <> *NULL;
            color = %trim(%str(pToken));
            pToken = strtok(*NULL: ';');
         endif;

         if pToken <> *NULL;
            strong = %trim(%str(pToken));
         endif;

         if color = '';
            htmlString = htmlString + LogEvent_getLevel(i_pLogEvent);
         else;
            htmlString = htmlString + '<font color="' + color + '">';
            if strong <> '';
               htmlString = htmlString + '<strong>';
            endif;
            htmlString = htmlString + LogEvent_getLevel(i_pLogEvent);
            if strong <> '';
               htmlString = htmlString + '</strong>';
            endif;
            htmlString = htmlString +  '</font>';
         endif;

         htmlString = htmlString +
            '</td>' + Layout_newLine();

         // ... adding logger name
         htmlString = htmlString +
            '<td title="Logger name">' +
               LogEvent_getLoggerName(i_pLogEvent) +
            '</td>' + Layout_newLine();

         // ... adding caller information
         caller = LogEvent_getCaller(i_pLogEvent);

         htmlString = htmlString +
            '<td title="Procedure:Line">' +
               caller.procedure + ':' + caller.stmtID +
            '</td>' + Layout_newLine();

         // ... adding message
         htmlString = htmlString +
            '<td title="Message">' +
               LogEvent_getText(i_pLogEvent) +
            '</td>' + Layout_newLine();

         // ... close.
         htmlString = htmlString + '</tr>'  + Layout_newLine();

         LogEvent_setText(i_pLogEvent: htmlString);

         return;

      /END-FREE
      *
     P HTMLLayout_format...
     P                 E
      *
      *=====================================================================*
      *  Returns the header of this layout.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle    - Handle that is passed around the various calls to
      *                  this HTMLLayout.
      *
      *  Returns:
      *   header       - The header string of this layout.
      *=====================================================================*
     P HTMLLayout_getHeader...
     P                 B                   export
      *
     D HTMLLayout_getHeader...
     D                 PI                         like(LOG4RPG_header_t)
     D  i_pHandle                      *   const
      *
      *  Helper fields
     D htmlString      S                   like(LOG4RPG_header_t  ) inz
      *
      *  Layout handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         htmlString =                                                                       //RADDAT
            '<!DOCTYPE HTML PUBLIC "-// 3C//DTD HTML 4.01 Transitional//EN" +
             "http://www.w3.org/TR/html4/loose.dtd">' + Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            '<html>' + Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            '<head>' + Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            '<title>' + handle.title + '</title>' + Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            '<style type="text/css">' + Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            '<!--' + Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            'body, table {font-family: arial,sans-serif; font-size: x-small;}' +
             Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            'th {background: #336699; color: #FFFFFF; text-align: left;}' +
             Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            '-->' + Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            '</style>' + Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            '</head>' + Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            '<body bgcolor="#FFFFFF" topmargin="6" leftmargin="6">' +
             Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            '<hr size="1" noshade>' + Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            'Log session start time ' + %char(%date: *JOBRUN) + ', ' +
                                        %char(%time: *JOBRUN) +
             '<br>' + Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            '<br>' + Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            '<table cellspacing="0" cellpadding="4" border="1" +
             bordercolor="#224466" width="100%">' +
             Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            '<tr>' + Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            '<th>Time</th>' + Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            '<th>Job</th>' + Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            '<th>Level</th>' + Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            '<th>Logger</th>' + Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            '<th>Proc:Line</th>' + Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            '<th>Message</th>' + Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            '</tr>' + Layout_newLine();

         return htmlString;

      /END-FREE
      *
     P HTMLLayout_getHeader...
     P                 E
      *
      *=====================================================================*
      *  Returns the footer of this layout.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle    - Handle that is passed around the various calls to
      *                  this HTMLLayout.
      *
      *  Returns:
      *   footer       - The footer string of this layout.
      *=====================================================================*
     P HTMLLayout_getFooter...
     P                 B                   export
      *
     D HTMLLayout_getFooter...
     D                 PI                         like(LOG4RPG_footer_t)
     D  i_pHandle                      *   const
      *
      *  Helper fields
     D htmlString      S                   like(LOG4RPG_footer_t  ) inz
      *
      *  Layout handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         htmlString =
            '</table>' + Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            '<br>' + Layout_newLine();

         htmlString = htmlString +                                                          //RADDAT
            '</body></html>' + Layout_newLine();

         return htmlString;

      /END-FREE
      *
     P HTMLLayout_getFooter...
     P                 E
      *
      *=====================================================================*
      *  Used to set the properties of the layout.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle    - Handle that is passed around the various calls to
      *                  this HTMLLayout.
      *   i_pPropsList - Handle of the property list that contains the
      *                  properties for the layout.
      *   i_prefix     - Prefix of the relevant property keys.
      *
      *  Returns:
      *   void
      *=====================================================================*
     P HTMLLayout_setProperties...
     P                 B                   export
      *
     D HTMLLayout_setProperties...
     D                 PI
     D  i_pHandle                      *   const
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  HTMLLayout-Handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         loadConfiguration(handle: i_pPropList: i_prefix);

         return;

      /END-FREE
      *
     P HTMLLayout_setProperties...
     P                 E
      *
      *=====================================================================*
      *  Deletes a given HTMLLayout.
      *=====================================================================*
      *  Parameters:
      *   io_pHandle   - Handle that is passed around the various calls to
      *                  this HTMLLayout.
      *
      *  Returns:
      *   void
      *=====================================================================*
     P HTMLLayout_delete...
     P                 B                   export
      *
     D HTMLLayout_delete...
     D                 PI              N
     D  io_pHandle                     *
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Layout handle
     D handle          DS                  likeds(handle_t ) based(io_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Clear handle data
         clear handle;

         // Free handle memory
         dealloc(N) io_pHandle;

         LogLog_verbose('Deleted instance of [' + cTHIS_CLASS + '].');

         isDone = cTrue;

         return isDone;

      /END-FREE
      *
     P HTMLLayout_delete...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Loads the configuration parameters from the specified property list.
      *=========================================================================
     P loadConfiguration...
     P                 B
      *
     D loadConfiguration...
     D                 PI
     D  io_handle                                 likeds(handle_t              )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Local fields
     D parameter       S                   like(property.key        ) inz
     D prefix          S                   like(i_prefix            ) inz
     D property        DS                  likeds(LOG4RPG_property_t) inz
     D tmpProperty     DS                  likeds(LOG4RPG_property_t) inz
     D propIter        DS                  likeds(LOG4RPG_Property...
     D                                                    ListIterator_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         prefix = f_lcase(i_prefix);

         propIter = PropertyList_getIterator(i_pPropList);

         property = PropertyList_getFirst(propIter);

         dow property.key <> '';

            if (prefix = '') or (f_startsWith(prefix: property.key) and
 B03                             %len(property.key) > %len(prefix));

               parameter = %subst(property.key: %len(prefix) + 1);

               select;
               when Layout_knowsProperty(parameter);
                  // Ignore all parameters known by super Layout class
               other;
                  LogLog_warning('No such property ['     +
                                  property.key            +
                                 '] in [' + cTHIS_CLASS + ']');
               endsl;

            endif;

            property = PropertyList_getNext(propIter);
         enddo;

         return;

      /END-FREE
      *
     P loadConfiguration...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Loads the configuration parameters from the specified property list.
      *=========================================================================
     P getColorAttr...
     P                 B
      *
     D getColorAttr...
     D                 PI                         like(LOG4RPG_colorAttr_t)
     D  i_handle                           const  likeds(handle_t         )
     D  i_level                            const  like(LOG4RPG_level_t    )
      *
      *  Return value
     D colorAttr       S                   like(LOG4RPG_colorAttr_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         select;
         when i_level = cLOG4RPG_LEVEL_DEBUG;
            colorAttr = i_handle.color.debug;
         when i_level = cLOG4RPG_LEVEL_INFO;
            colorAttr = i_handle.color.info;
         when i_level = cLOG4RPG_LEVEL_WARN;
            colorAttr = i_handle.color.warn;
         when i_level = cLOG4RPG_LEVEL_ERROR;
            colorAttr = i_handle.color.error;
         when i_level = cLOG4RPG_LEVEL_FATAL;
            colorAttr = i_handle.color.fatal;
         other;
            colorAttr = '';
         endsl;

         return colorAttr;

      /END-FREE
      *
     P getColorAttr...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4PROFLT  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4PROFLT"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: PropertyFilter          "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PROTOTYPES_ONLY)
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: PropertyFilter                           *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  18.10.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *     >>CMD<<     CRTSRVPGM    SRVPGM(&LI/&OB) +                      *
      *                              MODULE(&LI/&OB) +                      *
      *                              EXPORT(*ALL) +                         *
      *                              ACTGRP(*CALLER) +                      *
      *                              ALWUPD(*YES) +                         *
      *                              ALWLIBUPD(*YES) +                      *
      *                              BNDDIR(QC2LE) +                        *
      *                              BNDSRVPGM(&LI/LOG4RPG   +              *
      *                                        &LI/BASICS1 ) +              *
      *                              TEXT('Tools/400 - Log4rpg +            *
      *                                    Property Filter         ') +     *
      *                              DETAIL(*BASIC);                        *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      /COPY QLOG4RPG,COPYRIGHT
      *=====================================================================*
      /ENDIF
      *
      *  Creates a new PropertyFilter.
     D PropertyFilter_new...
     D                 PR              N   extproc('PropertyFilter+
     D                                     _new')
     D  i_pSuper                           const  like(LOG4RPG_pFilter_t       )
     D  io_pHandle                     *
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Decides what to do with the log event.
     D PropertyFilter_decide...
     D                 PR            10I 0 extproc('PropertyFilter+
     D                                     _decide')
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t )
      *
      *  Used to set the properties of the filter.
     D PropertyFilter_setProperties...
     D                 PR                  extproc('PropertyFilter+
     D                                     _setProperties')
     D  i_pHandle                      *   const
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Deletes a given PropertyFilter.
     D PropertyFilter_delete...
     D                 PR              N   extproc('PropertyFilter+
     D                                     _delete')
     D  io_pHandle                     *
      *
      /IF DEFINED(PROTOTYPES_ONLY)
      /EOF
      /ENDIF
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG52
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG                     Public interface & type definitions
      *
     D handle_t...
     D                 DS                  qualified           based(pDummy)
     D  pSuper                             like(LOG4RPG_pFilter_t       )
     D  hPropList                          like(LOG4RPG_pPropertyList_t )
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QLOG4RPG,CLIB                         C-Library
      *
      /COPY QLOG4RPG,PLOG4RPG07                   PropertyList
      /COPY QLOG4RPG,PLOG4RPG10                   LogLog
      /COPY QLOG4RPG,PLOG4RPG99                   Helper
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      *  Loads the configuration parameters from the specified property list.
     D loadConfiguration...
     D                 PR
     D  io_handle                                 likeds(handle_t              )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
     D cTHIS_CLASS...
     D                 C                          const(
     D                                            'PropertyFilter')
      *
     D cPARAMETER_PROPERTY...
     D                 C                          const('property.')
      *
      /COPY QLOG4RPG,PFILTER
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      *=====================================================================*
      *  Creates a new PropertyFilter.
      *=====================================================================*
      *  Parameters:
      *   io_pHandle   - Handle that is passed around the various calls to
      *                  this PropertyFilter.
      *   i_pPropsList - Handle of the property list that contains the
      *                  properties for the filter.
      *   i_prefix     - Prefix of the relevant property keys.
      *
      *  Returns:
      *   isDone       - Returns TRUE on success, else FALSE.
      *=====================================================================*
     P PropertyFilter_new...
     P                 B                   export
      *
     D PropertyFilter_new...
     D                 PI              N
     D  i_pSuper                           const  like(LOG4RPG_pFilter_t       )
     D  io_pHandle                     *
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Helper fields
     D tmpHandle       DS                  likeds(handle_t ) inz
     D msg             DS                  likeds(msg_t    ) inz
      *
      *  Filter handle
     D handle          DS                  likeds(handle_t ) based(io_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         clear tmpHandle;

         // Initialize handle
         tmpHandle.pSuper    = i_pSuper;   // Handle of the super class 'Filter'
         tmpHandle.hPropList = PropertyList_new();

         // Initialize handle from configuration properties
         if (i_pPropList <> *NULL) and not PropertyList_isNull(i_pPropList);
            loadConfiguration(tmpHandle: i_pPropList: i_prefix);
         endif;

         io_pHandle = %alloc(%size(tmpHandle));
         handle = tmpHandle;

         LogLog_debug('Loaded instance of [' + cTHIS_CLASS + '].');

         return isDone;

      /END-FREE
      *
     P PropertyFilter_new...
     P                 E
      *
      *=====================================================================*
      *  Decides what to do with the log event.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle    - Handle that is passed around the various calls to
      *                  this PropertyFilter.
      *   i_pLogEvent  - Handle of the Log event.
      *
      *  Returns:
      *   isDone       - Returns TRUE on success, else FALSE.
      *=====================================================================*
     P PropertyFilter_decide...
     P                 B                   export
      *
     D PropertyFilter_decide...
     D                 PI            10I 0
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t )
      *
      *  Helper fields
     D hPropList       S                   like(LOG4RPG_pPropertyList_t ) inz
     D property        DS                  likeds(LOG4RPG_property_t    ) inz
     D propIter        DS                  likeds(LOG4RPG_Property...
     D                                                    ListIterator_t) inz
      *
      *  Filter handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return if there are no properties to add
         if PropertyList_getNumE(handle.hPropList) = 0;
            return cFILTER_NEUTRAL;
         endif;

         // Get property list of log event
         hPropList = LogEvent_getPropertyList(i_pLogEvent);

         // Add attributes to log event
         propIter = PropertyList_getIterator(handle.hPropList);

         property = PropertyList_getFirst(propIter);

         dow property.key <> '';
            PropertyList_put(hPropList: property);
            property = PropertyList_getNext(propIter);
         enddo;

         return cFILTER_NEUTRAL;

      /END-FREE
      *
     P PropertyFilter_decide...
     P                 E
      *
      *=====================================================================*
      *  Used to set the properties of the filter.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle    - Handle that is passed around the various calls to
      *                  this PropertyFilter.
      *   i_pPropsList - Handle of the property list that contains the
      *                  properties for the filter.
      *   i_prefix     - Prefix of the relevant property keys.
      *
      *  Returns:
      *   void
      *=====================================================================*
     P PropertyFilter_setProperties...
     P                 B                   export
      *
     D PropertyFilter_setProperties...
     D                 PI
     D  i_pHandle                      *   const
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  PropertyFilter-Handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         loadConfiguration(handle: i_pPropList: i_prefix);

         return;

      /END-FREE
      *
     P PropertyFilter_setProperties...
     P                 E
      *
      *=====================================================================*
      *  Deletes a given PropertyFilter.
      *=====================================================================*
      *  Parameters:
      *   io_pHandle   - Handle that is passed around the various calls to
      *                  this PropertyFilter.
      *
      *  Returns:
      *   void
      *=====================================================================*
     P PropertyFilter_delete...
     P                 B                   export
      *
     D PropertyFilter_delete...
     D                 PI              N
     D  io_pHandle                     *
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Filter handle
     D handle          DS                  likeds(handle_t ) based(io_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Delete property list
         if not PropertyList_isNull(handle.hPropList);
            PropertyList_delete(handle.hPropList);
         endif;

         // Clear handle data
         clear handle;

         // Free handle memory
         dealloc(N) io_pHandle;

         LogLog_verbose('Deleted instance of [' + cTHIS_CLASS + '].');

         isDone = cTrue;

         return isDone;

      /END-FREE
      *
     P PropertyFilter_delete...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Loads the configuration parameters from the specified property list.
      *=========================================================================
     P loadConfiguration...
     P                 B
      *
     D loadConfiguration...
     D                 PI
     D  io_handle                                 likeds(handle_t              )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Local fields
     D parameter       S                   like(property.key        ) inz
     D prefix          S                   like(i_prefix            ) inz
     D property        DS                  likeds(LOG4RPG_property_t) inz
     D tmpProperty     DS                  likeds(LOG4RPG_property_t) inz
     D propIter        DS                  likeds(LOG4RPG_Property...
     D                                                    ListIterator_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         prefix = f_lcase(i_prefix);

         propIter = PropertyList_getIterator(i_pPropList);

         property = PropertyList_getFirst(propIter);

         dow property.key <> '';

            if (prefix = '') or (f_startsWith(prefix: property.key) and
 B03                             %len(property.key) > %len(prefix));

               parameter = %subst(property.key: %len(prefix) + 1);

               select;
               when f_startsWith(cPARAMETER_PROPERTY: parameter);
                  tmpProperty.key = %subst(parameter
                                           : %len(cPARAMETER_PROPERTY) + 1);
                  tmpProperty.value = property.value;
                  PropertyList_put(io_handle.hPropList: tmpProperty);
               when Filter_knowsProperty(parameter);
                  // Ignore all parameters known by super Filter class
               other;
                  LogLog_warning('No such property ['     +
                                  property.key            +
                                 '] in [' + cTHIS_CLASS + ']');
               endsl;

            endif;

            property = PropertyList_getNext(propIter);
         enddo;

         return;

      /END-FREE
      *
     P loadConfiguration...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RLFAPP  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RLFAPP"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: RollingFileAppender     "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PROTOTYPES_ONLY)
      *=====================================================================*
      *  SrvPgm: LOG4RLFAPP - Object: RollingFileAppender                   *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  21.04.2008                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *  31.08.2008  Th.Raddatz    Now correctly passing a file name to     *
      *                            f_renameIfsFile().                       *
      *                                                                     *
      *  09.09.2008  Th.Raddatz    Improved performance when calling        *
      *                            f_writeLineIfsFile().                    *
      *                                                                     *
      *  07.11.2008  Th.Raddatz    Fixed synchronisation problems, when     *
      *                            sharing the log file with other jobs.    *
      *                            Added properties:  syncObj               *
      *                                               syncLogMode           *
      *                                               syncText              *
      *                                                                     *
      *  20.11.2010  Th.Raddatz    Added parameter 'ccsid' to enable the    *
      *                            user to specify the ccsid of the log     *
      *                            file.                                    *
      *                                                                     *
      *  10.05.2015  Th.Raddatz    Changed *_doAppend() to better handle    *
      *                            unexpected errors when renaming the      *
      *                            log file.                                *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *     >>CMD<<     CRTSRVPGM    SRVPGM(&LI/&OB) +                      *
      *                              MODULE(&LI/LOG4RLFAPP  +               *
      *                                     &LI/LOG4RPG97 ) +               *
      *                              EXPORT(*ALL) +                         *
      *                              ACTGRP(*CALLER) +                      *
      *                              ALWUPD(*YES) +                         *
      *                              ALWLIBUPD(*YES) +                      *
      *                              BNDDIR(QC2LE) +                        *
      *                              BNDSRVPGM(*LIBL/LOG4RPG   +            *
      *                                        *LIBL/BASICS1   +            *
      *                                        *LIBL/IFS     ) +            *
      *                              TEXT('Tools/400 - Log4rpg +            *
      *                                    RollingFileAppender          ') +*
      *                              DETAIL(*BASIC);                        *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      /COPY QLOG4RPG,COPYRIGHT
      *=====================================================================*
      /ENDIF
      *
      *  Creates a new RollingFileAppender.
     D RollingFileAppender_new...
     D                 PR              N   extproc('RollingFileAppender+
     D                                     _new')
     D  i_pSuper                           const  like(LOG4RPG_pAppender_t     )
     D  io_pHandle                     *
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Returns TRUE if the appender requires a layout.
     D RollingFileAppender_requiresLayout...
     D                 PR              N   extproc('RollingFileAppender+
     D                                     _requiresLayout')
     D  i_pHandle                      *   const
      *
      *  Appends a message to the RollingFileAppender.
     D RollingFileAppender_doAppend...
     D                 PR              N   extproc('RollingFileAppender+
     D                                     _doAppend')
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const like(LOG4RPG_pLogEvent_t )
      *
      *  Used to set the properties of the appender.
     D RollingFileAppender_setProperties...
     D                 PR                  extproc('RollingFileAppender+
     D                                     _setProperties')
     D  i_pHandle                      *   const
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Deletes a given RollingFileAppender.
     D RollingFileAppender_delete...
     D                 PR              N   extproc('RollingFileAppender+
     D                                     _delete')
     D  io_pHandle                     *
      *
      /IF DEFINED(PROTOTYPES_ONLY)
      /EOF
      /ENDIF
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG                     Public interface & type definitions
      *
     D handle_t...
     D                 DS                  qualified           based(pDummy)
     D  pSuper                             like(LOG4RPG_pAppender_t)
     D  isOpen                         N
     D  hFile                              like(ifs_hFile_t     )
     D  path                               like(LOG4RPG_path_t  )
     D  maxFileSize                  20I 0
     D  maxBackupIndex...
     D                               10I 0
     D  writeHeader                    N
     D  writeFooter                    N
     D  share                          N
     D  fileID                             likeds(ifs_fileID_t  )
     D  qSyncObj                           likeds(qObj_t )
     D  isSyncLogMode                  N
     D  syncText                     50A   varying
     D  ccsid                        10U 0
     D  lastRnmErr                     Z
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QIFS,PIFS                             IFS Stream File Support
      *
      /COPY QLOG4RPG,PLOG4RPG07                   PropertyList
      /COPY QLOG4RPG,PLOG4RPG10                   LogLog
      /COPY QLOG4RPG,PLOG4RPG97                   Synchronisation
      /COPY QLOG4RPG,PLOG4RPG98                   OptionConverter
      /COPY QLOG4RPG,PLOG4RPG99                   Helper
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      *  Opens a RollingFileAppender for output.
     D openAppender...
     D                 PR              N
     D  i_pHandle                      *   const
      *
      *  Closes a RollingFileAppender.
     D closeAppender...
     D                 PR              N
     D  i_pHandle                      *   const
      *
      *  Appends the header.
     D appendHeader...
     D                 PR
     D  i_pHandle                      *   const
      *
      *  Appends the footer.
     D appendFooter...
     D                 PR
     D  i_pHandle                      *   const
      *
      *  Writes text.
     D append...
     D                 PR
     D  i_pHandle                      *   const
     D  i_text                             const  like(LOG4RPG_formattedText_t )
      *
      *  Check if a new file must be started.
     D isNewFileCondition...
     D                 PR              N
     D  i_handle                           const  likeds(handle_t )
      *
      *  Returns cTrue if there is a rename error. Resets the error after
      *  a reasonable amount of time.
     D checkAndHandleRenameError...
     D                 PR              N
     D  i_pHandle                      *   const
      *
      *  Sets the date and time of an error during renaming the output file.
     D setRenameError...
     D                 PR
     D  i_pHandle                      *   const
      *
      *  Clears the date and time of an error during renaming the output file.
     D clearRenameError...
     D                 PR
     D  i_pHandle                      *   const
      *
      *  Loads the configuration parameters from the specified property list.
     D loadConfiguration...
     D                 PR
     D  io_handle                                 likeds(handle_t              )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Renames exiting log files.
     D renameFiles...
     D                 PR              N
     D  i_handle                           const  likeds(handle_t        )
     D  o_msg                                     likeds(msg_t           )
      *
      *  Produces a backup file name.
     D getBackupFileName...
     D                 PR                         like(LOG4RPG_path_t  )
     D  i_path                             const  like(LOG4RPG_path_t  )
     D  i_index                      10I 0 const
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
     D cTHIS_CLASS...
     D                 C                          const(
     D                                            'RollingFileAppender')
      *
     D cDEFAULT_MAX_FILE_SIZE...
     D                 C                          const(10485760)
     D cDEFAULT_MAX_BACKUP_INDEX...
     D                 C                          const(1)
     D cDEFAULT_WRITE_HEADER...
     D                 C                          const('1')
     D cDEFAULT_WRITE_FOOTER...
     D                 C                          const('1')
     D cDEFAULT_SHARE...
     D                 C                          const('0')
     D cDEFAULT_SYNC_OBJ_NAME...
     D                 C                          const('LOG4RLFAPP')
     D cDEFAULT_SYNC_OBJ_LIB...
     D                 C                          const('QGPL')
     D cDEFAULT_SYNC_LOG_MODE...
     D                 C                          const('0')
     D cDEFAULT_SYNC_TEXT...
     D                 C                          const('Log4rpg +
     D                                            RollingFileAppender +
     D                                            Sync. Object')
     D cDEFAULT_CCSID...
     D                 C                          const(850)
      *
     D cPARAMETER_PATH...
     D                 C                          const('path')
     D cPARAMETER_MAX_FILE_SIZE...
     D                 C                          const('maxfilesize')
     D cPARAMETER_MAX_BACKUP_INDEX...
     D                 C                          const('maxbackupindex')
     D cPARAMETER_WRITE_HEADER...
     D                 C                          const('writeheader')
     D cPARAMETER_WRITE_FOOTER...
     D                 C                          const('writefooter')
     D cPARAMETER_SHARE...
     D                 C                          const('share')
     D cPARAMETER_SYNC_OBJ...
     D                 C                          const('syncobj')
     D cPARAMETER_SYNC_LOG_MODE...
     D                 C                          const('synclogmode')
     D cPARAMETER_SYNC_TEXT...
     D                 C                          const('synctext')
     D cPARAMETER_CCSID...
     D                 C                          const('ccsid')
      *
     D cDATE_PATTERN_DAYS...
     D                 C                          const('dd')
     D cDATE_PATTERN_MONTHS...
     D                 C                          const('MM')
     D cDATE_PATTERN_YEARS...
     D                 C                          const('yyyy')
     D cDATE_PATTERN_MINUTES...
     D                 C                          const('mm')
     D cDATE_PATTERN_HOURS...
     D                 C                          const('HH')
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      *=====================================================================*
      *  Creates a new RollingFileAppender.
      *=====================================================================*
      *  Parameters:
      *   io_pHandle    - Handle that is passed around the various calls to
      *                   this RollingFileAppender.
      *   i_pPropsList  - Handle of the property list that contains the
      *                   properties for the appender.
      *   i_prefix      - Prefix of the relevant property keys.
      *
      *  Returns:
      *   isDone        - Returns TRUE on success, else FALSE.
      *=====================================================================*
     P RollingFileAppender_new...
     P                 B                   export
      *
     D RollingFileAppender_new...
     D                 PI              N
     D  i_pSuper                           const  like(LOG4RPG_pAppender_t     )
     D  io_pHandle                     *
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Helper fields
     D tempHandle      DS                  likeds(handle_t          ) inz
     D emptyFileID     DS                  likeds(ifs_fileID_t      ) inz
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(io_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         clear tempHandle;

         // Initialize handle
         tempHandle.pSuper          = i_pSuper;   // Handle of the super class 'Appender'
         tempHandle.isOpen          = cFalse;
         tempHandle.hFile           = 0;
         tempHandle.path            = 'log4rpg.log';
         tempHandle.maxFileSize     = cDEFAULT_MAX_FILE_SIZE;
         tempHandle.maxBackupIndex  = cDEFAULT_MAX_BACKUP_INDEX;
         tempHandle.writeHeader     = cDEFAULT_WRITE_HEADER;
         tempHandle.writeFooter     = cDEFAULT_WRITE_FOOTER;
         tempHandle.share           = cDEFAULT_SHARE;
         tempHandle.fileID          = emptyFileID;
         tempHandle.qSyncObj.name   = cDEFAULT_SYNC_OBJ_NAME;
         tempHandle.qSyncObj.lib    = cDEFAULT_SYNC_OBJ_LIB;
         tempHandle.isSyncLogMode   = cDEFAULT_SYNC_LOG_MODE;
         tempHandle.syncText        = cDEFAULT_SYNC_TEXT;
         tempHandle.ccsid           = cDEFAULT_CCSID;
         tempHandle.lastRnmErr      = *LOVAL;

         // Initialize handle from configuration properties
         if (i_pPropList <> *NULL) and not PropertyList_isNull(i_pPropList);
            loadConfiguration(tempHandle: i_pPropList: i_prefix);
         endif;

         io_pHandle = %alloc(%size(tempHandle));
         handle = tempHandle;

         LogLog_debug('Loaded instance of [' + cTHIS_CLASS + '].');

         return isDone;

      /END-FREE
      *
     P RollingFileAppender_new...
     P                 E
      *
      *=====================================================================*
      *  Returns TRUE if the appender requires a layout.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this RollingFileAppender.
      *
      *  Returns:
      *   isDone        - Returns TRUE if the appender requires a layout,
      *                   else FALSE.
      *=====================================================================*
     P RollingFileAppender_requiresLayout...
     P                 B                   export
      *
     D RollingFileAppender_requiresLayout...
     D                 PI              N
     D  i_pHandle                      *   const
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(io_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return cTrue;

      /END-FREE
      *
     P RollingFileAppender_requiresLayout...
     P                 E
      *
      *=====================================================================*
      *  Appends a message to the RollingFileAppender.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this RollingFileAppender.
      *   i_pLogEvent   - Handle of the Log event.
      *
      *  Returns:
      *   isDone        - Returns TRUE on success, else FALSE.
      *=====================================================================*
     P RollingFileAppender_doAppend...
     P                 B                   export
      *
     D RollingFileAppender_doAppend...
     D                 PI              N
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const like(LOG4RPG_pLogEvent_t )
      *
      *  Return value
     D isDone          S               N   inz(cFalse)
      *
      *  Helper fields
     D archive         S                   like(LOG4RPG_path_t)           inz
     D bufLength       S             10I 0                                inz
     D lineLength      S             10I 0                                inz
     D text            S                   like(LOG4RPG_formattedText_t ) inz
     D isText          S               N                                  inz
     D isNewFile       S               N                                  inz
     D isRenameError   S               N                                  inz
     D ticket          DS                  likeds(LOG4RPG_syncTicket_t  ) inz
     D msg             DS                  likeds(msg_t       )           inz
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return if there is no text
         if LogEvent_textLength(i_pLogEvent) = 0;
            return cTrue;
         endif;

         // Open the appender for output is it is not yet open
         if not handle.isOpen;
            if not openAppender(i_pHandle);
               return cFalse;
            endif;
         endif;

         // Check if a new file must be started.
         if (not checkAndHandleRenameError(i_pHandle) and
             isNewFileCondition(handle));

            dou '1';

               isRenameError = cFalse;

               // Start synchronisation with concurrent jobs
               if (handle.share);
                  if (not Synchronisation_start(handle.qSyncObj.name
                                                : handle.qSyncObj.lib
                                                : ticket: msg));
                     LogLog_errorMsg(msg);
                     isRenameError = cTrue;
                     leave;
                  endif;
               endif;

               // Determine, whether this job has to create a new file or not.
               // If a new file has been created by anther job, this job only
               // has to switch to the new file.
               if (not handle.share or
                   f_getIfsFileID(handle.path) = handle.fileID);
                  isNewFile = cTrue;
               else;
                  isNewFile = cFalse;
               endif;

               if handle.isOpen;
                  if (isNewFile);
                     appendFooter(i_pHandle);
                  endif;
                  closeAppender(i_pHandle);
               endif;

               if (isNewFile);
                  if (not renameFiles(handle: msg));
                     LogLog_errorMsg(msg);
                     isRenameError = cTrue;
                  endif;
               endif;

               openAppender(i_pHandle);

               // End synchronisation
               if (handle.share);
                  Synchronisation_end(ticket);
               endif;

            enddo;

            if (isRenameError);
               setRenameError(i_pHandle);
            else;
               clearRenameError(i_pHandle);
            endif;

            if (not handle.isOpen);
               return cFalse;
            endif;

         endif;

         // Write to file. Asking the LogEvent to do wordWrap.
         lineLength = cLOG4RPG_MAX_TEXT_LENGTH - %len(cIFS_EOL_CRLF);
         text = LogEvent_getFirstLineOfText(i_pLogEvent: isText: lineLength);
         dow isText;
            text = text + cIFS_EOL_CRLF;
            bufLength = %len(text);
            if f_writeLineIfsFile(handle.hFile: %addr(text)+2
                                              : bufLength
                                              : ''
                                              : msg            ) <> bufLength;
               LogLog_error('Failed to write logEevent to file [' +
                            handle.path + ']');
               LogLog_errorMsg(msg);
               isDone = cFalse;
            else;
               isDone = cTrue;
            endif;
            text = LogEvent_getNextLineOfText(i_pLogEvent: isText: lineLength);
         enddo;

         return isDone;

      /END-FREE
      *
     P RollingFileAppender_doAppend...
     P                 E
      *
      *=====================================================================*
      *  Used to set the properties of the appender.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this RollingFileAppender.
      *   i_pPropsList  - Handle of the property list that contains the
      *                   properties for the appender.
      *   i_prefix      - Prefix of the relevant property keys.
      *
      *  Returns:
      *   void
      *=====================================================================*
     P RollingFileAppender_setProperties...
     P                 B                   export
      *
     D RollingFileAppender_setProperties...
     D                 PI
     D  i_pHandle                      *   const
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  RollingFileAppender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         loadConfiguration(handle: i_pPropList: i_prefix);

         return;

      /END-FREE
      *
     P RollingFileAppender_setProperties...
     P                 E
      *
      *=====================================================================*
      *  Deletes a given RollingFileAppender.
      *=====================================================================*
      *  Parameters:
      *   io_pHandle    - Handle that is passed around the various calls to
      *                   this RollingFileAppender.
      *
      *  Returns:
      *   void
      *=====================================================================*
     P RollingFileAppender_delete...
     P                 B                   export
      *
     D RollingFileAppender_delete...
     D                 PI              N
     D  io_pHandle                     *
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(io_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Close file if it is left open
         if handle.isOpen;
            closeAppender(io_pHandle);
         endif;

         // Clear handle data
         clear handle;

         // Free handle memory
         dealloc(N) io_pHandle;

         LogLog_verbose('Deleted instance of [' + cTHIS_CLASS + '].');

         isDone = cTrue;

         return isDone;

      /END-FREE
      *
     P RollingFileAppender_delete...
     P                 E
      *
      *=====================================================================*
    R *  *** Private ***
      *  Opens a RollingFileAppender for output.
      *=====================================================================*
     P openAppender...
     P                 B
      *
     D openAppender...
     D                 PI              N
     D  i_pHandle                      *   const
      *
      *  Helper fields
     D isNewFile       S               N   inz(cFalse)
     D SHARE_MODE      S             10I 0 inz
     D msg             DS                  likeds(msg_t          ) inz
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Set sync logging mode. Enables or disables the
         // logging of the sync lock holder.
         Synchronisation_setLogMode(handle.isSyncLogMode);
         Synchronisation_setObjectDesc(handle.syncText);

         // Check, whether the  file already exists
         isNewFile = not f_isIfsFile(handle.path: *omit);

         // Open new instance of file
         if not handle.share;
            SHARE_MODE = O_SHARE_RDONLY;
         else;
            SHARE_MODE = O_SHARE_RDWR;
         endif;

         handle.hFile = f_openIfsFile(handle.path: O_CREAT + O_APPEND
                                                           + O_TEXTDATA
                                                           + SHARE_MODE
                                                           + O_WRONLY
                                                           + O_CCSID
                                                 : handle.ccsid
                                                 : *omit: msg);
         if handle.hFile = cIFS_ERROR;
            LogLog_errorMsg(msg);
            return cFalse;
         endif;

         // Mark file as "open"
         handle.isOpen = cTrue;

         // Remember the unique file ID
         handle.fileID = f_getIfsFileIDH(handle.hFile);

         // Write header to file
         if isNewFile;
            appendHeader(i_pHandle);
         endif;

         return cTrue;

      /END-FREE
      *
     P openAppender...
     P                 E
      *
      *=====================================================================*
    R *  *** Private ***
      *  Closes a RollingFileAppender.
      *=====================================================================*
     P closeAppender...
     P                 B
      *
     D closeAppender...
     D                 PI              N
     D  i_pHandle                      *   const
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if f_closeIfsFile(handle.hFile) = 0;
            handle.isOpen = cFalse;
            handle.hFile  = 0;
            isDone = cTrue;
         else;
            isDone = cFalse;
         endif;

         return isDone;

      /END-FREE
      *
     P closeAppender...
     P                 E
      *
      *=====================================================================*
    R *  *** Private ***
      *  Appends the header.
      *=====================================================================*
     P appendHeader...
     P                 B
      *
     D appendHeader...
     D                 PI
     D  i_pHandle                      *   const
      *
      *  Helper fields
     D header          S                   like(LOG4RPG_header_t ) inz
     D pLayout         S                   like(LOG4RPG_pLayout_t) inz
     D msg             DS                  likeds(msg_t          ) inz
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if not handle.writeHeader;
            return;
         endif;

         // Get layout to write footer string of layout
         pLayout = Appender_getLayout(handle.pSuper);

         if not Layout_isNull(pLayout);
            header = Layout_getHeader(pLayout);
            append(i_pHandle: header);
         endif;

         return;

      /END-FREE
      *
     P appendHeader...
     P                 E
      *
      *=====================================================================*
    R *  *** Private ***
      *  Appends the footer.
      *=====================================================================*
     P appendFooter...
     P                 B
      *
     D appendFooter...
     D                 PI
     D  i_pHandle                      *   const
      *
      *  Helper fields
     D footer          S                   like(LOG4RPG_footer_t ) inz
     D pLayout         S                   like(LOG4RPG_pLayout_t) inz
     D msg             DS                  likeds(msg_t          ) inz
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if not handle.writeFooter;
            return;
         endif;

         // Get layout to write footer string of layout
         pLayout = Appender_getLayout(handle.pSuper);

         if not Layout_isNull(pLayout);
            footer = Layout_getFooter(pLayout);
            append(i_pHandle: footer);
         endif;

         return;

      /END-FREE
      *
     P appendFooter...
     P                 E
      *
      *=====================================================================*
    R *  *** Private ***
      *  Writes text.
      *=====================================================================*
     P append...
     P                 B
      *
     D append...
     D                 PI
     D  i_pHandle                      *   const
     D  i_text                             const  like(LOG4RPG_formattedText_t )
      *
      *  Helper fields
     D text            S                   like(i_text           ) inz
     D bufLength       S             10I 0                         inz
     D startPos        S             10U 0                         inz
     D pLayout         S                   like(LOG4RPG_pLayout_t) inz
     D msg             DS                  likeds(msg_t          ) inz
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if i_text = '';
            return;
         endif;

         startPos = 1;
         dow startPos > 0;
            text = f_wordWrap(i_text
                              : %len(i_text)
                              : startPos
                              : cWORDWRAP_PARAGRAPH_TEXT +
                                cWORDWRAP_PARAGRAPH_TRIMR);
            bufLength = %len(text);
            if f_writeLineIfsFile(handle.hFile: text
                                              : bufLength
                                              : cIFS_EOL_CRLF
                                              : msg) <> bufLength;
               LogLog_error('Failed to write text to file [' +
                             handle.path + ']');
               LogLog_errorMsg(msg);
            endif;
         enddo;

         return;

      /END-FREE
      *
     P append...
     P                 E
      *
      *=====================================================================*
    R *  *** private ***
      *  Check overflow condition.
      *=====================================================================*
     P isNewFileCondition...
     P                 B
      *
     D isNewFileCondition...
     D                 PI              N
     D  i_handle                           const  likeds(handle_t )
      *
      *  Return value
     D isNewFile       S               N   inz(cFalse)
      *
      *  Helper fields
     D rc              S             10I 0 inz
     D st_stat         DS                  likeds(st_stat_t ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         rc = fstat(i_handle.hFile: st_stat);

         if (st_stat.size >= i_handle.maxFileSize);
            isNewFile = cTrue;
         else;
            isNewFile = cFalse;
         endif;

         return isNewFile;

      /END-FREE
      *
     P isNewFileCondition...
     P                 E
      *
      *=====================================================================*
    R *  *** Private ***
      *  Returns cTrue if there is a rename error. Resets the error after
      *  a reasonable amount of time.
      *=====================================================================*
     P checkAndHandleRenameError...
     P                 B
     D                 PI              N
     D  i_pHandle                      *   const
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (handle.lastRnmErr = *LOVAL);
            return cFalse;
         endif;

         if (%diff(%timestamp(): handle.lastRnmErr: *DAYS) > 1 or
             %diff(%timestamp(): handle.lastRnmErr: *SECONDS) > 600);
            // try again
            clearRenameError(i_pHandle);
            return cFalse;
         endif;

         return cTrue;

      /END-FREE
     P                 E
      *
      *=====================================================================*
    R *  *** Private ***
      *  Sets the date and time of an error during renaming the output file.
      *=====================================================================*
     P setRenameError...
     P                 B
     D                 PI
     D  i_pHandle                      *   const
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (handle.lastRnmErr = *LOVAL);
            handle.lastRnmErr = %timestamp();
         endif;

      /END-FREE
     P                 E
      *
      *=====================================================================*
    R *  *** Private ***
      *  Clears the date and time of an error during renaming the output file.
      *=====================================================================*
     P clearRenameError...
     P                 B
     D                 PI
     D  i_pHandle                      *   const
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         handle.lastRnmErr = *LOVAL;

      /END-FREE
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Loads the configuration parameters from the specified property list.
      *=========================================================================
     P loadConfiguration...
     P                 B
      *
     D loadConfiguration...
     D                 PI
     D  io_handle                                 likeds(handle_t              )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Local fields
     D parameter       S                   like(property.key        ) inz
     D prefix          S                   like(i_prefix            ) inz
     D property        DS                  likeds(LOG4RPG_property_t) inz
     D propIter        DS                  likeds(LOG4RPG_Property...
     D                                                    ListIterator_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         prefix = f_lcase(i_prefix);

         propIter = PropertyList_getIterator(i_pPropList);

         property = PropertyList_getFirst(propIter);

         dow property.key <> '';

            if (prefix = '') or (f_startsWith(prefix: property.key) and
                                 %len(property.key) > %len(prefix));

               parameter = f_lcase(%subst(property.key: %len(prefix) + 1));

               select;
               when parameter = cPARAMETER_PATH;
                  io_handle.path = property.value;
               when parameter = cPARAMETER_MAX_FILE_SIZE;
                  io_handle.maxFileSize =
                     OptionConverter_toFileSize(
                        property.value: cDEFAULT_MAX_FILE_SIZE);
               when parameter = cPARAMETER_MAX_BACKUP_INDEX;
                  io_handle.maxBackupIndex =
                     OptionConverter_toInt(
                        property.value: cDEFAULT_MAX_BACKUP_INDEX);
               when parameter = cPARAMETER_WRITE_HEADER;
                  io_handle.writeHeader =
                     OptionConverter_toBoolean(
                        property.value: cDEFAULT_WRITE_HEADER);
               when parameter = cPARAMETER_WRITE_FOOTER;
                  io_handle.writeFooter =
                     OptionConverter_toBoolean(
                        property.value: cDEFAULT_WRITE_FOOTER);
               when parameter = cPARAMETER_SHARE;
                  io_handle.share =
                     OptionConverter_toBoolean(
                        property.value: cDEFAULT_SHARE);
               when parameter = cPARAMETER_SYNC_OBJ;
                  io_handle.qSyncObj = getObject(property.value);
               when parameter = cPARAMETER_SYNC_LOG_MODE;
                  io_handle.isSyncLogMode =
                     OptionConverter_toBoolean(
                        property.value: cDEFAULT_SYNC_LOG_MODE);
               when parameter = cPARAMETER_SYNC_TEXT;
                  io_handle.syncText = property.value;
               when parameter = cPARAMETER_CCSID;
                  io_handle.ccsid =
                     OptionConverter_toInt(
                        property.value: cDEFAULT_CCSID);
               when Appender_knowsProperty(parameter);
                  // Ignore all parameters known by super Appender class
               other;
                  LogLog_warning('No such property ['     +
                                  property.key            +
                                 '] in [' + cTHIS_CLASS + ']');
               endsl;

            endif;

            property = PropertyList_getNext(propIter);
         enddo;

         return;

      /END-FREE
      *
     P loadConfiguration...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Renames exiting log files.
      *=========================================================================
     P renameFiles...
     P                 B
      *
     D renameFiles...
     D                 PI              N
     D  i_handle                           const  likeds(handle_t        )
     D  o_msg                                     likeds(msg_t           )
      *
      *  Helper fields
     D rc              S             10I 0 inz(0)
     D x               S             10I 0 inz
     D tmpPath         S                   like(LOG4RPG_path_t  ) inz
     D target          S                   like(LOG4RPG_path_t  ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         o_msg = f_newMsg(cMsg_ID_OK);

         // If maxBackups <= 0, then there is no file renaming to be done.
         if (i_handle.maxBackupIndex <= 0);
            // Instead delete/truncate current log file.
            if (f_deleteIfsFile(i_handle.path: o_msg) <> 0);
               return cFalse;
            else;
               return cTrue;
            endif;
         endif;

         // Delete the oldest file
         tmpPath = getBackupFileName(i_handle.path: i_handle.maxBackupIndex);
         if (f_isIfsFile(tmpPath: *omit));
            rc = f_deleteIfsFile(tmpPath: o_msg);
         endif;

         // Rename remaining files
         x = i_handle.maxBackupIndex - 1;
         dow (x > 0 and rc <> cIFS_ERROR);
            tmpPath = getBackupFileName(i_handle.path: x);
            if (f_isIfsFile(tmpPath: *omit));
               target =
                  f_rtvIfsFileFromPath(getBackupFileName(i_handle.path: x + 1));
               rc = f_renameIfsFile(tmpPath: target: o_msg);
            endif;
            x = x - 1;
         enddo;

         // Rename current log file
         if (rc <> cIFS_ERROR);
            target = f_rtvIfsFileFromPath(getBackupFileName(i_handle.path: 1));
            rc = f_renameIfsFile(i_handle.path: target: o_msg);
            if (rc <> 0);
               return cFalse;
            endif;
         endif;

         return cTrue;

      /END-FREE
      *
     P renameFiles...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Produces a backup file name.
      *=========================================================================
     P getBackupFileName...
     P                 B
      *
     D getBackupFileName...
     D                 PI                         like(LOG4RPG_path_t  )
     D  i_path                             const  like(LOG4RPG_path_t  )
     D  i_index                      10I 0 const
      *
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return i_path + '.' + %char(i_index);

      /END-FREE
      *
     P getBackupFileName...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG  type MAKSRV - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG   "
mbrtype =  "MAKSRV    "
mbrtext =  "SrvPgm: LOG4RPG - Export List                     "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
     /* ====================================================================== */
     /* >>PRE-COMPILER<<                                                       */
     /*                                                                        */
     /*   >>CRTCMD<< CRTSRVPGM    SRVPGM(&LI/&OB);                             */
     /*                                                                        */
     /*   >>COMPILE<<                                                          */
     /*     >>PARM<< MODULE( +                                                 */
     /*                     &LI/LOG4RPG01 +                                    */
     /*                     &LI/LOG4RPG02 +                                    */
     /*                     &LI/LOG4RPG03 +                                    */
     /*                     &LI/LOG4RPG04 +                                    */
     /*                     &LI/LOG4RPG07 +                                    */
     /*                     &LI/LOG4RPG08 +                                    */
     /*                     &LI/LOG4RPG09 +                                    */
     /*                     &LI/LOG4RPG10 +                                    */
     /*                     &LI/LOG4RPG11 +                                    */
     /*                     &LI/LOG4RPG12 +                                    */
     /*                     &LI/LOG4RPG13 +                                    */
     /*                     &LI/LOG4RPG14 +                                    */
     /*                     &LI/LOG4RPG15 +                                    */
     /*                     &LI/LOG4RPG16 +                                    */
     /*                     &LI/LOG4RPG17 +                                    */
     /*                     &LI/LOG4RPG18 +                                    */
     /*                     &LI/LOG4RPG50 +                                    */
     /*                     &LI/LOG4RPG51 +                                    */
     /*                     &LI/LOG4RPG52 +                                    */
     /*                     &LI/LOG4RPG60 +                                    */
     /*                     &LI/LOG4RPG61 +                                    */
     /*                     &LI/LOG4RPG62 +                                    */
     /*                     &LI/LOG4RPG97 +                                    */
     /*                     &LI/LOG4RPG98 +                                    */
     /*                     &LI/LOG4RPG99 +                                    */
     /*                                );                                      */
     /*     >>PARM<< EXPORT(*SRCFILE);                                         */
     /*     >>PARM<<   SRCFILE(&SL/&SF);                                       */
     /*     >>PARM<<   SRCMBR(&SM);                                            */
     /*     >>PARM<< ACTGRP(*CALLER);                                          */
     /*     >>PARM<< ALWUPD(*YES);                                             */
     /*     >>PARM<< ALWLIBUPD(*YES);                                          */
     /*     >>PARM<< BNDDIR(QC2LE);                                            */
     /*     >>PARM<< BNDSRVPGM(*LIBL/IFS       +                               */
     /*                        *LIBL/BASICS1   );                              */
     /*     >>PARM<< TEXT('Tools/400 - Log4rpg');                              */
     /*     >>PARM<< TGTRLS(V6R1M0  );                                         */
     /*     >>PARM<< DETAIL(*BASIC);                                           */
     /*   >>END-COMPILE<<                                                      */
     /*                                                                        */
     /*   >>LINK<<                                                             */
     /*   >>END-LINK<<                                                         */
     /*                                                                        */
     /*   >>EXECUTE<<                                                          */
     /*                                                                        */
     /* >>END-PRE-COMPILER<<                                                   */
     /* ====================================================================== */

STRPGMEXP PGMLVL(*CURRENT) SIGNATURE('Version 1.10')

  /*   Module: LOG4RPG01   */
  EXPORT SYMBOL('LOG4RPG01_Logger_setLogging')
  EXPORT SYMBOL('LOG4RPG01_Logger_isLogging')
  EXPORT SYMBOL('LOG4RPG01_Logger_getRootLogger')
  EXPORT SYMBOL('LOG4RPG01_Logger_getLogger')
  EXPORT SYMBOL('LOG4RPG01_Logger_debug')
  EXPORT SYMBOL('LOG4RPG01_Logger_debugMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_info')
  EXPORT SYMBOL('LOG4RPG01_Logger_infoMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_warn')
  EXPORT SYMBOL('LOG4RPG01_Logger_warnMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_error')
  EXPORT SYMBOL('LOG4RPG01_Logger_errorMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_fatal')
  EXPORT SYMBOL('LOG4RPG01_Logger_fatalMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_forcedLog')
  EXPORT SYMBOL('LOG4RPG01_Logger_forcedLogMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_getName')
  EXPORT SYMBOL('LOG4RPG01_Logger_isNull')
  EXPORT SYMBOL('LOG4RPG01_Logger_null')
  EXPORT SYMBOL('LOG4RPG01_Logger_setLevel')
  EXPORT SYMBOL('LOG4RPG01_Logger_setInternalDebugging')

  /*   Module: LOG4RPG08   */
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadDefaultConfiguration')
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadPropertiesConfiguration')
  EXPORT SYMBOL('LOG4RPG08_Configurator_clearConfiguration')

  /* -------------------------------------------------------------- */
  /*   These exports belong to the predefined layouts and           */
  /*   appenders.                                                   */
  /* -------------------------------------------------------------- */

  /*   Module: LOG4RPG50   */
  EXPORT SYMBOL('DailyRollingFileAppender_new')
  EXPORT SYMBOL('DailyRollingFileAppender_requiresLayout')
  EXPORT SYMBOL('DailyRollingFileAppender_doAppend')
  EXPORT SYMBOL('DailyRollingFileAppender_setProperties')
  EXPORT SYMBOL('DailyRollingFileAppender_delete')

  /*   Module: LOG4RPG51   */
  EXPORT SYMBOL('DailyRollingPrintAppender_new')
  EXPORT SYMBOL('DailyRollingPrintAppender_requiresLayout')
  EXPORT SYMBOL('DailyRollingPrintAppender_doAppend')
  EXPORT SYMBOL('DailyRollingPrintAppender_setProperties')
  EXPORT SYMBOL('DailyRollingPrintAppender_delete')

  /*   Module: LOG4RPG51   */
  EXPORT SYMBOL('NullAppender_new')
  EXPORT SYMBOL('NullAppender_requiresLayout')
  EXPORT SYMBOL('NullAppender_doAppend')
  EXPORT SYMBOL('NullAppender_setProperties')
  EXPORT SYMBOL('NullAppender_delete')

  /*   Module: LOG4RPG60   */
  EXPORT SYMBOL('PatternLayout_delete')
  EXPORT SYMBOL('PatternLayout_format')
  EXPORT SYMBOL('PatternLayout_new')
  EXPORT SYMBOL('PatternLayout_setProperties')

  /*   Module: LOG4RPG61   */
  EXPORT SYMBOL('SimpleLayout_delete')
  EXPORT SYMBOL('SimpleLayout_format')
  EXPORT SYMBOL('SimpleLayout_new')
  EXPORT SYMBOL('SimpleLayout_setProperties')

  /*   Module: LOG4RPG62   */
  EXPORT SYMBOL('XMLLayout_delete')
  EXPORT SYMBOL('XMLLayout_format')
  EXPORT SYMBOL('XMLLayout_new')
  EXPORT SYMBOL('XMLLayout_setProperties')
  EXPORT SYMBOL('XMLLayout_getHeader')
  EXPORT SYMBOL('XMLLayout_getFooter')

  /* -------------------------------------------------------------- */
  /*   The following exports should be used for developing          */
  /*   appenders and layouts, only.                                 */
  /* -------------------------------------------------------------- */

  /*   Module: LOG4RPG03   */
  EXPORT SYMBOL('LOG4RPG03_Appender_getLayout')
  EXPORT SYMBOL('LOG4RPG03_Appender_knowsProperty')

  /*   Module: LOG4RPG07   */
  EXPORT SYMBOL('LOG4RPG07_PropertyList_new')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_put')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_remove')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_loadFromUrl')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_containsKey')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_get')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getNumE')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getIterator')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getFirst')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getNext')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_clear')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_delete')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_null')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_isNull')

  /*   Module: LOG4RPG09   */
  EXPORT SYMBOL('LOG4RPG09_Level_toInt')
  EXPORT SYMBOL('LOG4RPG09_Level_toString')

  /*   Module: LOG4RPG10   */
  EXPORT SYMBOL('LOG4RPG10_LogLog_debug')
  EXPORT SYMBOL('LOG4RPG10_LogLog_debugMsg')
  EXPORT SYMBOL('LOG4RPG10_LogLog_error')
  EXPORT SYMBOL('LOG4RPG10_LogLog_errorMsg')
  EXPORT SYMBOL('LOG4RPG10_LogLog_warning')
  EXPORT SYMBOL('LOG4RPG10_LogLog_warningMsg')
  EXPORT SYMBOL('LOG4RPG10_LogLog_verbose')
  EXPORT SYMBOL('LOG4RPG10_LogLog_verboseMsg')

  /*   Module: LOG4RPG11   */
  EXPORT SYMBOL('LOG4RPG11_Layout_newLine')
  EXPORT SYMBOL('LOG4RPG11_Layout_knowsProperty')

  /*   Module: LOG4RPG16   */
  EXPORT SYMBOL('LOG4RPG16_LogEvent_setText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_appendText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getTextPointer')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getFirstLineOfText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getNextLineOfText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_textLength')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getCaller')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getPropertyList')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getLevel')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getPriority')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getLoggerName')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getTime')

  /*   Module: LOG4RPG17   */
  EXPORT SYMBOL('LOG4RPG17_Filter_knowsProperty')

  /*   New with V1.3:      */
  /*   Module: LOG4RPG01   */
  EXPORT SYMBOL('LOG4RPG01_Logger_getInternalDebugMode')           /* V1.3      */
  EXPORT SYMBOL('LOG4RPG01_Logger_getInternalDebugOutput')         /* V1.3      */

  /*   New with V1.5:      */
  /*   Module: LOG4RPG08   */
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadAndWatchPropertiesConfiguration')

  /*   Exported with V1.5: */
  /*   Module: LOG4RPG11   */
  EXPORT SYMBOL('LOG4RPG11_Layout_getFooter')
  EXPORT SYMBOL('LOG4RPG11_Layout_getHeader')
  EXPORT SYMBOL('LOG4RPG11_Layout_isNull')

  /*   New with V1.5:      */
  /*   Module: LOG4RPG98   */
  EXPORT SYMBOL('LOG4RPG98_OptionConverter_toBoolean')
  EXPORT SYMBOL('LOG4RPG98_OptionConverter_toFileSize')
  EXPORT SYMBOL('LOG4RPG98_OptionConverter_toInt')

  /*   New with V1.6:      */
  /*   Module: LOG4RPG01   */
  EXPORT SYMBOL('LOG4RPG01_setStubOfs Internal Use Only')
  /*   Module: LOG4RPG07   */
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getUrl')

  /* -------------------------------------------------------------- */
  /*   The following exports can be used to configure Log4rpg       */
  /*   without a property file.                                     */
  /* -------------------------------------------------------------- */

  /*   New with V1.7:      */
  EXPORT SYMBOL('LOG4RPG11_Layout_new')
  EXPORT SYMBOL('LOG4RPG03_Appender_new')
  EXPORT SYMBOL('LOG4RPG03_Appender_setLayout')
  EXPORT SYMBOL('LOG4RPG03_Appender_setFilter')
  EXPORT SYMBOL('LOG4RPG01_Logger_addAppender')
  EXPORT SYMBOL('LOG4RPG17_Filter_new')
  EXPORT SYMBOL('LOG4RPG17_Filter_setNext')

  /*   New with V1.8:      */
  EXPORT SYMBOL('LOG4RPG99_getObject')
  EXPORT SYMBOL('LOG4RPG99_getProcedure')
  EXPORT SYMBOL('LOG4RPG99_getSrvPgm')

  /*   New with V1.10:     */
  EXPORT SYMBOL('LOG4RPG01_Logger_isDebugEnabled')
  EXPORT SYMBOL('LOG4RPG01_Logger_isInfoEnabled')
  EXPORT SYMBOL('LOG4RPG01_Logger_isWarnEnabled')
  EXPORT SYMBOL('LOG4RPG01_Logger_isErrorEnabled')
  EXPORT SYMBOL('LOG4RPG01_Logger_isFatalEnabled')

ENDPGMEXP

STRPGMEXP PGMLVL(*PRV    ) SIGNATURE('Version 1.8')

  /*   Module: LOG4RPG01   */
  EXPORT SYMBOL('LOG4RPG01_Logger_setLogging')
  EXPORT SYMBOL('LOG4RPG01_Logger_isLogging')
  EXPORT SYMBOL('LOG4RPG01_Logger_getRootLogger')
  EXPORT SYMBOL('LOG4RPG01_Logger_getLogger')
  EXPORT SYMBOL('LOG4RPG01_Logger_debug')
  EXPORT SYMBOL('LOG4RPG01_Logger_debugMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_info')
  EXPORT SYMBOL('LOG4RPG01_Logger_infoMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_warn')
  EXPORT SYMBOL('LOG4RPG01_Logger_warnMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_error')
  EXPORT SYMBOL('LOG4RPG01_Logger_errorMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_fatal')
  EXPORT SYMBOL('LOG4RPG01_Logger_fatalMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_forcedLog')
  EXPORT SYMBOL('LOG4RPG01_Logger_forcedLogMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_getName')
  EXPORT SYMBOL('LOG4RPG01_Logger_isNull')
  EXPORT SYMBOL('LOG4RPG01_Logger_null')
  EXPORT SYMBOL('LOG4RPG01_Logger_setLevel')
  EXPORT SYMBOL('LOG4RPG01_Logger_setInternalDebugging')

  /*   Module: LOG4RPG08   */
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadDefaultConfiguration')
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadPropertiesConfiguration')
  EXPORT SYMBOL('LOG4RPG08_Configurator_clearConfiguration')

  /* -------------------------------------------------------------- */
  /*   These exports belong to the predefined layouts and           */
  /*   appenders.                                                   */
  /* -------------------------------------------------------------- */

  /*   Module: LOG4RPG50   */
  EXPORT SYMBOL('DailyRollingFileAppender_new')
  EXPORT SYMBOL('DailyRollingFileAppender_requiresLayout')
  EXPORT SYMBOL('DailyRollingFileAppender_doAppend')
  EXPORT SYMBOL('DailyRollingFileAppender_setProperties')
  EXPORT SYMBOL('DailyRollingFileAppender_delete')

  /*   Module: LOG4RPG51   */
  EXPORT SYMBOL('DailyRollingPrintAppender_new')
  EXPORT SYMBOL('DailyRollingPrintAppender_requiresLayout')
  EXPORT SYMBOL('DailyRollingPrintAppender_doAppend')
  EXPORT SYMBOL('DailyRollingPrintAppender_setProperties')
  EXPORT SYMBOL('DailyRollingPrintAppender_delete')

  /*   Module: LOG4RPG51   */
  EXPORT SYMBOL('NullAppender_new')
  EXPORT SYMBOL('NullAppender_requiresLayout')
  EXPORT SYMBOL('NullAppender_doAppend')
  EXPORT SYMBOL('NullAppender_setProperties')
  EXPORT SYMBOL('NullAppender_delete')

  /*   Module: LOG4RPG60   */
  EXPORT SYMBOL('PatternLayout_delete')
  EXPORT SYMBOL('PatternLayout_format')
  EXPORT SYMBOL('PatternLayout_new')
  EXPORT SYMBOL('PatternLayout_setProperties')

  /*   Module: LOG4RPG61   */
  EXPORT SYMBOL('SimpleLayout_delete')
  EXPORT SYMBOL('SimpleLayout_format')
  EXPORT SYMBOL('SimpleLayout_new')
  EXPORT SYMBOL('SimpleLayout_setProperties')

  /*   Module: LOG4RPG62   */
  EXPORT SYMBOL('XMLLayout_delete')
  EXPORT SYMBOL('XMLLayout_format')
  EXPORT SYMBOL('XMLLayout_new')
  EXPORT SYMBOL('XMLLayout_setProperties')
  EXPORT SYMBOL('XMLLayout_getHeader')
  EXPORT SYMBOL('XMLLayout_getFooter')

  /* -------------------------------------------------------------- */
  /*   The following exports should be used for developing          */
  /*   appenders and layouts, only.                                 */
  /* -------------------------------------------------------------- */

  /*   Module: LOG4RPG03   */
  EXPORT SYMBOL('LOG4RPG03_Appender_getLayout')
  EXPORT SYMBOL('LOG4RPG03_Appender_knowsProperty')

  /*   Module: LOG4RPG07   */
  EXPORT SYMBOL('LOG4RPG07_PropertyList_new')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_put')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_remove')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_loadFromUrl')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_containsKey')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_get')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getNumE')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getIterator')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getFirst')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getNext')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_clear')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_delete')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_null')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_isNull')

  /*   Module: LOG4RPG09   */
  EXPORT SYMBOL('LOG4RPG09_Level_toInt')
  EXPORT SYMBOL('LOG4RPG09_Level_toString')

  /*   Module: LOG4RPG10   */
  EXPORT SYMBOL('LOG4RPG10_LogLog_debug')
  EXPORT SYMBOL('LOG4RPG10_LogLog_debugMsg')
  EXPORT SYMBOL('LOG4RPG10_LogLog_error')
  EXPORT SYMBOL('LOG4RPG10_LogLog_errorMsg')
  EXPORT SYMBOL('LOG4RPG10_LogLog_warning')
  EXPORT SYMBOL('LOG4RPG10_LogLog_warningMsg')
  EXPORT SYMBOL('LOG4RPG10_LogLog_verbose')
  EXPORT SYMBOL('LOG4RPG10_LogLog_verboseMsg')

  /*   Module: LOG4RPG11   */
  EXPORT SYMBOL('LOG4RPG11_Layout_newLine')
  EXPORT SYMBOL('LOG4RPG11_Layout_knowsProperty')

  /*   Module: LOG4RPG16   */
  EXPORT SYMBOL('LOG4RPG16_LogEvent_setText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_appendText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getTextPointer')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getFirstLineOfText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getNextLineOfText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_textLength')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getCaller')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getPropertyList')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getLevel')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getPriority')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getLoggerName')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getTime')

  /*   Module: LOG4RPG17   */
  EXPORT SYMBOL('LOG4RPG17_Filter_knowsProperty')

  /*   New with V1.3:      */
  /*   Module: LOG4RPG01   */
  EXPORT SYMBOL('LOG4RPG01_Logger_getInternalDebugMode')           /* V1.3      */
  EXPORT SYMBOL('LOG4RPG01_Logger_getInternalDebugOutput')         /* V1.3      */

  /*   New with V1.5:      */
  /*   Module: LOG4RPG08   */
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadAndWatchPropertiesConfiguration')

  /*   Exported with V1.5: */
  /*   Module: LOG4RPG11   */
  EXPORT SYMBOL('LOG4RPG11_Layout_getFooter')
  EXPORT SYMBOL('LOG4RPG11_Layout_getHeader')
  EXPORT SYMBOL('LOG4RPG11_Layout_isNull')

  /*   New with V1.5:      */
  /*   Module: LOG4RPG98   */
  EXPORT SYMBOL('LOG4RPG98_OptionConverter_toBoolean')
  EXPORT SYMBOL('LOG4RPG98_OptionConverter_toFileSize')
  EXPORT SYMBOL('LOG4RPG98_OptionConverter_toInt')

  /*   New with V1.6:      */
  /*   Module: LOG4RPG01   */
  EXPORT SYMBOL('LOG4RPG01_setStubOfs Internal Use Only')
  /*   Module: LOG4RPG07   */
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getUrl')

  /* -------------------------------------------------------------- */
  /*   The following exports can be used to configure Log4rpg       */
  /*   without a property file.                                     */
  /* -------------------------------------------------------------- */

  /*   New with V1.7:      */
  EXPORT SYMBOL('LOG4RPG11_Layout_new')
  EXPORT SYMBOL('LOG4RPG03_Appender_new')
  EXPORT SYMBOL('LOG4RPG03_Appender_setLayout')
  EXPORT SYMBOL('LOG4RPG03_Appender_setFilter')
  EXPORT SYMBOL('LOG4RPG01_Logger_addAppender')
  EXPORT SYMBOL('LOG4RPG17_Filter_new')
  EXPORT SYMBOL('LOG4RPG17_Filter_setNext')

  /*   New with V1.8:      */
  EXPORT SYMBOL('LOG4RPG99_getObject')
  EXPORT SYMBOL('LOG4RPG99_getProcedure')
  EXPORT SYMBOL('LOG4RPG99_getSrvPgm')

ENDPGMEXP

STRPGMEXP PGMLVL(*PRV    ) SIGNATURE('Version 1.7')

  /*   Module: LOG4RPG01   */
  EXPORT SYMBOL('LOG4RPG01_Logger_setLogging')
  EXPORT SYMBOL('LOG4RPG01_Logger_isLogging')
  EXPORT SYMBOL('LOG4RPG01_Logger_getRootLogger')
  EXPORT SYMBOL('LOG4RPG01_Logger_getLogger')
  EXPORT SYMBOL('LOG4RPG01_Logger_debug')
  EXPORT SYMBOL('LOG4RPG01_Logger_debugMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_info')
  EXPORT SYMBOL('LOG4RPG01_Logger_infoMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_warn')
  EXPORT SYMBOL('LOG4RPG01_Logger_warnMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_error')
  EXPORT SYMBOL('LOG4RPG01_Logger_errorMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_fatal')
  EXPORT SYMBOL('LOG4RPG01_Logger_fatalMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_forcedLog')
  EXPORT SYMBOL('LOG4RPG01_Logger_forcedLogMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_getName')
  EXPORT SYMBOL('LOG4RPG01_Logger_isNull')
  EXPORT SYMBOL('LOG4RPG01_Logger_null')
  EXPORT SYMBOL('LOG4RPG01_Logger_setLevel')
  EXPORT SYMBOL('LOG4RPG01_Logger_setInternalDebugging')

  /*   Module: LOG4RPG08   */
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadDefaultConfiguration')
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadPropertiesConfiguration')
  EXPORT SYMBOL('LOG4RPG08_Configurator_clearConfiguration')

  /* -------------------------------------------------------------- */
  /*   These exports belong to the predefined layouts and           */
  /*   appenders.                                                   */
  /* -------------------------------------------------------------- */

  /*   Module: LOG4RPG50   */
  EXPORT SYMBOL('DailyRollingFileAppender_new')
  EXPORT SYMBOL('DailyRollingFileAppender_requiresLayout')
  EXPORT SYMBOL('DailyRollingFileAppender_doAppend')
  EXPORT SYMBOL('DailyRollingFileAppender_setProperties')
  EXPORT SYMBOL('DailyRollingFileAppender_delete')

  /*   Module: LOG4RPG51   */
  EXPORT SYMBOL('DailyRollingPrintAppender_new')
  EXPORT SYMBOL('DailyRollingPrintAppender_requiresLayout')
  EXPORT SYMBOL('DailyRollingPrintAppender_doAppend')
  EXPORT SYMBOL('DailyRollingPrintAppender_setProperties')
  EXPORT SYMBOL('DailyRollingPrintAppender_delete')

  /*   Module: LOG4RPG51   */
  EXPORT SYMBOL('NullAppender_new')
  EXPORT SYMBOL('NullAppender_requiresLayout')
  EXPORT SYMBOL('NullAppender_doAppend')
  EXPORT SYMBOL('NullAppender_setProperties')
  EXPORT SYMBOL('NullAppender_delete')

  /*   Module: LOG4RPG60   */
  EXPORT SYMBOL('PatternLayout_delete')
  EXPORT SYMBOL('PatternLayout_format')
  EXPORT SYMBOL('PatternLayout_new')
  EXPORT SYMBOL('PatternLayout_setProperties')

  /*   Module: LOG4RPG61   */
  EXPORT SYMBOL('SimpleLayout_delete')
  EXPORT SYMBOL('SimpleLayout_format')
  EXPORT SYMBOL('SimpleLayout_new')
  EXPORT SYMBOL('SimpleLayout_setProperties')

  /*   Module: LOG4RPG62   */
  EXPORT SYMBOL('XMLLayout_delete')
  EXPORT SYMBOL('XMLLayout_format')
  EXPORT SYMBOL('XMLLayout_new')
  EXPORT SYMBOL('XMLLayout_setProperties')
  EXPORT SYMBOL('XMLLayout_getHeader')
  EXPORT SYMBOL('XMLLayout_getFooter')

  /* -------------------------------------------------------------- */
  /*   The following exports should be used for developing          */
  /*   appenders and layouts, only.                                 */
  /* -------------------------------------------------------------- */

  /*   Module: LOG4RPG03   */
  EXPORT SYMBOL('LOG4RPG03_Appender_getLayout')
  EXPORT SYMBOL('LOG4RPG03_Appender_knowsProperty')

  /*   Module: LOG4RPG07   */
  EXPORT SYMBOL('LOG4RPG07_PropertyList_new')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_put')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_remove')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_loadFromUrl')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_containsKey')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_get')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getNumE')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getIterator')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getFirst')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getNext')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_clear')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_delete')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_null')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_isNull')

  /*   Module: LOG4RPG09   */
  EXPORT SYMBOL('LOG4RPG09_Level_toInt')
  EXPORT SYMBOL('LOG4RPG09_Level_toString')

  /*   Module: LOG4RPG10   */
  EXPORT SYMBOL('LOG4RPG10_LogLog_debug')
  EXPORT SYMBOL('LOG4RPG10_LogLog_debugMsg')
  EXPORT SYMBOL('LOG4RPG10_LogLog_error')
  EXPORT SYMBOL('LOG4RPG10_LogLog_errorMsg')
  EXPORT SYMBOL('LOG4RPG10_LogLog_warning')
  EXPORT SYMBOL('LOG4RPG10_LogLog_warningMsg')
  EXPORT SYMBOL('LOG4RPG10_LogLog_verbose')
  EXPORT SYMBOL('LOG4RPG10_LogLog_verboseMsg')

  /*   Module: LOG4RPG11   */
  EXPORT SYMBOL('LOG4RPG11_Layout_newLine')
  EXPORT SYMBOL('LOG4RPG11_Layout_knowsProperty')

  /*   Module: LOG4RPG16   */
  EXPORT SYMBOL('LOG4RPG16_LogEvent_setText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_appendText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getTextPointer')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getFirstLineOfText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getNextLineOfText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_textLength')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getCaller')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getPropertyList')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getLevel')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getPriority')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getLoggerName')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getTime')

  /*   Module: LOG4RPG17   */
  EXPORT SYMBOL('LOG4RPG17_Filter_knowsProperty')

  /*   New with V1.3:      */
  /*   Module: LOG4RPG01   */
  EXPORT SYMBOL('LOG4RPG01_Logger_getInternalDebugMode')           /* V1.3      */
  EXPORT SYMBOL('LOG4RPG01_Logger_getInternalDebugOutput')         /* V1.3      */

  /*   New with V1.5:      */
  /*   Module: LOG4RPG08   */
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadAndWatchPropertiesConfiguration')

  /*   Exported with V1.5: */
  /*   Module: LOG4RPG11   */
  EXPORT SYMBOL('LOG4RPG11_Layout_getFooter')
  EXPORT SYMBOL('LOG4RPG11_Layout_getHeader')
  EXPORT SYMBOL('LOG4RPG11_Layout_isNull')

  /*   New with V1.5:      */
  /*   Module: LOG4RPG98   */
  EXPORT SYMBOL('LOG4RPG98_OptionConverter_toBoolean')
  EXPORT SYMBOL('LOG4RPG98_OptionConverter_toFileSize')
  EXPORT SYMBOL('LOG4RPG98_OptionConverter_toInt')

  /*   New with V1.6:      */
  /*   Module: LOG4RPG01   */
  EXPORT SYMBOL('LOG4RPG01_setStubOfs Internal Use Only')
  /*   Module: LOG4RPG07   */
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getUrl')

  /* -------------------------------------------------------------- */
  /*   The following exports can be used to configure Log4rpg       */
  /*   without a property file.                                     */
  /* -------------------------------------------------------------- */

  /*   New with V1.7:      */
  EXPORT SYMBOL('LOG4RPG11_Layout_new')
  EXPORT SYMBOL('LOG4RPG03_Appender_new')
  EXPORT SYMBOL('LOG4RPG03_Appender_setLayout')
  EXPORT SYMBOL('LOG4RPG03_Appender_setFilter')
  EXPORT SYMBOL('LOG4RPG01_Logger_addAppender')
  EXPORT SYMBOL('LOG4RPG17_Filter_new')
  EXPORT SYMBOL('LOG4RPG17_Filter_setNext')

ENDPGMEXP

STRPGMEXP PGMLVL(*PRV    ) SIGNATURE('Version 1.6')

  /*   Module: LOG4RPG01   */
  EXPORT SYMBOL('LOG4RPG01_Logger_setLogging')
  EXPORT SYMBOL('LOG4RPG01_Logger_isLogging')
  EXPORT SYMBOL('LOG4RPG01_Logger_getRootLogger')
  EXPORT SYMBOL('LOG4RPG01_Logger_getLogger')
  EXPORT SYMBOL('LOG4RPG01_Logger_debug')
  EXPORT SYMBOL('LOG4RPG01_Logger_debugMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_info')
  EXPORT SYMBOL('LOG4RPG01_Logger_infoMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_warn')
  EXPORT SYMBOL('LOG4RPG01_Logger_warnMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_error')
  EXPORT SYMBOL('LOG4RPG01_Logger_errorMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_fatal')
  EXPORT SYMBOL('LOG4RPG01_Logger_fatalMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_forcedLog')
  EXPORT SYMBOL('LOG4RPG01_Logger_forcedLogMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_getName')
  EXPORT SYMBOL('LOG4RPG01_Logger_isNull')
  EXPORT SYMBOL('LOG4RPG01_Logger_null')
  EXPORT SYMBOL('LOG4RPG01_Logger_setLevel')
  EXPORT SYMBOL('LOG4RPG01_Logger_setInternalDebugging')

  /*   Module: LOG4RPG08   */
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadDefaultConfiguration')
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadPropertiesConfiguration')
  EXPORT SYMBOL('LOG4RPG08_Configurator_clearConfiguration')

  /* -------------------------------------------------------------- */
  /*   These exports belong to the predefined layouts and           */
  /*   appenders.                                                   */
  /* -------------------------------------------------------------- */

  /*   Module: LOG4RPG50   */
  EXPORT SYMBOL('DailyRollingFileAppender_new')
  EXPORT SYMBOL('DailyRollingFileAppender_requiresLayout')
  EXPORT SYMBOL('DailyRollingFileAppender_doAppend')
  EXPORT SYMBOL('DailyRollingFileAppender_setProperties')
  EXPORT SYMBOL('DailyRollingFileAppender_delete')

  /*   Module: LOG4RPG51   */
  EXPORT SYMBOL('DailyRollingPrintAppender_new')
  EXPORT SYMBOL('DailyRollingPrintAppender_requiresLayout')
  EXPORT SYMBOL('DailyRollingPrintAppender_doAppend')
  EXPORT SYMBOL('DailyRollingPrintAppender_setProperties')
  EXPORT SYMBOL('DailyRollingPrintAppender_delete')

  /*   Module: LOG4RPG51   */
  EXPORT SYMBOL('NullAppender_new')
  EXPORT SYMBOL('NullAppender_requiresLayout')
  EXPORT SYMBOL('NullAppender_doAppend')
  EXPORT SYMBOL('NullAppender_setProperties')
  EXPORT SYMBOL('NullAppender_delete')

  /*   Module: LOG4RPG60   */
  EXPORT SYMBOL('PatternLayout_delete')
  EXPORT SYMBOL('PatternLayout_format')
  EXPORT SYMBOL('PatternLayout_new')
  EXPORT SYMBOL('PatternLayout_setProperties')

  /*   Module: LOG4RPG61   */
  EXPORT SYMBOL('SimpleLayout_delete')
  EXPORT SYMBOL('SimpleLayout_format')
  EXPORT SYMBOL('SimpleLayout_new')
  EXPORT SYMBOL('SimpleLayout_setProperties')

  /*   Module: LOG4RPG62   */
  EXPORT SYMBOL('XMLLayout_delete')
  EXPORT SYMBOL('XMLLayout_format')
  EXPORT SYMBOL('XMLLayout_new')
  EXPORT SYMBOL('XMLLayout_setProperties')
  EXPORT SYMBOL('XMLLayout_getHeader')
  EXPORT SYMBOL('XMLLayout_getFooter')

  /* -------------------------------------------------------------- */
  /*   The following exports should be used for developing          */
  /*   appenders and layouts, only.                                 */
  /* -------------------------------------------------------------- */

  /*   Module: LOG4RPG03   */
  EXPORT SYMBOL('LOG4RPG03_Appender_getLayout')
  EXPORT SYMBOL('LOG4RPG03_Appender_knowsProperty')

  /*   Module: LOG4RPG07   */
  EXPORT SYMBOL('LOG4RPG07_PropertyList_new')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_put')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_remove')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_loadFromUrl')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_containsKey')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_get')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getNumE')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getIterator')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getFirst')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getNext')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_clear')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_delete')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_null')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_isNull')

  /*   Module: LOG4RPG09   */
  EXPORT SYMBOL('LOG4RPG09_Level_toInt')
  EXPORT SYMBOL('LOG4RPG09_Level_toString')

  /*   Module: LOG4RPG10   */
  EXPORT SYMBOL('LOG4RPG10_LogLog_debug')
  EXPORT SYMBOL('LOG4RPG10_LogLog_debugMsg')
  EXPORT SYMBOL('LOG4RPG10_LogLog_error')
  EXPORT SYMBOL('LOG4RPG10_LogLog_errorMsg')
  EXPORT SYMBOL('LOG4RPG10_LogLog_warning')
  EXPORT SYMBOL('LOG4RPG10_LogLog_warningMsg')
  EXPORT SYMBOL('LOG4RPG10_LogLog_verbose')
  EXPORT SYMBOL('LOG4RPG10_LogLog_verboseMsg')

  /*   Module: LOG4RPG11   */
  EXPORT SYMBOL('LOG4RPG11_Layout_newLine')
  EXPORT SYMBOL('LOG4RPG11_Layout_knowsProperty')

  /*   Module: LOG4RPG16   */
  EXPORT SYMBOL('LOG4RPG16_LogEvent_setText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_appendText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getTextPointer')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getFirstLineOfText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getNextLineOfText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_textLength')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getCaller')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getPropertyList')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getLevel')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getPriority')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getLoggerName')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getTime')

  /*   Module: LOG4RPG17   */
  EXPORT SYMBOL('LOG4RPG17_Filter_knowsProperty')

  /*   New with V1.3:      */
  /*   Module: LOG4RPG01   */
  EXPORT SYMBOL('LOG4RPG01_Logger_getInternalDebugMode')           /* V1.3      */
  EXPORT SYMBOL('LOG4RPG01_Logger_getInternalDebugOutput')         /* V1.3      */

  /*   New with V1.5:      */
  /*   Module: LOG4RPG08   */
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadAndWatchPropertiesConfiguration')

  /*   Exported with V1.5: */
  /*   Module: LOG4RPG11   */
  EXPORT SYMBOL('LOG4RPG11_Layout_getFooter')
  EXPORT SYMBOL('LOG4RPG11_Layout_getHeader')
  EXPORT SYMBOL('LOG4RPG11_Layout_isNull')

  /*   New with V1.5:      */
  /*   Module: LOG4RPG98   */
  EXPORT SYMBOL('LOG4RPG98_OptionConverter_toBoolean')
  EXPORT SYMBOL('LOG4RPG98_OptionConverter_toFileSize')
  EXPORT SYMBOL('LOG4RPG98_OptionConverter_toInt')

  /*   New with V1.6:      */
  /*   Module: LOG4RPG01   */
  EXPORT SYMBOL('LOG4RPG01_setStubOfs Internal Use Only')
  /*   Module: LOG4RPG07   */
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getUrl')

ENDPGMEXP

STRPGMEXP PGMLVL(*PRV    ) SIGNATURE('Version 1.5')

  /*   Module: LOG4RPG01   */
  EXPORT SYMBOL('LOG4RPG01_Logger_setLogging')
  EXPORT SYMBOL('LOG4RPG01_Logger_isLogging')
  EXPORT SYMBOL('LOG4RPG01_Logger_getRootLogger')
  EXPORT SYMBOL('LOG4RPG01_Logger_getLogger')
  EXPORT SYMBOL('LOG4RPG01_Logger_debug')
  EXPORT SYMBOL('LOG4RPG01_Logger_debugMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_info')
  EXPORT SYMBOL('LOG4RPG01_Logger_infoMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_warn')
  EXPORT SYMBOL('LOG4RPG01_Logger_warnMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_error')
  EXPORT SYMBOL('LOG4RPG01_Logger_errorMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_fatal')
  EXPORT SYMBOL('LOG4RPG01_Logger_fatalMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_forcedLog')
  EXPORT SYMBOL('LOG4RPG01_Logger_forcedLogMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_getName')
  EXPORT SYMBOL('LOG4RPG01_Logger_isNull')
  EXPORT SYMBOL('LOG4RPG01_Logger_null')
  EXPORT SYMBOL('LOG4RPG01_Logger_setLevel')
  EXPORT SYMBOL('LOG4RPG01_Logger_setInternalDebugging')

  /*   Module: LOG4RPG08   */
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadDefaultConfiguration')
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadPropertiesConfiguration')
  EXPORT SYMBOL('LOG4RPG08_Configurator_clearConfiguration')

  /* -------------------------------------------------------------- */
  /*   These exports belong to the predefined layouts and           */
  /*   appenders.                                                   */
  /* -------------------------------------------------------------- */

  /*   Module: LOG4RPG50   */
  EXPORT SYMBOL('DailyRollingFileAppender_new')
  EXPORT SYMBOL('DailyRollingFileAppender_requiresLayout')
  EXPORT SYMBOL('DailyRollingFileAppender_doAppend')
  EXPORT SYMBOL('DailyRollingFileAppender_setProperties')
  EXPORT SYMBOL('DailyRollingFileAppender_delete')

  /*   Module: LOG4RPG51   */
  EXPORT SYMBOL('DailyRollingPrintAppender_new')
  EXPORT SYMBOL('DailyRollingPrintAppender_requiresLayout')
  EXPORT SYMBOL('DailyRollingPrintAppender_doAppend')
  EXPORT SYMBOL('DailyRollingPrintAppender_setProperties')
  EXPORT SYMBOL('DailyRollingPrintAppender_delete')

  /*   Module: LOG4RPG51   */
  EXPORT SYMBOL('NullAppender_new')
  EXPORT SYMBOL('NullAppender_requiresLayout')
  EXPORT SYMBOL('NullAppender_doAppend')
  EXPORT SYMBOL('NullAppender_setProperties')
  EXPORT SYMBOL('NullAppender_delete')

  /*   Module: LOG4RPG60   */
  EXPORT SYMBOL('PatternLayout_delete')
  EXPORT SYMBOL('PatternLayout_format')
  EXPORT SYMBOL('PatternLayout_new')
  EXPORT SYMBOL('PatternLayout_setProperties')

  /*   Module: LOG4RPG61   */
  EXPORT SYMBOL('SimpleLayout_delete')
  EXPORT SYMBOL('SimpleLayout_format')
  EXPORT SYMBOL('SimpleLayout_new')
  EXPORT SYMBOL('SimpleLayout_setProperties')

  /*   Module: LOG4RPG62   */
  EXPORT SYMBOL('XMLLayout_delete')
  EXPORT SYMBOL('XMLLayout_format')
  EXPORT SYMBOL('XMLLayout_new')
  EXPORT SYMBOL('XMLLayout_setProperties')
  EXPORT SYMBOL('XMLLayout_getHeader')
  EXPORT SYMBOL('XMLLayout_getFooter')

  /* -------------------------------------------------------------- */
  /*   The following exports should be used for developing          */
  /*   appenders and layouts, only.                                 */
  /* -------------------------------------------------------------- */

  /*   Module: LOG4RPG03   */
  EXPORT SYMBOL('LOG4RPG03_Appender_getLayout')
  EXPORT SYMBOL('LOG4RPG03_Appender_knowsProperty')

  /*   Module: LOG4RPG07   */
  EXPORT SYMBOL('LOG4RPG07_PropertyList_new')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_put')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_remove')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_loadFromUrl')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_containsKey')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_get')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getNumE')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getIterator')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getFirst')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getNext')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_clear')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_delete')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_null')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_isNull')

  /*   Module: LOG4RPG09   */
  EXPORT SYMBOL('LOG4RPG09_Level_toInt')
  EXPORT SYMBOL('LOG4RPG09_Level_toString')

  /*   Module: LOG4RPG10   */
  EXPORT SYMBOL('LOG4RPG10_LogLog_debug')
  EXPORT SYMBOL('LOG4RPG10_LogLog_debugMsg')
  EXPORT SYMBOL('LOG4RPG10_LogLog_error')
  EXPORT SYMBOL('LOG4RPG10_LogLog_errorMsg')
  EXPORT SYMBOL('LOG4RPG10_LogLog_warning')
  EXPORT SYMBOL('LOG4RPG10_LogLog_warningMsg')
  EXPORT SYMBOL('LOG4RPG10_LogLog_verbose')
  EXPORT SYMBOL('LOG4RPG10_LogLog_verboseMsg')

  /*   Module: LOG4RPG11   */
  EXPORT SYMBOL('LOG4RPG11_Layout_newLine')
  EXPORT SYMBOL('LOG4RPG11_Layout_knowsProperty')

  /*   Module: LOG4RPG16   */
  EXPORT SYMBOL('LOG4RPG16_LogEvent_setText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_appendText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getTextPointer')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getFirstLineOfText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getNextLineOfText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_textLength')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getCaller')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getPropertyList')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getLevel')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getPriority')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getLoggerName')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getTime')

  /*   Module: LOG4RPG17   */
  EXPORT SYMBOL('LOG4RPG17_Filter_knowsProperty')

  /*   New with V1.3:      */
  /*   Module: LOG4RPG01   */
  EXPORT SYMBOL('LOG4RPG01_Logger_getInternalDebugMode')           /* V1.3      */
  EXPORT SYMBOL('LOG4RPG01_Logger_getInternalDebugOutput')         /* V1.3      */

  /*   New with V1.5:      */
  /*   Module: LOG4RPG08   */
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadAndWatchPropertiesConfiguration')

  /*   Exported with V1.5: */
  /*   Module: LOG4RPG11   */
  EXPORT SYMBOL('LOG4RPG11_Layout_getFooter')
  EXPORT SYMBOL('LOG4RPG11_Layout_getHeader')
  EXPORT SYMBOL('LOG4RPG11_Layout_isNull')

  /*   New with V1.5:      */
  /*   Module: LOG4RPG98   */
  EXPORT SYMBOL('LOG4RPG98_OptionConverter_toBoolean')
  EXPORT SYMBOL('LOG4RPG98_OptionConverter_toFileSize')
  EXPORT SYMBOL('LOG4RPG98_OptionConverter_toInt')

ENDPGMEXP

STRPGMEXP PGMLVL(*PRV    ) SIGNATURE('Version 1.3')

  /*   Module: LOG4RPG01   */
  EXPORT SYMBOL('LOG4RPG01_Logger_setLogging')
  EXPORT SYMBOL('LOG4RPG01_Logger_isLogging')
  EXPORT SYMBOL('LOG4RPG01_Logger_getRootLogger')
  EXPORT SYMBOL('LOG4RPG01_Logger_getLogger')
  EXPORT SYMBOL('LOG4RPG01_Logger_debug')
  EXPORT SYMBOL('LOG4RPG01_Logger_debugMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_info')
  EXPORT SYMBOL('LOG4RPG01_Logger_infoMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_warn')
  EXPORT SYMBOL('LOG4RPG01_Logger_warnMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_error')
  EXPORT SYMBOL('LOG4RPG01_Logger_errorMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_fatal')
  EXPORT SYMBOL('LOG4RPG01_Logger_fatalMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_forcedLog')
  EXPORT SYMBOL('LOG4RPG01_Logger_forcedLogMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_getName')
  EXPORT SYMBOL('LOG4RPG01_Logger_isNull')
  EXPORT SYMBOL('LOG4RPG01_Logger_null')
  EXPORT SYMBOL('LOG4RPG01_Logger_setLevel')
  EXPORT SYMBOL('LOG4RPG01_Logger_setInternalDebugging')

  /*   Module: LOG4RPG08   */
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadDefaultConfiguration')
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadPropertiesConfiguration')
  EXPORT SYMBOL('LOG4RPG08_Configurator_clearConfiguration')

  /* -------------------------------------------------------------- */
  /*   These exports belong to the predefined layouts and           */
  /*   appenders.                                                   */
  /* -------------------------------------------------------------- */

  /*   Module: LOG4RPG50   */
  EXPORT SYMBOL('DailyRollingFileAppender_new')
  EXPORT SYMBOL('DailyRollingFileAppender_requiresLayout')
  EXPORT SYMBOL('DailyRollingFileAppender_doAppend')
  EXPORT SYMBOL('DailyRollingFileAppender_setProperties')
  EXPORT SYMBOL('DailyRollingFileAppender_delete')

  /*   Module: LOG4RPG51   */
  EXPORT SYMBOL('DailyRollingPrintAppender_new')
  EXPORT SYMBOL('DailyRollingPrintAppender_requiresLayout')
  EXPORT SYMBOL('DailyRollingPrintAppender_doAppend')
  EXPORT SYMBOL('DailyRollingPrintAppender_setProperties')
  EXPORT SYMBOL('DailyRollingPrintAppender_delete')

  /*   Module: LOG4RPG51   */
  EXPORT SYMBOL('NullAppender_new')
  EXPORT SYMBOL('NullAppender_requiresLayout')
  EXPORT SYMBOL('NullAppender_doAppend')
  EXPORT SYMBOL('NullAppender_setProperties')
  EXPORT SYMBOL('NullAppender_delete')

  /*   Module: LOG4RPG60   */
  EXPORT SYMBOL('PatternLayout_delete')
  EXPORT SYMBOL('PatternLayout_format')
  EXPORT SYMBOL('PatternLayout_new')
  EXPORT SYMBOL('PatternLayout_setProperties')

  /*   Module: LOG4RPG61   */
  EXPORT SYMBOL('SimpleLayout_delete')
  EXPORT SYMBOL('SimpleLayout_format')
  EXPORT SYMBOL('SimpleLayout_new')
  EXPORT SYMBOL('SimpleLayout_setProperties')

  /*   Module: LOG4RPG62   */
  EXPORT SYMBOL('XMLLayout_delete')
  EXPORT SYMBOL('XMLLayout_format')
  EXPORT SYMBOL('XMLLayout_new')
  EXPORT SYMBOL('XMLLayout_setProperties')
  EXPORT SYMBOL('XMLLayout_getHeader')
  EXPORT SYMBOL('XMLLayout_getFooter')

  /* -------------------------------------------------------------- */
  /*   The following exports should be used for developing          */
  /*   appenders and layouts, only.                                 */
  /* -------------------------------------------------------------- */

  /*   Module: LOG4RPG03   */
  EXPORT SYMBOL('LOG4RPG03_Appender_getLayout')
  EXPORT SYMBOL('LOG4RPG03_Appender_knowsProperty')

  /*   Module: LOG4RPG07   */
  EXPORT SYMBOL('LOG4RPG07_PropertyList_new')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_put')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_remove')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_loadFromUrl')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_containsKey')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_get')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getNumE')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getIterator')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getFirst')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getNext')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_clear')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_delete')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_null')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_isNull')

  /*   Module: LOG4RPG09   */
  EXPORT SYMBOL('LOG4RPG09_Level_toInt')
  EXPORT SYMBOL('LOG4RPG09_Level_toString')

  /*   Module: LOG4RPG10   */
  EXPORT SYMBOL('LOG4RPG10_LogLog_debug')
  EXPORT SYMBOL('LOG4RPG10_LogLog_debugMsg')
  EXPORT SYMBOL('LOG4RPG10_LogLog_error')
  EXPORT SYMBOL('LOG4RPG10_LogLog_errorMsg')
  EXPORT SYMBOL('LOG4RPG10_LogLog_warning')
  EXPORT SYMBOL('LOG4RPG10_LogLog_warningMsg')
  EXPORT SYMBOL('LOG4RPG10_LogLog_verbose')
  EXPORT SYMBOL('LOG4RPG10_LogLog_verboseMsg')

  /*   Module: LOG4RPG11   */
  EXPORT SYMBOL('LOG4RPG11_Layout_newLine')
  EXPORT SYMBOL('LOG4RPG11_Layout_knowsProperty')

  /*   Module: LOG4RPG16   */
  EXPORT SYMBOL('LOG4RPG16_LogEvent_setText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_appendText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getTextPointer')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getFirstLineOfText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getNextLineOfText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_textLength')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getCaller')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getPropertyList')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getLevel')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getPriority')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getLoggerName')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getTime')

  /*   Module: LOG4RPG17   */
  EXPORT SYMBOL('LOG4RPG17_Filter_knowsProperty')

  /*   New with V1.3:      */
  /*   Module: LOG4RPG01   */
  EXPORT SYMBOL('LOG4RPG01_Logger_getInternalDebugMode')           /* V1.3      */
  EXPORT SYMBOL('LOG4RPG01_Logger_getInternalDebugOutput')         /* V1.3      */

ENDPGMEXP

STRPGMEXP PGMLVL(*PRV    ) SIGNATURE('Version 1.2')

  /*   Module: LOG4RPG01   */
  EXPORT SYMBOL('LOG4RPG01_Logger_setLogging')
  EXPORT SYMBOL('LOG4RPG01_Logger_isLogging')
  EXPORT SYMBOL('LOG4RPG01_Logger_getRootLogger')
  EXPORT SYMBOL('LOG4RPG01_Logger_getLogger')
  EXPORT SYMBOL('LOG4RPG01_Logger_debug')
  EXPORT SYMBOL('LOG4RPG01_Logger_debugMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_info')
  EXPORT SYMBOL('LOG4RPG01_Logger_infoMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_warn')
  EXPORT SYMBOL('LOG4RPG01_Logger_warnMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_error')
  EXPORT SYMBOL('LOG4RPG01_Logger_errorMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_fatal')
  EXPORT SYMBOL('LOG4RPG01_Logger_fatalMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_forcedLog')
  EXPORT SYMBOL('LOG4RPG01_Logger_forcedLogMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_getName')
  EXPORT SYMBOL('LOG4RPG01_Logger_isNull')
  EXPORT SYMBOL('LOG4RPG01_Logger_null')
  EXPORT SYMBOL('LOG4RPG01_Logger_setLevel')
  EXPORT SYMBOL('LOG4RPG01_Logger_setInternalDebugging')

  /*   Module: LOG4RPG08   */
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadDefaultConfiguration')
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadPropertiesConfiguration')
  EXPORT SYMBOL('LOG4RPG08_Configurator_clearConfiguration')

  /* -------------------------------------------------------------- */
  /*   These exports belong to the predefined layouts and           */
  /*   appenders.                                                   */
  /* -------------------------------------------------------------- */

  /*   Module: LOG4RPG50   */
  EXPORT SYMBOL('DailyRollingFileAppender_new')
  EXPORT SYMBOL('DailyRollingFileAppender_requiresLayout')
  EXPORT SYMBOL('DailyRollingFileAppender_doAppend')
  EXPORT SYMBOL('DailyRollingFileAppender_setProperties')
  EXPORT SYMBOL('DailyRollingFileAppender_delete')

  /*   Module: LOG4RPG51   */
  EXPORT SYMBOL('DailyRollingPrintAppender_new')
  EXPORT SYMBOL('DailyRollingPrintAppender_requiresLayout')
  EXPORT SYMBOL('DailyRollingPrintAppender_doAppend')
  EXPORT SYMBOL('DailyRollingPrintAppender_setProperties')
  EXPORT SYMBOL('DailyRollingPrintAppender_delete')

  /*   Module: LOG4RPG51   */
  EXPORT SYMBOL('NullAppender_new')
  EXPORT SYMBOL('NullAppender_requiresLayout')
  EXPORT SYMBOL('NullAppender_doAppend')
  EXPORT SYMBOL('NullAppender_setProperties')
  EXPORT SYMBOL('NullAppender_delete')

  /*   Module: LOG4RPG60   */
  EXPORT SYMBOL('PatternLayout_delete')
  EXPORT SYMBOL('PatternLayout_format')
  EXPORT SYMBOL('PatternLayout_new')
  EXPORT SYMBOL('PatternLayout_setProperties')

  /*   Module: LOG4RPG61   */
  EXPORT SYMBOL('SimpleLayout_delete')
  EXPORT SYMBOL('SimpleLayout_format')
  EXPORT SYMBOL('SimpleLayout_new')
  EXPORT SYMBOL('SimpleLayout_setProperties')

  /*   Module: LOG4RPG62   */
  EXPORT SYMBOL('XMLLayout_delete')
  EXPORT SYMBOL('XMLLayout_format')
  EXPORT SYMBOL('XMLLayout_new')
  EXPORT SYMBOL('XMLLayout_setProperties')
  EXPORT SYMBOL('XMLLayout_getHeader')
  EXPORT SYMBOL('XMLLayout_getFooter')

  /* -------------------------------------------------------------- */
  /*   The following exports should be used for developing          */
  /*   appenders and layouts, only.                                 */
  /* -------------------------------------------------------------- */

  /*   Module: LOG4RPG03   */
  EXPORT SYMBOL('LOG4RPG03_Appender_getLayout')
  EXPORT SYMBOL('LOG4RPG03_Appender_knowsProperty')

  /*   Module: LOG4RPG07   */
  EXPORT SYMBOL('LOG4RPG07_PropertyList_new')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_put')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_remove')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_loadFromUrl')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_containsKey')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_get')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getNumE')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getIterator')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getFirst')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_getNext')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_clear')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_delete')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_null')
  EXPORT SYMBOL('LOG4RPG07_PropertyList_isNull')

  /*   Module: LOG4RPG09   */
  EXPORT SYMBOL('LOG4RPG09_Level_toInt')
  EXPORT SYMBOL('LOG4RPG09_Level_toString')

  /*   Module: LOG4RPG10   */
  EXPORT SYMBOL('LOG4RPG10_LogLog_debug')
  EXPORT SYMBOL('LOG4RPG10_LogLog_debugMsg')
  EXPORT SYMBOL('LOG4RPG10_LogLog_error')
  EXPORT SYMBOL('LOG4RPG10_LogLog_errorMsg')
  EXPORT SYMBOL('LOG4RPG10_LogLog_warning')
  EXPORT SYMBOL('LOG4RPG10_LogLog_warningMsg')
  EXPORT SYMBOL('LOG4RPG10_LogLog_verbose')
  EXPORT SYMBOL('LOG4RPG10_LogLog_verboseMsg')

  /*   Module: LOG4RPG11   */
  EXPORT SYMBOL('LOG4RPG11_Layout_newLine')
  EXPORT SYMBOL('LOG4RPG11_Layout_knowsProperty')

  /*   Module: LOG4RPG16   */
  EXPORT SYMBOL('LOG4RPG16_LogEvent_setText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_appendText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getTextPointer')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getFirstLineOfText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getNextLineOfText')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_textLength')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getCaller')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getPropertyList')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getLevel')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getPriority')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getLoggerName')
  EXPORT SYMBOL('LOG4RPG16_LogEvent_getTime')

  /*   Module: LOG4RPG17   */
  EXPORT SYMBOL('LOG4RPG17_Filter_knowsProperty')

ENDPGMEXP
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPGS  type MAKSRV - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPGS  "
mbrtype =  "MAKSRV    "
mbrtext =  "SrvPgm: LOG4RPG - Export List - Stub Service Pgm  "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
     /* ====================================================================== */
     /* >>PRE-COMPILER<<                                                       */
     /*                                                                        */
     /*   >>CRTCMD<< CRTSRVPGM    SRVPGM(&LI/&OB);                             */
     /*                                                                        */
     /*   >>COMPILE<<                                                          */
     /*     >>PARM<< MODULE( +                                                 */
     /*                     &LI/LOG4RPG00 +                                    */
     /*                                );                                      */
     /*     >>PARM<< EXPORT(*SRCFILE);                                         */
     /*     >>PARM<<   SRCFILE(&SL/&SF);                                       */
     /*     >>PARM<<   SRCMBR(&SM);                                            */
     /*     >>PARM<< ACTGRP(*CALLER);                                          */
     /*     >>PARM<< ALWUPD(*YES);                                             */
     /*     >>PARM<< ALWLIBUPD(*YES);                                          */
     /*     >>PARM<< BNDDIR(QC2LE);                                            */
     /*     >>PARM<< TEXT('Tools/400 - Log4rpg Stub');                         */
     /*     >>PARM<< TGTRLS(V6R1M0  );                                         */
     /*     >>PARM<< DETAIL(*BASIC);                                           */
     /*   >>END-COMPILE<<                                                      */
     /*                                                                        */
     /*   >>LINK<<                                                             */
     /*   >>END-LINK<<                                                         */
     /*                                                                        */
     /*   >>EXECUTE<<                                                          */
     /*                                                                        */
     /* >>END-PRE-COMPILER<<                                                   */
     /* ====================================================================== */
STRPGMEXP PGMLVL(*CURRENT) SIGNATURE('Version 1.10')

  EXPORT SYMBOL('LOG4RPG00_LoggerStub_loadSrvPgm')

  EXPORT SYMBOL('LOG4RPG01_Logger_addAppender')
  EXPORT SYMBOL('LOG4RPG01_Logger_debug')
  EXPORT SYMBOL('LOG4RPG01_Logger_debugMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_error')
  EXPORT SYMBOL('LOG4RPG01_Logger_errorMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_fatal')
  EXPORT SYMBOL('LOG4RPG01_Logger_fatalMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_forcedLog')
  EXPORT SYMBOL('LOG4RPG01_Logger_forcedLogMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_getInternalDebugMode')
  EXPORT SYMBOL('LOG4RPG01_Logger_getInternalDebugOutput')
  EXPORT SYMBOL('LOG4RPG01_Logger_getLogger')
  EXPORT SYMBOL('LOG4RPG01_Logger_getName')
  EXPORT SYMBOL('LOG4RPG01_Logger_getRootLogger')
  EXPORT SYMBOL('LOG4RPG01_Logger_info')
  EXPORT SYMBOL('LOG4RPG01_Logger_infoMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_isLogging')
  EXPORT SYMBOL('LOG4RPG01_Logger_isNull')
  EXPORT SYMBOL('LOG4RPG01_Logger_null')
  EXPORT SYMBOL('LOG4RPG01_Logger_setInternalDebugging')
  EXPORT SYMBOL('LOG4RPG01_Logger_setLevel')
  EXPORT SYMBOL('LOG4RPG01_Logger_setLogging')
  EXPORT SYMBOL('LOG4RPG01_Logger_warn')
  EXPORT SYMBOL('LOG4RPG01_Logger_warnMsg')

  EXPORT SYMBOL('LOG4RPG08_Configurator_clearConfiguration')
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadAndWatchPropertiesConfiguration')
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadDefaultConfiguration')
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadPropertiesConfiguration')

  EXPORT SYMBOL('LOG4RPG03_Appender_new')
  EXPORT SYMBOL('LOG4RPG03_Appender_null')
  EXPORT SYMBOL('LOG4RPG03_Appender_setFilter')
  EXPORT SYMBOL('LOG4RPG03_Appender_setLayout')

  EXPORT SYMBOL('LOG4RPG17_Filter_new')
  EXPORT SYMBOL('LOG4RPG17_Filter_null')

  EXPORT SYMBOL('LOG4RPG11_Layout_new')
  EXPORT SYMBOL('LOG4RPG11_Layout_null')

  /*   New with V1.10:     */
  EXPORT SYMBOL('LOG4RPG01_Logger_isDebugEnabled')
  EXPORT SYMBOL('LOG4RPG01_Logger_isInfoEnabled')
  EXPORT SYMBOL('LOG4RPG01_Logger_isWarnEnabled')
  EXPORT SYMBOL('LOG4RPG01_Logger_isErrorEnabled')
  EXPORT SYMBOL('LOG4RPG01_Logger_isFatalEnabled')

ENDPGMEXP

STRPGMEXP PGMLVL(*PRV    ) SIGNATURE('Version 1.8')

  EXPORT SYMBOL('LOG4RPG00_LoggerStub_loadSrvPgm')

  EXPORT SYMBOL('LOG4RPG01_Logger_addAppender')
  EXPORT SYMBOL('LOG4RPG01_Logger_debug')
  EXPORT SYMBOL('LOG4RPG01_Logger_debugMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_error')
  EXPORT SYMBOL('LOG4RPG01_Logger_errorMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_fatal')
  EXPORT SYMBOL('LOG4RPG01_Logger_fatalMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_forcedLog')
  EXPORT SYMBOL('LOG4RPG01_Logger_forcedLogMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_getInternalDebugMode')
  EXPORT SYMBOL('LOG4RPG01_Logger_getInternalDebugOutput')
  EXPORT SYMBOL('LOG4RPG01_Logger_getLogger')
  EXPORT SYMBOL('LOG4RPG01_Logger_getName')
  EXPORT SYMBOL('LOG4RPG01_Logger_getRootLogger')
  EXPORT SYMBOL('LOG4RPG01_Logger_info')
  EXPORT SYMBOL('LOG4RPG01_Logger_infoMsg')
  EXPORT SYMBOL('LOG4RPG01_Logger_isLogging')
  EXPORT SYMBOL('LOG4RPG01_Logger_isNull')
  EXPORT SYMBOL('LOG4RPG01_Logger_null')
  EXPORT SYMBOL('LOG4RPG01_Logger_setInternalDebugging')
  EXPORT SYMBOL('LOG4RPG01_Logger_setLevel')
  EXPORT SYMBOL('LOG4RPG01_Logger_setLogging')
  EXPORT SYMBOL('LOG4RPG01_Logger_warn')
  EXPORT SYMBOL('LOG4RPG01_Logger_warnMsg')

  EXPORT SYMBOL('LOG4RPG08_Configurator_clearConfiguration')
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadAndWatchPropertiesConfiguration')
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadDefaultConfiguration')
  EXPORT SYMBOL('LOG4RPG08_Configurator_loadPropertiesConfiguration')

  EXPORT SYMBOL('LOG4RPG03_Appender_new')
  EXPORT SYMBOL('LOG4RPG03_Appender_null')
  EXPORT SYMBOL('LOG4RPG03_Appender_setFilter')
  EXPORT SYMBOL('LOG4RPG03_Appender_setLayout')

  EXPORT SYMBOL('LOG4RPG17_Filter_new')
  EXPORT SYMBOL('LOG4RPG17_Filter_null')

  EXPORT SYMBOL('LOG4RPG11_Layout_new')
  EXPORT SYMBOL('LOG4RPG11_Layout_null')

ENDPGMEXP
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG00  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG00 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Stub                            "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Stub                                             *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  08.02.2008                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *  13.06.2008  Th.Raddatz    Enhanced the Log4rpg stub module         *
      *                            to optionally load the Log4rpg service   *
      *                            program and forward procedure calls      *
      *                            to it.                                   *
      *                                                                     *
      *  15.09.2008  Th.Raddatz    Added procedures:                        *
      *                               Layout_new()                          *
      *                               Layout_null()                         *
      *                               Appender_new()                        *
      *                               Appender_null()                       *
      *                               Appender_setLayout()                  *
      *                               Appender_setFilter()                  *
      *                               Logger_addAppender()                  *
      *                               Filter_new()                          *
      *                               Filter_null()                         *
      *                               Filter_setNext()                      *
      *                                                                     *
      *  24.03.2009  Th.Raddatz    Removed dependency to BASICS1.           *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD   MODULE(&LI/&OB) +                       *
      *                             SRCFILE(&SL/&SF) +                      *
      *                             SRCMBR(&SM);                            *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
 CPY H NOMAIN
      /UNDEFINE NO_DECEDIT
      /COPY QLOG4RPG,COPYRIGHT
      *=====================================================================*
      *
      * ------------------------------------
      *  MI procedures
      * ------------------------------------
      *
      *  QSYSINC/MIH.MICOMMON: Requested Authority bitmasks and typedef
      *                        The bitmasks are or'd together to give
      *                        desired combinations
     D AUTH_OBJ_CTRL   C                   const(x'8000')
     D AUTH_OBJ_MGMT   C                   const(x'4000')
     D AUTH_POINTER    C                   const(x'2000')
     D AUTH_SPACE      C                   const(x'1000')
     D AUTH_RETRIEVE   C                   const(x'0800')
     D AUTH_INSERT     C                   const(x'0400')
     D AUTH_DELETE     C                   const(x'0200')
     D AUTH_UPDATE     C                   const(x'0100')
     D AUTH_OWNER      C                   const(x'0080')
     D AUTH_EXCLUDED   C                   const(x'0040')
     D AUTH_LST_MGMT   C                   const(x'0020')
     D AUTH_EXECUTE    C                   const(x'0010')
     D AUTH_ALTER      C                   const(x'0008')
     D AUTH_REF        C                   const(x'0004')
     D AUTH_ALL        C                   const(x'FF1C')
     D AUTH_NONE       C                   const(x'0000')
      *
      *  QSYSINC/MIH.MIOBJTYP:  MI Object Type
     D MI_Program      C                   const(x'0201')
     D MI_Library      C                   const(x'0401')
     D MI_Usrspc       C                   const(x'1934')
     D MI_Usrq         C                   const(x'0A02')
     D MI_Usridx       C                   const(x'0E0A')
     D WLI_ALRTBL      C                   const(x'0E09')
     D WLI_AUTL        C                   const(x'1B01')
     D WLI_BLKSF       C                   const(x'1E05')
     D WLI_BNDDIR      C                   const(x'1937')
     D WLI_CFGL        C                   const(x'0E0D')
     D WLI_CHTFMT      C                   const(x'190D')
     D WLI_CLD         C                   const(x'190B')
     D WLI_CLS         C                   const(x'1904')
     D WLI_CMD         C                   const(x'1905')
     D WLI_CNNL        C                   const(x'1701')
     D WLI_COSD        C                   const(x'1401')
     D WLI_CRG         C                   const(x'192C')
     D WLI_CRQD        C                   const(x'0E0F')
     D WLI_CSI         C                   const(x'1935')
     D WLI_CSPMAP      C                   const(x'1922')
     D WLI_CSPTBL      C                   const(x'1923')
     D WLI_CTLD        C                   const(x'1201')
     D WLI_DDIR        C                   const(x'1F02')
     D WLI_DEVD        C                   const(x'1001')
     D WLI_DIR         C                   const(x'0C01')
     D WLI_DOC         C                   const(x'190E')
     D WLI_DSTMF       C                   const(x'1F01')
     D WLI_DTAARA      C                   const(x'190A')
     D WLI_DTADCT      C                   const(x'1920')
     D WLI_DTAQ        C                   const(x'0A01')
     D WLI_EDTD        C                   const(x'1908')
     D WLI_EXITRG      C                   const(x'1913')
     D WLI_FCT         C                   const(x'0E04')
     D WLI_FILE        C                   const(x'1901')
     D WLI_FLR         C                   const(x'1912')
     D WLI_FNTRSC      C                   const(x'1926')
     D WLI_FNTTBL      C                   const(x'192B')
     D WLI_FORMDF      C                   const(x'1928')
     D WLI_FTR         C                   const(x'0E0B')
     D WLI_GSS         C                   const(x'190C')
     D WLI_IGCDCT      C                   const(x'0E06')
     D WLI_IGCSRT      C                   const(x'191A')
     D WLI_IGCTBL      C                   const(x'1910')
     D WLI_IPXD        C                   const(x'191E')
     D WLI_JOBD        C                   const(x'1903')
     D WLI_JOBQ        C                   const(x'0E01')
     D WLI_JOBSCD      C                   const(x'0E0C')
     D WLI_JRN         C                   const(x'0901')
     D WLI_JRNRCV      C                   const(x'0701')
     D WLI_LIB         C                   const(x'0401')
     D WLI_LIND        C                   const(x'1101')
     D WLI_LOCALE      C                   const(x'1921')
     D WLI_MEDDFN      C                   const(x'191C')
     D WLI_MENU        C                   const(x'1916')
     D WLI_MGTCOL      C                   const(x'192D')
     D WLI_MODD        C                   const(x'1501')
     D WLI_MODULE      C                   const(x'0301')
     D WLI_MSGF        C                   const(x'0E03')
     D WLI_MSGQ        C                   const(x'1902')
     D WLI_M36         C                   const(x'1E04')
     D WLI_M36CFG      C                   const(x'1924')
     D WLI_NODL        C                   const(x'0E0E')
     D WLI_NTBD        C                   const(x'1914')
     D WLI_NWID        C                   const(x'1601')
     D WLI_NWSD        C                   const(x'1D01')
     D WLI_NODGRP      C                   const(x'192A')
     D WLI_OOPOOL      C                   const(x'2002')
     D WLI_OUTQ        C                   const(x'0E02')
     D WLI_OVL         C                   const(x'1929')
     D WLI_PAGDFN      C                   const(x'1936')
     D WLI_PAGSEG      C                   const(x'1927')
     D WLI_PDG         C                   const(x'1930')
     D WLI_PGM         C                   const(x'0201')
     D WLI_PNLGRP      C                   const(x'1915')
     D WLI_PRDAVL      C                   const(x'1933')
     D WLI_PRDDFN      C                   const(x'191B')
     D WLI_PRDLOD      C                   const(x'191D')
     D WLI_PSFCFG      C                   const(x'1925')
     D WLI_QMFORM      C                   const(x'1932')
     D WLI_QMQRY       C                   const(x'1931')
     D WLI_QRYDFN      C                   const(x'1911')
     D WLI_RCT         C                   const(x'0E08')
     D WLI_S36         C                   const(x'1919')
     D WLI_SBSD        C                   const(x'1909')
     D WLI_SCHIDX      C                   const(x'0E07')
     D WLI_SOCKET      C                   const(x'1E03')
     D WLI_SOMOBJ      C                   const(x'2001')
     D WLI_SPADCT      C                   const(x'1C01')
     D WLI_SQLPKG      C                   const(x'0202')
     D WLI_SQLUDT      C                   const(x'191F')
     D WLI_SRVPGM      C                   const(x'0203')
     D WLI_SSND        C                   const(x'0E05')
     D WLI_STMF        C                   const(x'1E01')
     D WLI_SVRSTG      C                   const(x'1917')
     D WLI_SYMLNK      C                   const(x'1E02')
     D WLI_TBL         C                   const(x'1906')
     D WLI_USRPRF      C                   const(x'0801')
     D WLI_USRIDX      C                   const(x'0E0A')
     D WLI_USRQ        C                   const(x'0A02')
     D WLI_USRSPC      C                   const(x'1934')
     D WLI_VLDL        C                   const(x'0E10')
     D WLI_WSCST       C                   const(x'1938')
      *
      *  Activate Bound Program, Returned value: Activation mark
     D QleActBndPgm    PR            10I 0 extproc('QleActBndPgm')
     D  i_pgmPtr                       *   const   procptr
     D  i_actMark                    10I 0 const   options(*omit)
     D  i_actInf                  32767A   const   options(*omit: *varsize)
     D  i_actInfLen                  10I 0 const   options(*omit)
     D  io_errCode                32767A           options(*omit: *varsize)
      *
      *  Type definitions
     D actInf_t        DS                  qualified      based(pDummy)
     D  bytRet                 1      4I 0
     D  bytAvl                 5      8I 0
     D  reserved_1             9     16A
     D  actGrpMark            17     20I 0
     D  actMark               21     24I 0
     D  reserved_2            25     31A
     D  flags                 32     32A
     D  reserved_3            33     48A
      *
      *  Get Export, Returned value: Exported item - PTR(OPN)
     D QleGetExp       PR              *   extproc('QleGetExp')
     D  i_actMark                    10I 0 const   options(*omit)
     D  i_expNum                     10I 0 const   options(*omit)
     D  i_expNameLen                 10I 0 const   options(*omit)
     D  i_expName                 32767A   const   options(*omit: *varsize)
     D  o_pExpItem                     *           options(*omit) procptr
     D  o_expItmType                 10I 0         options(*omit)
     D  io_errCode                32767A           options(*omit: *varsize)
      *
      *  Resolve System Pointer (RSLVSP)
     D rslvsp...
     D                 PR              *   extproc('rslvsp') procptr
     D  i_objtype                     5U 0 value
     D  i_obj                          *   value   options(*string)
     D  i_lib                          *   value   options(*string)
     D  i_auth                        5U 0 value
      *
      * ------------------------------------
      *  Type Definitions
      * ------------------------------------
      *
     D actSrvPgm_t     DS                  qualified      based(pDummy)
     D  procptr                        *   procptr
     D  actMark                      10I 0
     D  name                         10A
     D  lib                          10A
      *
     D actProc_t       DS                  qualified      based(pDummy)
     D  procptr                        *   procptr
     D  actMark                      10I 0
     D  name                        256A   varying
     D  srvPgm                       10A
     D  lib                          10A
      *
     D errCode_t       DS                  qualified           based(pDummy)
     D  bytPrv                       10I 0
     D  bytAvl                       10I 0
     D  excID                         7A
     D  reserved_1                    1A
     D  excDta                      256A
      *
      * ------------------------------------
      *  Imported prototypes
      * ------------------------------------
      /DEFINE LOGGER_STUB
      /COPY QLOG4RPG,PLOG4RPG
      *
      /UNDEFINE PLOG4RPG
      /UNDEFINE LOGGER_STUB
      /COPY QLOG4RPG,PLOG4RPG
      *
      * ------------------------------------
      *  Exported prototypes
      * ------------------------------------
      /DEFINE LOGGER_STUB
      /COPY QLOG4RPG,PLOG4RPG00                    Logger Stub
      *
      * ------------------------------------
      *  Internal prototypes
      * ------------------------------------
     D getProcPtrByName...
     D                 PR              *   procptr
     D  i_proc                      256A   const
     D  i_actSrvPgm                        const  likeds(actSrvPgm_t)
      *
     D activateSrvPgm...
     D                 PR                         likeds(actSrvPgm_t )
     D  i_srvPgm                     10A   const
     D  i_lib                        10A   const  options(*nopass: *omit)
      *
     D setStubOfs...
     D                 PR
     D                                     extproc(
     D                                     g_procptr.setStubOfs
     D                                     )
     D  i_stubOfs                     3I 0 const
      *
      * ------------------------------------
      *  Global fields & constants
      * ------------------------------------
      *
     D g_isLoaded      S               N   inz(cFalse)
      *
     D g_procptr       DS                  qualified
     D  setStubOfs                     *   procptr
     D  setLogging                     *   procptr
     D  isLogging                      *   procptr
     D  getRootLogger                  *   procptr
     D  getLogger                      *   procptr
     D  debug                          *   procptr
     D  debugMsg                       *   procptr
     D  isDebugEnabled...
     D                                 *   procptr
     D  info                           *   procptr
     D  infoMsg                        *   procptr
     D  isInfoEnabled                  *   procptr
     D  warn                           *   procptr
     D  warnMsg                        *   procptr
     D  isWarnEnabled                  *   procptr
     D  error                          *   procptr
     D  errorMsg                       *   procptr
     D  isErrorEnabled...
     D                                 *   procptr
     D  fatal                          *   procptr
     D  fatalMsg                       *   procptr
     D  isFatalEnabled...
     D                                 *   procptr
     D  forcedLog                      *   procptr
     D  forcedLogMsg                   *   procptr
     D  getName                        *   procptr
     D  isNull                         *   procptr
     D  null                           *   procptr
     D  setLevel                       *   procptr
     D  setInternalDebugging...
     D                                 *   procptr
     D  getInternalDebugMode...
     D                                 *   procptr
     D  getInternalDebugOutput...
     D                                 *   procptr
     D  loadDefaultConfiguration...
     D                                 *   procptr
     D  loadPropertiesConfiguration...
     D                                 *   procptr
     D  loadAndWatchPropertiesConfiguration...
     D                                 *   procptr
     D  clearConfiguration...
     D                                 *   procptr
     D  Layout_new...
     D                                 *   procptr
     D  Layout_null...
     D                                 *   procptr
     D  Appender_new...
     D                                 *   procptr
     D  Appender_null...
     D                                 *   procptr
     D  Appender_setLayout...
     D                                 *   procptr
     D  Appender_setFilter...
     D                                 *   procptr
     D  Logger_addAppender...
     D                                 *   procptr
     D  Filter_new...
     D                                 *   procptr
     D  Filter_null...
     D                                 *   procptr
     D  Filter_setNext...
     D                                 *   procptr
      *
      *=========================================================================
      *  Loads the LOG4RPG service program and forwards all requests to it.
      *=========================================================================
     P LoggerStub_loadSrvPgm...
     P                 B                   export
      *
     D LoggerStub_loadSrvPgm...
     D                 PI
      *
      *  Helper fields
     D x               S             10I 0 inz
     D actSrvPgm       DS                  likeds(actSrvPgm_t ) static inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         for x = 1 to 2;
            if (actSrvPgm.procptr = *NULL);
               actSrvPgm = activateSrvPgm('LOG4RPG': '*LIBL');
               if (actSrvPgm.procptr <> *NULL);
                  g_procptr.setStubOfs =
                     getProcPtrByName(
                        'LOG4RPG01_setStubOfs Internal Use Only'
                        : actSrvPgm);
               else;
                  return;
               endif;
            endif;

            monitor;
               setStubOfs(1);
               leave;
            on-error;
               actSrvPgm.procptr = *NULL;
            endmon;
         endfor;

         g_procptr.setLogging =
            getProcPtrByName('LOG4RPG01_Logger_setLogging' : actSrvPgm);
         g_procptr.isLogging  =
            getProcPtrByName('LOG4RPG01_Logger_isLogging'  : actSrvPgm);

         g_procptr.getRootLogger =
            getProcPtrByName('LOG4RPG01_Logger_getRootLogger': actSrvPgm);
         g_procptr.getLogger     =
            getProcPtrByName('LOG4RPG01_Logger_getLogger'    : actSrvPgm);

         g_procptr.debug    =
            getProcPtrByName('LOG4RPG01_Logger_debug'    : actSrvPgm);
         g_procptr.debugMsg =
            getProcPtrByName('LOG4RPG01_Logger_debugMsg' : actSrvPgm);
         g_procptr.isDebugEnabled =
            getProcPtrByName('LOG4RPG01_Logger_isDebugEnabled' : actSrvPgm);

         g_procptr.info     =
            getProcPtrByName('LOG4RPG01_Logger_info'     : actSrvPgm);
         g_procptr.infoMsg  =
            getProcPtrByName('LOG4RPG01_Logger_infoMsg'  : actSrvPgm);
         g_procptr.isInfoEnabled =
            getProcPtrByName('LOG4RPG01_Logger_isInfoEnabled' : actSrvPgm);

         g_procptr.warn     =
            getProcPtrByName('LOG4RPG01_Logger_warn'     : actSrvPgm);
         g_procptr.warnMsg  =
            getProcPtrByName('LOG4RPG01_Logger_warnMsg'  : actSrvPgm);
         g_procptr.isWarnEnabled =
            getProcPtrByName('LOG4RPG01_Logger_isWarnEnabled' : actSrvPgm);

         g_procptr.error    =
            getProcPtrByName('LOG4RPG01_Logger_error'    : actSrvPgm);
         g_procptr.errorMsg =
            getProcPtrByName('LOG4RPG01_Logger_errorMsg' : actSrvPgm);
         g_procptr.isErrorEnabled =
            getProcPtrByName('LOG4RPG01_Logger_isErrorEnabled' : actSrvPgm);

         g_procptr.fatal    =
            getProcPtrByName('LOG4RPG01_Logger_fatal'    : actSrvPgm);
         g_procptr.fatalMsg =
            getProcPtrByName('LOG4RPG01_Logger_fatalMsg' : actSrvPgm);
         g_procptr.isFatalEnabled =
            getProcPtrByName('LOG4RPG01_Logger_isFatalEnabled' : actSrvPgm);

         g_procptr.forcedLog    =
            getProcPtrByName('LOG4RPG01_Logger_forcedLog'    : actSrvPgm);
         g_procptr.forcedLogMsg =
            getProcPtrByName('LOG4RPG01_Logger_forcedLogMsg' : actSrvPgm);

         g_procptr.getName      =
            getProcPtrByName('LOG4RPG01_Logger_getName'      : actSrvPgm);

         g_procptr.isNull =
            getProcPtrByName('LOG4RPG01_Logger_isNull' : actSrvPgm);
         g_procptr.null   =
            getProcPtrByName('LOG4RPG01_Logger_null'   : actSrvPgm);

         g_procptr.setLevel =
            getProcPtrByName('LOG4RPG01_Logger_setLevel' : actSrvPgm);

         g_procptr.setInternalDebugging =
            getProcPtrByName(
               'LOG4RPG01_Logger_setInternalDebugging'
               : actSrvPgm);
         g_procptr.getInternalDebugMode =
            getProcPtrByName(
               'LOG4RPG01_Logger_getInternalDebugMode'
               : actSrvPgm);
         g_procptr.getInternalDebugOutput =
            getProcPtrByName(
               'LOG4RPG01_Logger_getInternalDebugOutput'
               : actSrvPgm);

         g_procptr.loadDefaultConfiguration =
            getProcPtrByName(
               'LOG4RPG08_Configurator_loadDefaultConfiguration'
               : actSrvPgm);
         g_procptr.loadPropertiesConfiguration =
            getProcPtrByName(
               'LOG4RPG08_Configurator_loadPropertiesConfiguration'
               : actSrvPgm);
         g_procptr.loadAndWatchPropertiesConfiguration =
            getProcPtrByName(
               'LOG4RPG08_Configurator_loadAndWatchPropertiesConfiguration'
               : actSrvPgm);
         g_procptr.clearConfiguration =
            getProcPtrByName(
               'LOG4RPG08_Configurator_clearConfiguration'
               : actSrvPgm);
         g_procptr.Layout_new =
            getProcPtrByName(
               'LOG4RPG11_Layout_new'
               : actSrvPgm);
         g_procptr.Layout_null =
            getProcPtrByName(
               'LOG4RPG11_Layout_null'
               : actSrvPgm);
         g_procptr.Appender_new =
            getProcPtrByName(
               'LOG4RPG03_Appender_new'
               : actSrvPgm);
         g_procptr.Appender_null =
            getProcPtrByName(
               'LOG4RPG03_Appender_null'
               : actSrvPgm);
         g_procptr.Appender_setLayout =
            getProcPtrByName(
               'LOG4RPG03_Appender_setLayout'
               : actSrvPgm);
         g_procptr.Appender_setFilter =
            getProcPtrByName(
               'LOG4RPG03_Appender_setFilter'
               : actSrvPgm);
         g_procptr.Logger_addAppender =
            getProcPtrByName(
               'LOG4RPG01_Logger_addAppender'
               : actSrvPgm);
         g_procptr.Filter_new =
            getProcPtrByName(
               'LOG4RPG17_Filter_new'
               : actSrvPgm);
         g_procptr.Filter_null =
            getProcPtrByName(
               'LOG4RPG17_Filter_null'
               : actSrvPgm);
         g_procptr.Filter_setNext =
            getProcPtrByName(
               'LOG4RPG17_Filter_setNext'
               : actSrvPgm);

         g_isLoaded = cTrue;

         return;

      /END-FREE
      *
     P LoggerStub_loadSrvPgm...
     P                 E
      *
      *=========================================================================
      *  Enables / Disables LOG4RPG.
      *=========================================================================
     P Logger_setLogging...
     P                 B                   export
      *
     D Logger_setLogging...
     D                 PI              N
     D  i_isLogging                    N   const
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return cFalse;
         endif;

         return Impl_Logger_setLogging(i_isLogging);

      /END-FREE
      *
     P Logger_setLogging...
     P                 E
      *
      *=========================================================================
      *  Returns cTRUE if logging is enabled.
      *=========================================================================
     P Logger_isLogging...
     P                 B                   export
      *
     D Logger_isLogging...
     D                 PI              N
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return cFalse;
         endif;

         return Impl_Logger_isLogging();

      /END-FREE
      *
     P Logger_isLogging...
     P                 E
      *
      *=========================================================================
      *  Returns the root logger.
      *=========================================================================
     P Logger_getRootLogger...
     P                 B                   export
      *
     D Logger_getRootLogger...
     D                 PI                         like(LOG4RPG_hLogger_t   )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return *NULL;
         endif;

         return Impl_Logger_getRootLogger();

      /END-FREE
      *
     P Logger_getRootLogger...
     P                 E
      *
      *=========================================================================
      *  Returns a new logger named as the specified name.
      *=========================================================================
     P Logger_getLogger...
     P                 B                   export
      *
     D Logger_getLogger...
     D                 PI                         like(LOG4RPG_hLogger_t   )
     D  i_logName                          const  like(LOG4RPG_loggerName_t)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return *NULL;
         endif;

         return Impl_Logger_getLogger(i_logName);

      /END-FREE
      *
     P Logger_getLogger...
     P                 E
      *
      *=========================================================================
      *  Logs a DEBUG statement.
      *=========================================================================
     P Logger_debug...
     P                 B                   export
      *
     D Logger_debug...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_text                             const  like(LOG4RPG_text_t    )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return;
         endif;

         Impl_Logger_debug(i_hLogger: i_text);

         return;

      /END-FREE
      *
     P Logger_debug...
     P                 E
      *
      *=========================================================================
      *  Logs a DEBUG message.
      *=========================================================================
     P Logger_debugMsg...
     P                 B                   export
      *
     D Logger_debugMsg...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_msg                              const  likeds(LOG4RPG_msg_t   )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return;
         endif;

         Impl_Logger_debugMsg(i_hLogger: i_msg);

         return;

      /END-FREE
      *
     P Logger_debugMsg...
     P                 E
      *
      *=========================================================================
      *  Returns cTrue if 'DEBUG' log events are logged.
      *=========================================================================
     P Logger_isDebugEnabled...
     P                 B                   export
      *
     D Logger_isDebugEnabled...
     D                 PI              N
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return cFalse;
         endif;

         return Impl_Logger_isDebugEnabled(i_hLogger);

      /END-FREE
      *
     P Logger_isDebugEnabled...
     P                 E
      *
      *=========================================================================
      *  Logs an INFO statement.
      *=========================================================================
     P Logger_info...
     P                 B                   export
      *
     D Logger_info...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_text                             const  like(LOG4RPG_text_t    )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return;
         endif;

         Impl_Logger_info(i_hLogger: i_text);

         return;

      /END-FREE
      *
     P Logger_info...
     P                 E
      *
      *=========================================================================
      *  Logs an INFO message.
      *=========================================================================
     P Logger_infoMsg...
     P                 B                   export
      *
     D Logger_infoMsg...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_msg                              const  likeds(LOG4RPG_msg_t   )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return;
         endif;

         Impl_Logger_infoMsg(i_hLogger: i_msg);

         return;

      /END-FREE
      *
     P Logger_infoMsg...
     P                 E
      *
      *=========================================================================
      *  Returns cTrue if 'INFO' log events are logged.
      *  (Including DEBUG log events)
      *=========================================================================
     P Logger_isInfoEnabled...
     P                 B                   export
      *
     D Logger_isInfoEnabled...
     D                 PI              N
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return cFalse;
         endif;

         return Impl_Logger_isInfoEnabled(i_hLogger);

      /END-FREE
      *
     P Logger_isInfoEnabled...
     P                 E
      *
      *=========================================================================
      *  Logs a WARN statement.
      *=========================================================================
     P Logger_warn...
     P                 B                   export
      *
     D Logger_warn...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_text                             const  like(LOG4RPG_text_t    )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return;
         endif;

         Impl_Logger_warn(i_hLogger: i_text);

         return;

      /END-FREE
      *
     P Logger_warn...
     P                 E
      *
      *=========================================================================
      *  Logs a WARN message.
      *=========================================================================
     P Logger_warnMsg...
     P                 B                   export
      *
     D Logger_warnMsg...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_msg                              const  likeds(LOG4RPG_msg_t   )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return;
         endif;

         Impl_Logger_warnMsg(i_hLogger: i_msg);

         return;

      /END-FREE
      *
     P Logger_warnMsg...
     P                 E
      *
      *=========================================================================
      *  Returns cTrue if 'WARN' log events are logged.
      *  (Including INFO and DEBUG log events)
      *=========================================================================
     P Logger_isWarnEnabled...
     P                 B                   export
      *
     D Logger_isWarnEnabled...
     D                 PI              N
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return cFalse;
         endif;

         return Impl_Logger_isWarnEnabled(i_hLogger);

      /END-FREE
      *
     P Logger_isWarnEnabled...
     P                 E
      *
      *=========================================================================
      *  Logs an ERROR statement.
      *=========================================================================
     P Logger_error...
     P                 B                   export
      *
     D Logger_error...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_text                             const  like(LOG4RPG_text_t    )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return;
         endif;

         Impl_Logger_error(i_hLogger: i_text);

         return;

      /END-FREE
      *
     P Logger_error...
     P                 E
      *
      *=========================================================================
      *  Logs an ERROR message.
      *=========================================================================
     P Logger_errorMsg...
     P                 B                   export
      *
     D Logger_errorMsg...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_msg                              const  likeds(LOG4RPG_msg_t   )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return;
         endif;

         Impl_Logger_errorMsg(i_hLogger: i_msg);

         return;

      /END-FREE
      *
     P Logger_errorMsg...
     P                 E
      *
      *=========================================================================
      *  Returns cTrue if 'ERROR' log events are logged.
      *  (Including WARN, INFO and DEBUG log events)
      *=========================================================================
     P Logger_isErrorEnabled...
     P                 B                   export
      *
     D Logger_isErrorEnabled...
     D                 PI              N
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return cFalse;
         endif;

         return Impl_Logger_isErrorEnabled(i_hLogger);

      /END-FREE
      *
     P Logger_isErrorEnabled...
     P                 E
      *
      *=========================================================================
      *  Logs a FATAL error statement.
      *=========================================================================
     P Logger_fatal...
     P                 B                   export
      *
     D Logger_fatal...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_text                             const  like(LOG4RPG_text_t    )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return;
         endif;

         Impl_Logger_fatal(i_hLogger: i_text);

         return;

      /END-FREE
      *
     P Logger_fatal...
     P                 E
      *
      *=========================================================================
      *  Logs a FATAL error message.
      *=========================================================================
     P Logger_fatalMsg...
     P                 B                   export
      *
     D Logger_fatalMsg...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_msg                              const  likeds(LOG4RPG_msg_t   )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return;
         endif;

         Impl_Logger_fatalMsg(i_hLogger: i_msg);

         return;

      /END-FREE
      *
     P Logger_fatalMsg...
     P                 E
      *
      *=========================================================================
      *  Returns cTrue if 'FATAL' log events are logged.
      *  (Including ERROR, WARN, INFO and DEBUG log events)
      *=========================================================================
     P Logger_isFatalEnabled...
     P                 B                   export
      *
     D Logger_isFatalEnabled...
     D                 PI              N
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return cFalse;
         endif;

         return Impl_Logger_isFatalEnabled(i_hLogger);

      /END-FREE
      *
     P Logger_isFatalEnabled...
     P                 E
      *
      *=========================================================================
      *  Logs the specified statement without further checking.
      *=========================================================================
     P Logger_forcedLog...
     P                 B                   export
      *
     D Logger_forcedLog...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_level                            const  like(LOG4RPG_level_t   )
     D  i_text                             const  like(LOG4RPG_text_t    )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return;
         endif;

         Impl_Logger_forcedLog(i_hLogger: i_level: i_text);

         return;

      /END-FREE
      *
     P Logger_forcedLog...
     P                 E
      *
      *=========================================================================
      *  Logs the specified message without further checking.
      *=========================================================================
     P Logger_forcedLogMsg...
     P                 B                   export
      *
     D Logger_forcedLogMsg...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_level                            const  like(LOG4RPG_level_t   )
     D  i_msg                              const  likeds(LOG4RPG_msg_t   )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return;
         endif;

         Impl_Logger_forcedLogMsg(i_hLogger: i_level: i_msg);

         return;

      /END-FREE
      *
     P Logger_forcedLogMsg...
     P                 E
      *
      *=========================================================================
      *  Returns the name of the specified logger.          .
      *=========================================================================
     P Logger_getName...
     P                 B                   export
      *
     D Logger_getName...
     D                 PI                         like(LOG4RPG_loggerName_t)
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t   )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return '';
         endif;

         return Impl_Logger_getName(i_hLogger);

      /END-FREE
      *
     P Logger_getName...
     P                 E
      *
      *=========================================================================
      *  Returns cTRUE if the specified logger handle is NULL.
      *=========================================================================
     P Logger_isNull...
     P                 B                   export
      *
     D Logger_isNull...
     D                 PI              N
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return cTrue;
         endif;

         return Impl_Logger_isNull(i_hLogger);

      /END-FREE
      *
     P Logger_isNull...
     P                 E
      *
      *=========================================================================
      *  Returns a NULL handle.
      *=========================================================================
     P Logger_null...
     P                 B                   export
      *
     D Logger_null...
     D                 PI                         like(LOG4RPG_hLogger_t )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return *NULL;
         endif;

         return Impl_Logger_null();

      /END-FREE
      *
     P Logger_null...
     P                 E
      *
      *=========================================================================
      *  Sets the logging level of the specified logger.
      *=========================================================================
     P Logger_setLevel...
     P                 B                   export
      *
     D Logger_setLevel...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_level                            const  like(LOG4RPG_level_t   )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return;
         endif;

         Impl_Logger_setLevel(i_hLogger: i_level);

         return;

      /END-FREE
      *
     P Logger_setLevel...
     P                 E
      *
      *=========================================================================
      *  Allows to enable/disable log4rpg internal logging.
      *=========================================================================
     P Logger_setInternalDebugging...
     P                 B                   export
      *
     D Logger_setInternalDebugging...
     D                 PI
     D  i_debugMode                        const  like(LOG4RPG_debugMode_t  )
     D  i_output                           const  like(LOG4RPG_debugOutput_t)
     D                                            options(*nopass)
      *
      *  Parameter positions
     D p_output        C                   2
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return;
         endif;

         if (%parms() >= p_output);
            Impl_Logger_setInternalDebugging(i_debugMode: i_output);
         else;
            Impl_Logger_setInternalDebugging(i_debugMode);
         endif;

         return;

      /END-FREE
      *
     P Logger_setInternalDebugging...
     P                 E
      *
      *=========================================================================
      *  Returns the internal debug mode.
      *=========================================================================
     P Logger_getInternalDebugMode...
     P                 B                   export
      *
     D Logger_getInternalDebugMode...
     D                 PI                         like(LOG4RPG_debugMode_t  )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return '';
         endif;

         return Impl_Logger_getInternalDebugMode();

      /END-FREE
      *
     P Logger_getInternalDebugMode...
     P                 E
      *
      *=========================================================================
      *  Returns the target for internal log events.
      *=========================================================================
     P Logger_getInternalDebugOutput...
     P                 B                   export
      *
     D Logger_getInternalDebugOutput...
     D                 PI                         like(LOG4RPG_debugOutput_t)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return '';
         endif;

         return Impl_Logger_getInternalDebugOutput();

      /END-FREE
      *
     P Logger_getInternalDebugOutput...
     P                 E
      *
      *=========================================================================
      *  Configures LOG4RPG using a default configuration.
      *=========================================================================
     P Configurator_loadDefaultConfiguration...
     P                 B                   export
      *
     D Configurator_loadDefaultConfiguration...
     D                 PI              N
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return cFalse;
         endif;

         return Impl_Configurator_loadDefaultConfiguration();

      /END-FREE
      *
     P Configurator_loadDefaultConfiguration...
     P                 E
      *
      *=========================================================================
      *  Configures LOG4RPG from a properties file.
      *=========================================================================
     P Configurator_loadPropertiesConfiguration...
     P                 B                   export
      *
     D Configurator_loadPropertiesConfiguration...
     D                 PI              N
     D  i_path                             const  like(LOG4RPG_path_t   )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return cFalse;
         endif;

         return Impl_Configurator_loadPropertiesConfiguration(i_path);

      /END-FREE
      *
     P Configurator_loadPropertiesConfiguration...
     P                 E
      *
      *=========================================================================
      *  Configures LOG4RPG from a properties file. Watches the properties
      *  file for changes and reloads the configuration on changes.
      *=========================================================================
     P Configurator_loadAndWatchPropertiesConfiguration...
     P                 B                   export
      *
     D Configurator_loadAndWatchPropertiesConfiguration...
     D                 PI              N
     D  i_path                             const  like(LOG4RPG_path_t   )
     D  i_waitMinutes                10I 0 const  options(*nopass)
     D  i_unit                       10A   const  options(*nopass)
      *
      *  Parameter positions
     D p_waitMinutes   C                   2
     D p_unit          C                   3
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return cFalse;
         endif;

         select;
         when %parms() >= p_unit;         // 3 Parameters
            return Impl_Configurator_loadAndWatchPropertiesConfiguration(
                                                 i_path: i_waitMinutes: i_unit);
         when %parms() >= p_waitMinutes;  // 2 parameters
            return Impl_Configurator_loadAndWatchPropertiesConfiguration(
                                                 i_path: i_waitMinutes);
         other;
            return Impl_Configurator_loadAndWatchPropertiesConfiguration(
                                                 i_path);
         endsl;

      /END-FREE
      *
     P Configurator_loadAndWatchPropertiesConfiguration...
     P                 E
      *
      *=========================================================================
      *  Clears all configuration data.
      *=========================================================================
     P Configurator_clearConfiguration...
     P                 B                   export
      *
     D Configurator_clearConfiguration...
     D                 PI
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return;
         endif;

         Impl_Configurator_clearConfiguration();

         return;

      /END-FREE
      *
     P Configurator_clearConfiguration...
     P                 E
      *
      *=========================================================================
      *  Creates a new layout.
      *=========================================================================
     P Layout_new...
     P                 B                   export
      *
     D Layout_new...
     D                 PI                         like(LOG4RPG_pLayout_t       )
     D  i_layoutImpl                       const  like(LOG4RPG_implClass_t     )
     D  i_pPropString                  *   const  options(*nopass:
     D                                                    *omit  : *string)
      *
      *  Parameter positions
     D p_pPropString   C                   2
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return *NULL;
         endif;

         if (%parms() >= p_pPropString);
            return Impl_Layout_new(i_layoutImpl: i_pPropString);
         else;
            return Impl_Layout_new(i_layoutImpl);
         endif;

      /END-FREE
      *
     P Layout_new...
     P                 E
      *
      *=========================================================================
      *  Returns a NULL layout.
      *=========================================================================
     P Layout_null...
     P                 B                   export
      *
     D Layout_null...
     D                 PI                         like(LOG4RPG_pLayout_t       )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return *NULL;
         endif;

         return Impl_Layout_null();

      /END-FREE
      *
     P Layout_null...
     P                 E
      *
      *=========================================================================
      *  Creates a new appender.
      *=========================================================================
     P Appender_new...
     P                 B                   export
      *
     D Appender_new...
     D                 PI                         like(LOG4RPG_pAppender_t     )
     D  i_appName                          const  like(LOG4RPG_appenderName_t  )
     D  i_appImpl                          const  like(LOG4RPG_implClass_t     )
     D  i_pPropString                  *   const  options(*nopass:
     D                                                    *omit  : *string)
      *
      *  Parameter positions
     D p_pPropString   C                   3
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return *NULL;
         endif;

         if (%parms() >= p_pPropString);
            return Impl_Appender_new(i_appName: i_appImpl: i_pPropString);
         else;
            return Impl_Appender_new(i_appName: i_appImpl);
         endif;

      /END-FREE
      *
     P Appender_new...
     P                 E
      *
      *=========================================================================
      *  Returns a NULL appender.
      *=========================================================================
     P Appender_null...
     P                 B                   export
      *
     D Appender_null...
     D                 PI                         like(LOG4RPG_pAppender_t     )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return *NULL;
         endif;

         return Impl_Appender_null();

      /END-FREE
      *
     P Appender_null...
     P                 E
      *
      *=========================================================================
      *  Sets the layout for the specified appender.
      *=========================================================================
     P Appender_setLayout...
     P                 B                   export
      *
     D Appender_setLayout...
     D                 PI              N
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t     )
     D  i_pLayout                          const  like(LOG4RPG_pLayout_t       )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return cFalse;
         endif;

         return Impl_Appender_setLayout(i_pAppender: i_pLayout);

      /END-FREE
      *
     P Appender_setLayout...
     P                 E
      *
      *=========================================================================
      *  Sets the filter for the specified appender.
      *=========================================================================
     P Appender_setFilter...
     P                 B                   export
      *
     D Appender_setFilter...
     D                 PI              N
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t     )
     D  i_pFilter                          const  like(LOG4RPG_pFilter_t       )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return cFalse;
         endif;

         return Impl_Appender_setFilter(i_pAppender: i_pFilter);

      /END-FREE
      *
     P Appender_setFilter...
     P                 E
      *
      *=========================================================================
      *  Sets the filter for the specified appender.
      *=========================================================================
     P Logger_addAppender...
     P                 B                   export
      *
     D Logger_addAppender...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t       )
     D  i_hAppender                        const  like(LOG4RPG_pAppender_t     )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return;
         endif;

         Impl_Logger_addAppender(i_hLogger: i_hAppender);

         return;

      /END-FREE
      *
     P Logger_addAppender...
     P                 E
      *
      *=========================================================================
      *  Creates a new filter.
      *=========================================================================
     P Filter_new...
     P                 B                   export
      *
     D Filter_new...
     D                 PI                         like(LOG4RPG_pFilter_t       )
     D  i_fltName                          const  like(LOG4RPG_filterName_t    )
     D  i_fltImpl                          const  like(LOG4RPG_implClass_t     )
     D  i_pPropString                  *   const  options(*nopass:
     D                                                    *omit  : *string)
      *
      *  Parameter positions
     D p_pPropString   C                   3
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return *NULL;
         endif;

         if (%parms() >= p_pPropString);
            return Impl_Filter_new(i_fltName: i_fltImpl: i_pPropString);
         else;
            return Impl_Filter_new(i_fltName: i_fltImpl);
         endif;

      /END-FREE
      *
     P Filter_new...
     P                 E
      *
      *=========================================================================
      *  Returns a NULL filter.
      *=========================================================================
     P Filter_null...
     P                 B                   export
      *
     D Filter_null...
     D                 PI                         like(LOG4RPG_pFilter_t       )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return *NULL;
         endif;

         return Impl_Filter_null();

      /END-FREE
      *
     P Filter_null...
     P                 E
      *
      *=========================================================================
      *  Sets the next filter of the filter chain.
      *=========================================================================
     P Filter_setNext...
     P                 B                   export
      *
     D Filter_setNext...
     D                 PI
     D  i_pFilter                          const  like(LOG4RPG_pFilter_t     )
     D  i_pNextFilter                      const  like(LOG4RPG_pFilter_t     )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not g_isLoaded);
            return;
         endif;

         Impl_Filter_setNext(i_pFilter: i_pNextFilter);

         return;

      /END-FREE
      *
     P Filter_setNext...
     P                 E
      *
      *=========================================================================
    R *  *** private ***
      *  Activates a service program.
      *=========================================================================
      *  Parameters:
      *   i_srvPgm      - The name of the service program.
      *   i_lib         - The library that contains the service program.
      *                   Default:        *LIBL
      *   o_msg         - The API error message.
      *
      *  Returns:
      *   actSrvPgm     - Returns a structure that contains the
      *                   system pointer to the service program and
      *                   the activation mark.
      *=========================================================================
      *
     P activateSrvPgm...
     P                 B                   export
      *
     D activateSrvPgm...
     D                 PI                         likeds(actSrvPgm_t )
     D  i_srvPgm                     10A   const
     D  i_lib                        10A   const  options(*nopass: *omit)
      *
      *  Return value
     D actSrvPgm       DS                  likeds(actSrvPgm_t ) inz
      *
      *  Parameter positions
     D p_lib           C                   const(2)
      *
      *  Optional parameter fields
     D lib             S                   like(i_lib       ) inz
      *
      *  Local fields
     D actMark         S                   like(actInf_t.actMark ) inz
     D pSrvPgm         S               *   inz  procptr
     D actInf          DS                  likeds(actInf_t       ) inz
     D errCode         DS                  likeds(errCode_t      ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Initialize return value
         clear actSrvPgm;

         // Process optional parameter values ...
         // ... i_lib
         if (%parms() >= p_lib and %addr(i_lib) <> *NULL);
            lib = i_lib;
         else;
            lib = '*LIBL';
         endif;

         // Get system pointer
         monitor;
            pSrvPgm = rslvsp(WLI_SRVPGM: i_srvPgm: lib: AUTH_OBJ_MGMT);
         on-error;
            pSrvPgm = *NULL;
         endmon;

         // Actiate service program
         if (pSrvPgm <> *NULL);
            clear errCode;
            errCode.bytPrv = %size(errCode);
            QleActBndPgm(pSrvPgm: actMark: actInf: %size(actInf): errCode);

            if (errCode.bytAvl <> 0);
               pSrvPgm = *NULL;
            endif;
         endif;

         if (pSrvPgm <> *NULL);
            actSrvPgm.procptr = pSrvPgm;
            actSrvPgm.actMark = actMark;
            actSrvPgm.name    = i_srvPgm;
            actSrvPgm.lib     = lib;
         endif;

         return actSrvPgm;

      /END-FREE
      *
     P activateSrvPgm...
     P                 E
      *
      *=========================================================================
    R *  *** private ***
      *  Gets a procedure pointer by name.
      *=========================================================================
      *  Parameters:
      *   i_srvPgm      - The name of the service program.
      *   i_lib         - The library that contains the service program.
      *                   Default:        *LIBL
      *   i_proc        - The name of the procedure.
      *   o_msg         - The API error message.
      *
      *  Returns:
      *   procptr       - Returns a pointer to the procedure on success
      *                   else *NULL.
      *=========================================================================
      *
     P getProcPtrByName...
     P                 B
      *
     D getProcPtrByName...
     D                 PI              *   procptr
     D  i_proc                      256A   const
     D  i_actSrvPgm                        const  likeds(actSrvPgm_t)
      *
      *  Return value
     D actProc         DS                  likeds(actProc_t ) inz
      *
      *  Local fields
     D typeExpItem     S             10I 0 inz
     D pExpItem        S               *   inz  procptr
     D errCode         DS                  likeds(errCode_t      ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Initialize return value
         clear actProc;

         // Get procedure pointer by name
         clear errCode;
         errCode.bytPrv = %size(errCode);
         QleGetExp(i_actSrvPgm.actMark: *omit: %len(%trimR(i_proc))
                   : %trimR(i_proc): pExpItem: typeExpItem: errCode);
         if (errCode.bytAvl <> 0);
            pExpItem = *NULL;
         endif;

         if (pExpItem <> *NULL);
            actproc.procptr = pExpItem;
            actproc.actMark = i_actSrvPgm.actMark;
            actproc.name    = i_proc;
            actproc.srvPgm  = i_actSrvPgm.name;
            actproc.lib     = i_actSrvPgm.lib;
         endif;

         return actproc.procptr;

      /END-FREE
      *
     P getProcPtrByName...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG01  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG01 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: Logger                  "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Logger                                           *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  13.06.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *  17.10.2006  Th.Raddatz    Fixed that Logger_addAppender() failed   *
      *                            when attempting to add an appender to    *
      *                            the appender list.                       *
      *                                                                     *
      *  25.10.2006  Th.Raddatz    Replaced data structure logEvent with    *
      *                            object LogEvent.                         *
      *                                                                     *
      *  27.10.2006  Th.Raddatz    Added feature to completely enable/      *
      *                            disable Log4rpg. Logger_setLogging().    *
      *                                                                     *
      *  15.11.2006  Th.Raddatz    Added procedures:                        *
      *                            Logger_getInternalDebugMode()            *
      *                            Logger_getInternalDebugOutput()          *
      *                                                                     *
      *  11.12.2007  Th.Raddatz    Fixed RNX0100 (Length or start position  *
      *                            is out of range) error in                *
      *                            logLoggingEvent() when the message       *
      *                            description could be retrieved.          *
      *                                                                     *
      *  18.04.2008  Th.Raddatz    Added support to reload the configuration*
      *                            data every n minutes:                    *
      *                            Configurator_checkAndReload...()         *
      *                                                                     *
      *  13.06.2008  Th.Raddatz    Changed Log4rpg to log empty messages.   *
      *                            Enhanced the Log4rpg stub module         *
      *                            to optionally load the Log4rpg service   *
      *                            program and forward procedure calls      *
      *                            to it. Added setStubOfs() to let the     *
      *                            stub module set an offset to let         *
      *                            f_caller() skip the stub module.         *
      *                                                                     *
      *  20.06.2008  Th.Raddatz    Added procedure Logger_resetLevel().     *
      *                                                                     *
      *  15.09.2008  Th.Raddatz    Changed parameter i_appName of procedure *
      *                            Logger_addAppender() to i_pAppender.     *
      *                                                                     *
      *  20.05.2011  Th.Raddatz    Fixed problem that the following         *
      *                            procedures did not return a return value *
      *                            if logging was disabled:                 *
      *                               Logger_getInternalDebugMode()         *
      *                               LogLog_getInternalDebugOutput()       *
      *                                                                     *
      *  29.06.2011  Th.Raddatz    Added procedures:                        *
      *                               Logger_isDebugEnabled()               *
      *                               Logger_isInfoEnabled()                *
      *                               Logger_isWarnEnabled()                *
      *                               Logger_isErrorEnabled()               *
      *                               Logger_isFatalEnabled()               *
      *                                                                     *
      *  15.07.2011  Th.Raddatz    Changed the logging procedures to use    *
      *                            the Logger_is*Enabled() procedures       *
      *                            rather than checking all the stuff by    *
      *                            themselves.                              *
      *                                                                     *
      *  15.07.2011  Th.Raddatz    Added call of Repository_dumpHierarchy().*
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      /COPY QLOG4RPG,COPYRIGHT
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG                      Public interface & type definitions
      /COPY QLOG4RPG,PLOG4RPG01                    Logger
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PTYPES                        Private type definitions
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QBASICS1,PBASICS1                      Basic RPG Extensions
      /COPY QLOG4RPG,PLOG4RPG04                    AppenderList
      /COPY QLOG4RPG,PLOG4RPG08                    Configurator
      /COPY QLOG4RPG,PLOG4RPG09                    Level
      /COPY QLOG4RPG,PLOG4RPG10                    LogLog
      /COPY QLOG4RPG,PLOG4RPG13                    Repository
      /COPY QLOG4RPG,PLOG4RPG16                    LogEvent
      /COPY QLOG4RPG,PLOG4RPG99                    Helpers
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      *  Deletes a logger.
     D deleteLogger...
     D                 PR
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t   )
      *
      *  Returns cTrue if logging is enabled.
     D isLoggingEnabled...
     D                 PR              N
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  Returns the logging priority from the logger hierarchy.
     D getPriorityFromHierarchy...
     D                 PR                         like(LOG4RPG_priority_t  )
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t   )
      *
      *  Logs the logging event.
     D logLoggingEvent...
     D                 PR
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t   )
     D  i_priority                         const  like(LOG4RPG_priority_t  )
     D  i_text                             const  like(LOG4RPG_text_t      )
     D                                            options(*varsize)
     D  i_caller                           const  likeds(LOG4RPG_caller_t  )
     D  i_errMsg                           const  likeds(msg_t             )
     D                                            options(*nopass)
      *
      *  Returns the appender list from the logger hierarchy.
     D getAppenderListFromHierarchy...
     D                 PR                         like(LOG4RPG_pAppenderList_t )
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t       )
      *
      *  Initializes a given logger handle.
     D initializeLoggerHandle...
     D                 PR
     D  io_logger                                 likeds(LOG4RPG_logger_t  )
     D  i_logName                          const  like(LOG4RPG_loggerName_t)
      *
      *  Initializes a given provision node handle.
     D initializeProvisionNodeHandle...
     D                 PR
     D  io_provNode                               likeds(LOG4RPG_logger_t  )
     D  i_logName                          const  like(LOG4RPG_loggerName_t)
      *
      *  Clears a given logger handle.
     D clearHandleData...
     D                 PR
     D  io_logger                                 likeds(LOG4RPG_logger_t)
      *
      *  Checks, if the Log4rpg stub module is present and returns an offset
      *  for the f_caller() procdure to skip the stub module.
     D getStubOfs...
     D                 PR             3I 0
      *
      *  Initializes this module.
     D initializeModule...
     D                 PR
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
     D cLOG4RPG_LEVEL_NONE...
     D                 C                   const(-2)
     D cLOG4RPG_LEVEL_PARENT...
     D                 C                   const(-1)
      *
     D cLOG4RPG_NODE_LOGGER...
     D                 C                   const(1)
     D cLOG4RPG_NODE_PROVISION...
     D                 C                   const(2)
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
     D g_isLogging     S               N   inz(cTrue)
     D g_isInit        S               N   inz(cFalse)
     D g_warnRootNoAppender...
     D                 S               N   inz(cFalse)
     D g_stubOfs       S              3I 0 inz(0)
      *
      * -----------------------------------------
      *  Program status data structure
      * -----------------------------------------
      /DEFINE SDS_EXTENDED
      /COPY QLOG4RPG,SDS
      /UNDEFINE SDS_EXTENDED
      *
      *=========================================================================
      *  Enables / Disables LOG4RPG.
      *=========================================================================
      *  Parameters:
      *   i_isLogging   - Specifies whether LOG4RPG is active or not.
      *                   *OFF completely disables LOG4RPG.
      *
      *  Returns:
      *   currentState  - Returns the current state of LOG4RPG.
      *                   1 = ON, 0 = OFF.
      *=========================================================================
     P Logger_setLogging...
     P                 B                   export
      *
     D Logger_setLogging...
     D                 PI              N
     D  i_isLogging                    N   const
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if i_isLogging;
            g_isLogging = cTrue;
            LogLog_verbose('LOG4RPG is enabled now.');
         else;
            g_isLogging = cFalse;
            LogLog_verbose('LOG4RPG is disabled now.');
         endif;

         return g_isLogging;

      /END-FREE
      *
     P Logger_setLogging...
     P                 E
      *
      *=========================================================================
      *  Returns whether logging is enabled or not.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   isLogging     - Returns TRUE if logging is enabled, else FALSE.
      *=========================================================================
     P Logger_isLogging...
     P                 B                   export
      *
     D Logger_isLogging...
     D                 PI              N
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if g_isLogging;
            return cTrue;
         else;
            return cFalse;
         endif;

      /END-FREE
      *
     P Logger_isLogging...
     P                 E
      *
      *=========================================================================
      *  Returns the root logger.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   hLogger       - Handle of the root logger on success, else
      *                   a NULL handle.
      *=========================================================================
     P Logger_getRootLogger...
     P                 B                   export
      *
     D Logger_getRootLogger...
     D                 PI                         like(LOG4RPG_hLogger_t )
      *
      *  Return value
     D hLogger         S                   like(LOG4RPG_hLogger_t  ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return Logger_getLogger(cROOT_LOGGER);

      /END-FREE
      *
     P Logger_getRootLogger...
     P                 E
      *
      *=========================================================================
      *  Returns a new logger named as the specified name.
      *=========================================================================
      *  Parameters:
      *   i_logName     - Name of the logger.
      *
      *  Returns:
      *   hLogger       - Handle of the logger on success, else
      *                   a NULL handle.
      *=========================================================================
     P Logger_getLogger...
     P                 B                   export
      *
     D Logger_getLogger...
     D                 PI                         like(LOG4RPG_hLogger_t   )
     D  i_logName                          const  like(LOG4RPG_loggerName_t)
      *
      *  Return value
     D hLogger         S                   like(LOG4RPG_hLogger_t  ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if not Logger_isLogging();
            return Logger_null();
         endif;

         initializeModule();

         Configurator_checkAndReloadPropertiesConfiguration();

         hLogger = Repository_getLogger(translateLoggerName(i_logName));

         return hLogger;

      /END-FREE
      *
     P Logger_getLogger...
     P                 E
      *
      *=========================================================================
      *  Logs a DEBUG statement.
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *   i_text        - Statement text, that is written to the log.
      *
      *  Returns:
      *   void
      *=========================================================================
     P Logger_debug...
     P                 B                   export
      *
     D Logger_debug...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_text                             const  like(LOG4RPG_text_t    )
      *
      *  Caller
     D caller          DS                  likeds(LOG4RPG_caller_t) inz
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(i_hLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if (not Logger_isDebugEnabled(i_hLogger));
            return;
         endif;

         caller.procedure = f_caller(caller.module.name
                                     : caller.pgm.name
                                     : caller.stmtID
                                     : g_stubOfs);
         logLoggingEvent(i_hLogger: cLOG4RPG_PRIORITY_DEBUG
                         : i_text
                         : caller);

         return;

      /END-FREE
      *
     P Logger_debug...
     P                 E
      *
      *=========================================================================
      *  Logs a DEBUG message.
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *   i_msg         - Message, that is written to the log.
      *
      *  Returns:
      *   void
      *=========================================================================
     P Logger_debugMsg...
     P                 B                   export
      *
     D Logger_debugMsg...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_msg                              const  likeds(LOG4RPG_msg_t   )
      *
      *  Caller
     D caller          DS                  likeds(LOG4RPG_caller_t) inz
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(i_hLogger)
      *
      *  Error message
     D errMsg          DS                  likeds(msg_t   ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if (not Logger_isDebugEnabled(i_hLogger));
            return;
         endif;

         caller.procedure = f_caller(caller.module.name
                                     : caller.pgm.name
                                     : caller.stmtID
                                     : g_stubOfs);
         logLoggingEvent(i_hLogger: cLOG4RPG_PRIORITY_DEBUG
                         : %trimR(f_rtvMsgText(i_msg: errMsg))
                         : caller
                         : errMsg);

         return;

      /END-FREE
      *
     P Logger_debugMsg...
     P                 E
      *
      *=========================================================================
      *  Returns cTrue if 'DEBUG' log events are logged.
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *
      *  Returns:
      *   isEnabled     - cTrue if 'DEBUG' log events are logged, else cFalse.
      *=========================================================================
     P Logger_isDebugEnabled...
     P                 B                   export
      *
     D Logger_isDebugEnabled...
     D                 PI              N
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  Return value
     D isEnabled       S               N   inz(cFalse)
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(i_hLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if (not isLoggingEnabled(i_hLogger));
            return cFalse;
         endif;

         isEnabled =
 B01        cLOG4RPG_PRIORITY_DEBUG >= getPriorityFromHierarchy(i_hLogger);

         return isEnabled;

      /END-FREE
      *
     P Logger_isDebugEnabled...
     P                 E
      *
      *=========================================================================
      *  Logs an INFO statement.
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *   i_text        - Statement text, that is written to the log.
      *
      *  Returns:
      *   void
      *=========================================================================
     P Logger_info...
     P                 B                   export
      *
     D Logger_info...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_text                             const  like(LOG4RPG_text_t    )
      *
      *  Caller
     D caller          DS                  likeds(LOG4RPG_caller_t) inz
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(i_hLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if (not Logger_isInfoEnabled(i_hLogger));
            return;
         endif;

         caller.procedure = f_caller(caller.module.name
                                     : caller.pgm.name
                                     : caller.stmtID
                                     : g_stubOfs);
         logLoggingEvent(i_hLogger: cLOG4RPG_PRIORITY_INFO
                         : i_text
                         : caller);

         return;

      /END-FREE
      *
     P Logger_info...
     P                 E
      *
      *=========================================================================
      *  Logs an INFO message.
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *   i_msg         - Message, that is written to the log.
      *
      *  Returns:
      *   void
      *=========================================================================
     P Logger_infoMsg...
     P                 B                   export
      *
     D Logger_infoMsg...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_msg                              const  likeds(LOG4RPG_msg_t   )
      *
      *  Caller
     D caller          DS                  likeds(LOG4RPG_caller_t) inz
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(i_hLogger)
      *
      *  Error message
     D errMsg          DS                  likeds(msg_t   ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if (not Logger_isInfoEnabled(i_hLogger));
            return;
         endif;

         caller.procedure = f_caller(caller.module.name
                                     : caller.pgm.name
                                     : caller.stmtID
                                     : g_stubOfs);
         logLoggingEvent(i_hLogger: cLOG4RPG_PRIORITY_INFO
                         : %trimR(f_rtvMsgText(i_msg: *omit))
                         : caller
                         : errMsg);

         return;

      /END-FREE
      *
     P Logger_infoMsg...
     P                 E
      *
      *=========================================================================
      *  Returns cTrue if 'INFO' log events are logged.
      *  (Including DEBUG log events)
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *
      *  Returns:
      *   isEnabled     - cTrue if 'INFO' log events are logged, else cFalse.
      *=========================================================================
     P Logger_isInfoEnabled...
     P                 B                   export
      *
     D Logger_isInfoEnabled...
     D                 PI              N
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  Return value
     D isEnabled       S               N   inz(cFalse)
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(i_hLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if (not isLoggingEnabled(i_hLogger));
            return cFalse;
         endif;

         isEnabled =
 B01        cLOG4RPG_PRIORITY_INFO >= getPriorityFromHierarchy(i_hLogger);

         return isEnabled;

      /END-FREE
      *
     P Logger_isInfoEnabled...
     P                 E
      *
      *=========================================================================
      *  Logs a WARN statement.
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *   i_text        - Statement text, that is written to the log.
      *
      *  Returns:
      *   void
      *=========================================================================
     P Logger_warn...
     P                 B                   export
      *
     D Logger_warn...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_text                             const  like(LOG4RPG_text_t    )
      *
      *  Caller
     D caller          DS                  likeds(LOG4RPG_caller_t) inz
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(i_hLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if (not Logger_isWarnEnabled(i_hLogger));
            return;
         endif;

         caller.procedure = f_caller(caller.module.name
                                     : caller.pgm.name
                                     : caller.stmtID
                                     : g_stubOfs);
         logLoggingEvent(i_hLogger: cLOG4RPG_PRIORITY_WARN
                         : i_text
                         : caller);

         return;

      /END-FREE
      *
     P Logger_warn...
     P                 E
      *
      *=========================================================================
      *  Logs a WARN message.
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *   i_msg         - Message, that is written to the log.
      *
      *  Returns:
      *   void
      *=========================================================================
     P Logger_warnMsg...
     P                 B                   export
      *
     D Logger_warnMsg...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_msg                              const  likeds(LOG4RPG_msg_t   )
      *
      *  Caller
     D caller          DS                  likeds(LOG4RPG_caller_t) inz
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(i_hLogger)
      *
      *  Error message
     D errMsg          DS                  likeds(msg_t   ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if (not Logger_isWarnEnabled(i_hLogger));
            return;
         endif;

         caller.procedure = f_caller(caller.module.name
                                     : caller.pgm.name
                                     : caller.stmtID
                                     : g_stubOfs);
         logLoggingEvent(i_hLogger: cLOG4RPG_PRIORITY_WARN
                         : %trimR(f_rtvMsgText(i_msg: *omit))
                         : caller
                         : errMsg);

         return;

      /END-FREE
      *
     P Logger_warnMsg...
     P                 E
      *
      *=========================================================================
      *  Returns cTrue if 'WARN' log events are logged.
      *  (Including INFO and DEBUG log events)
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *
      *  Returns:
      *   isEnabled     - cTrue if 'WARN' log events are logged, else cFalse.
      *=========================================================================
     P Logger_isWarnEnabled...
     P                 B                   export
      *
     D Logger_isWarnEnabled...
     D                 PI              N
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  Return value
     D isEnabled       S               N   inz(cFalse)
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(i_hLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if (not isLoggingEnabled(i_hLogger));
            return cFalse;
         endif;

         isEnabled =
 B01        cLOG4RPG_PRIORITY_WARN >= getPriorityFromHierarchy(i_hLogger);

         return isEnabled;

      /END-FREE
      *
     P Logger_isWarnEnabled...
     P                 E
      *
      *=========================================================================
      *  Logs an ERROR statement.
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *   i_text        - Statement text, that is written to the log.
      *
      *  Returns:
      *   void
      *=========================================================================
     P Logger_error...
     P                 B                   export
      *
     D Logger_error...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_text                             const  like(LOG4RPG_text_t    )
      *
      *  Caller
     D caller          DS                  likeds(LOG4RPG_caller_t) inz
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(i_hLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if (not Logger_isErrorEnabled(i_hLogger));
            return;
         endif;

         caller.procedure = f_caller(caller.module.name
                                     : caller.pgm.name
                                     : caller.stmtID
                                     : g_stubOfs);
         logLoggingEvent(i_hLogger: cLOG4RPG_PRIORITY_ERROR
                         : i_text
                         : caller);

         return;

      /END-FREE
      *
     P Logger_error...
     P                 E
      *
      *=========================================================================
      *  Logs an ERROR message.
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *   i_msg         - Message, that is written to the log.
      *
      *  Returns:
      *   void
      *=========================================================================
     P Logger_errorMsg...
     P                 B                   export
      *
     D Logger_errorMsg...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_msg                              const  likeds(LOG4RPG_msg_t   )
      *
      *  Caller
     D caller          DS                  likeds(LOG4RPG_caller_t) inz
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(i_hLogger)
      *
      *  Error message
     D errMsg          DS                  likeds(msg_t   ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if (not Logger_isErrorEnabled(i_hLogger));
            return;
         endif;

         caller.procedure = f_caller(caller.module.name
                                     : caller.pgm.name
                                     : caller.stmtID
                                     : g_stubOfs);
         logLoggingEvent(i_hLogger: cLOG4RPG_PRIORITY_ERROR
                         : %trimR(f_rtvMsgText(i_msg: *omit))
                         : caller
                         : errMsg);

         return;

      /END-FREE
      *
     P Logger_errorMsg...
     P                 E
      *
      *=========================================================================
      *  Returns cTrue if 'ERROR' log events are logged.
      *  (Including WARN, INFO and DEBUG log events)
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *
      *  Returns:
      *   isEnabled     - cTrue if 'ERROR' log events are logged, else cFalse.
      *=========================================================================
     P Logger_isErrorEnabled...
     P                 B                   export
      *
     D Logger_isErrorEnabled...
     D                 PI              N
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  Return value
     D isEnabled       S               N   inz(cFalse)
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(i_hLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if (not isLoggingEnabled(i_hLogger));
            return cFalse;
         endif;

         isEnabled =
 B01        cLOG4RPG_PRIORITY_ERROR >= getPriorityFromHierarchy(i_hLogger);

         return isEnabled;

      /END-FREE
      *
     P Logger_isErrorEnabled...
     P                 E
      *
      *=========================================================================
      *  Logs a FATAL error statement.
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *   i_text        - Statement text, that is written to the log.
      *
      *  Returns:
      *   void
      *=========================================================================
     P Logger_fatal...
     P                 B                   export
      *
     D Logger_fatal...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_text                             const  like(LOG4RPG_text_t    )
      *
      *  Caller
     D caller          DS                  likeds(LOG4RPG_caller_t) inz
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(i_hLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if (not Logger_isFatalEnabled(i_hLogger));
            return;
         endif;

         caller.procedure = f_caller(caller.module.name
                                     : caller.pgm.name
                                     : caller.stmtID
                                     : g_stubOfs);
         logLoggingEvent(i_hLogger: cLOG4RPG_PRIORITY_FATAL
                         : i_text
                         : caller);

         return;

      /END-FREE
      *
     P Logger_fatal...
     P                 E
      *
      *=========================================================================
      *  Logs a FATAL error message.
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *   i_msg         - Message, that is written to the log.
      *
      *  Returns:
      *   void
      *=========================================================================
     P Logger_fatalMsg...
     P                 B                   export
      *
     D Logger_fatalMsg...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_msg                              const  likeds(LOG4RPG_msg_t   )
      *
      *  Caller
     D caller          DS                  likeds(LOG4RPG_caller_t) inz
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(i_hLogger)
      *
      *  Error message
     D errMsg          DS                  likeds(msg_t   ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if (not Logger_isFatalEnabled(i_hLogger));
            return;
         endif;

         caller.procedure = f_caller(caller.module.name
                                     : caller.pgm.name
                                     : caller.stmtID
                                     : g_stubOfs);
         logLoggingEvent(i_hLogger: cLOG4RPG_PRIORITY_FATAL
                         : %trimR(f_rtvMsgText(i_msg: *omit))
                         : caller
                         : errMsg);

         return;

      /END-FREE
      *
     P Logger_fatalMsg...
     P                 E
      *
      *=========================================================================
      *  Returns cTrue if 'FATAL' log events are logged.
      *  (Including ERROR, WARN, INFO and DEBUG log events)
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *
      *  Returns:
      *   isEnabled     - cTrue if 'FATAL' log events are logged, else cFalse.
      *=========================================================================
     P Logger_isFatalEnabled...
     P                 B                   export
      *
     D Logger_isFatalEnabled...
     D                 PI              N
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  Return value
     D isEnabled       S               N   inz(cFalse)
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(i_hLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if (not isLoggingEnabled(i_hLogger));
            return cFalse;
         endif;

         isEnabled =
 B01        cLOG4RPG_PRIORITY_FATAL >= getPriorityFromHierarchy(i_hLogger);

         return isEnabled;

      /END-FREE
      *
     P Logger_isFatalEnabled...
     P                 E
      *
      *=========================================================================
      *  Logs the specified statement without further checking.
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *   i_text        - Statement text, that is written to the log.
      *
      *  Returns:
      *   void
      *=========================================================================
     P Logger_forcedLog...
     P                 B                   export
      *
     D Logger_forcedLog...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_level                            const  like(LOG4RPG_level_t   )
     D  i_text                             const  like(LOG4RPG_text_t    )
      *
      *  Caller
     D caller          DS                  likeds(LOG4RPG_caller_t) inz
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(i_hLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if not Logger_isLogging();
            return;
         endif;

         // Return to caller if logger is NULL
         if Logger_isNull(i_hLogger);
            return;
         endif;

         // Reload properties (if reloading has been enabled)
         Configurator_checkAndReloadPropertiesConfiguration();

         // Return to caller if logger does not exist
         if not Repository_existLogger(logger.name);
            return;
         endif;

         caller.procedure = f_caller(caller.module.name
                                     : caller.pgm.name
                                     : caller.stmtID
                                     : g_stubOfs);
         logLoggingEvent(i_hLogger: Level_toInt(i_level)
                         : i_text
                         : caller);

         return;

      /END-FREE
      *
     P Logger_forcedLog...
     P                 E
      *
      *=========================================================================
      *  Logs the specified message without further checking.
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *   i_msg         - Message, that is written to the log.
      *
      *  Returns:
      *   void
      *=========================================================================
     P Logger_forcedLogMsg...
     P                 B                   export
      *
     D Logger_forcedLogMsg...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_level                            const  like(LOG4RPG_level_t   )
     D  i_msg                              const  likeds(LOG4RPG_msg_t   )
      *
      *  Caller
     D caller          DS                  likeds(LOG4RPG_caller_t) inz
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(i_hLogger)
      *
      *  Error message
     D errMsg          DS                  likeds(msg_t   ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if not Logger_isLogging();
            return;
         endif;

         // Return to caller if logger is NULL
         if Logger_isNull(i_hLogger);
            return;
         endif;

         Configurator_checkAndReloadPropertiesConfiguration();

         if not Repository_existLogger(logger.name);
            return;
         endif;

         caller.procedure = f_caller(caller.module.name
                                     : caller.pgm.name
                                     : caller.stmtID
                                     : g_stubOfs);
         logLoggingEvent(i_hLogger: Level_toInt(i_level)
                         : %trimR(f_rtvMsgText(i_msg: *omit))
                            : caller                                                        //RADDAT
                            : errMsg);

         return;

      /END-FREE
      *
     P Logger_forcedLogMsg...
     P                 E
      *
      *=========================================================================
      *  Returns the name of the specified logger.
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *
      *  Returns:
      *   logName       - Returns the name of the logger on success, else ''.
      *=========================================================================
     P Logger_getName...
     P                 B                   export
      *
     D Logger_getName...
     D                 PI                         like(LOG4RPG_loggerName_t)
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t   )
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(i_hLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if not Logger_isLogging();
            return '';
         endif;

         return Node_getName(i_hLogger);

      /END-FREE
      *
     P Logger_getName...
     P                 E
      *
      *=========================================================================
      *  Adds an appender to the specified logger.
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *   i_appName     - The name of the appender.
      *
      *  Returns:
      *   void
      *=========================================================================
     P Logger_addAppender...
     P                 B                   export
      *
     D Logger_addAppender...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t       )
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t     )
      *
      *  Helper fields
     D appName         S                   like(LOG4RPG_appenderName_t  ) inz
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(i_hLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if not Logger_isLogging();
            return;
         endif;

         // Return to caller if logger is NULL
         if Logger_isNull(i_hLogger);
            return;
         endif;

         if Appender_isNull(i_pAppender);
            LogLog_warning('Appender is NULL. Please check call from [' +
                           f_caller() + '] to [' + f_this() + '].');
            return;
         endif;

         appName = Appender_getName(i_pAppender);

         if AppenderList_isNull(logger.pAppenderList);
            logger.pAppenderList = AppenderList_new();
         endif;

         if Appender_isNull(i_pAppender);
            LogLog_warning('Appender [' + appName +
                           '] does not exist in repository.');
            return;
         endif;

         if AppenderList_put(logger.pAppenderList: i_pAppender) = 0;
            LogLog_debug('Appender [' + appName +
                         '] added to logger [' + logger.name + '].');
         else;
            LogLog_error('Failed to add appender [' + appName +
                         '] to logger [' + logger.name + '].');
         endif;

         return;

      /END-FREE
      *
     P Logger_addAppender...
     P                 E
      *
      *=========================================================================
      *  Removes the specified appender from a given logger.
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *   i_appName     - Name of the appender that is removed from the logger.
      *
      *  Returns:
      *   void
      *=========================================================================
     P Logger_removeAppender...
     P                 B                   export
      *
     D Logger_removeAppender...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t       )
     D  i_appName                          const  like(LOG4RPG_appenderName_t  )
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(i_hLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if not Logger_isLogging();
            if not Repository_isShutdown();
               return;
            endif;
         endif;

         // Return to caller if logger is NULL
         if Logger_isNull(i_hLogger);
            return;
         endif;

         if AppenderList_isNull(logger.pAppenderList);
            return;
         endif;

         AppenderList_remove(logger.pAppenderList: i_appName);

         LogLog_verbose('Appender [' + i_appName +
                        '] removed from logger [' + logger.name + '].');

         return;

      /END-FREE
      *
     P Logger_removeAppender...
     P                 E
      *
      *=========================================================================
      *  Removes all appenders from the specified logger.
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *
      *  Returns:
      *   void
      *=========================================================================
     P Logger_removeAllAppenders...
     P                 B                   export
      *
     D Logger_removeAllAppenders...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t   )
      *
      *  Helper fields
     D appIter         DS                  likeds(LOG4RPG_Appender...
     D                                                    ListIterator_t   ) inz
     D pAppender       S                   like(LOG4RPG_pAppender_t        ) inz
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(i_hLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if not Logger_isLogging();
            return;
         endif;

         // Return to caller if logger is NULL
         if Logger_isNull(i_hLogger);
            return;
         endif;

         if AppenderList_isNull(logger.pAppenderList);
            return;
         endif;

         appIter = AppenderList_getIterator(logger.pAppenderList);

         dow AppenderList_getNumE(logger.pAppenderList) > 0;
            pAppender = AppenderList_getFirst(appIter);
            Logger_removeAppender(i_hLogger: Appender_getName(pAppender));
         enddo;

         return;

      /END-FREE
      *
     P Logger_removeAllAppenders...
     P                 E
      *
      *=========================================================================
      *  Tests the specified logger handle for a NULL value.
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *
      *  Returns:
      *   isNull        - Returns TRUE if the logger handle is NULL, else TRUE.
      *=========================================================================
     P Logger_isNull...
     P                 B                   export
     D                 PI              N
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t )
     D                                     based(i_hLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         p_assert(i_hLogger = *NULL or
                  logger.node = cLOG4RPG_NODE_LOGGER
                  : 'Expected a logger node');

         return Node_isNull(i_hLogger);

      /END-FREE
     P                 E
      *
      *=========================================================================
      *  Returns a logger NULL handle.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   hLogger       - Returns a NULL handle.
      *=========================================================================
     P Logger_null...
     P                 B                   export
     D                 PI                         like(LOG4RPG_hLogger_t )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return *NULL;

      /END-FREE
     P                 E
      *
      *=========================================================================
      *  Sets the logging level of the specified logger.
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *   i_level       - Logging level. Can be one of these value:
      *                      cLOG4RPG_LEVEL_DEBUG
      *                      cLOG4RPG_LEVEL_INFO
      *                      cLOG4RPG_LEVEL_WARN
      *                      cLOG4RPG_LEVEL_ERROR
      *                      cLOG4RPG_LEVEL_FATAL
      *
      *  Returns:
      *   void
      *=========================================================================
     P Logger_setLevel...
     P                 B                   export
      *
     D Logger_setLevel...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_level                            const  like(LOG4RPG_level_t   )
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t )
     D                                     based(i_hLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if not Logger_isLogging();
            return;
         endif;

         // Return to caller if logger is NULL
         if Logger_isNull(i_hLogger);
            return;
         endif;

         logger.priority = Level_toInt(f_ucase(i_level));

         return;

      /END-FREE
      *
     P Logger_setLevel...
     P                 E
      *
      *=========================================================================
      *  Resets the logging level of the specified logger to use the
      *  log level of the parent logger.
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *
      *  Returns:
      *   void
      *=========================================================================
     P Logger_resetLevel...
     P                 B                   export
      *
     D Logger_resetLevel...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t )
     D                                     based(i_hLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if not Logger_isLogging();
            return;
         endif;

         // Return to caller if logger is NULL
         if Logger_isNull(i_hLogger);
            return;
         endif;

         logger.priority = cLOG4RPG_LEVEL_PARENT;

         return;

      /END-FREE
      *
     P Logger_resetLevel...
     P                 E
      *
      *=========================================================================
      *  Allows to enable/disable log4rpg internal logging.
      *=========================================================================
      *  Parameters:
      *   i_debugMode   - Specifies the debug mode for the log4rpg
      *                   internal logging.
      *   i_output      - Specifies the output target for the log events.
      *
      *  Returns:
      *   void
      *
      *  Remark:          This setting affects the complete LOG4RPG system.
      *=========================================================================
     P Logger_setInternalDebugging...
     P                 B                   export
      *
     D Logger_setInternalDebugging...
     D                 PI
     D  i_debugMode                        const  like(LOG4RPG_debugMode_t  )
     D  i_output                           const  like(LOG4RPG_debugOutput_t)
     D                                            options(*nopass)
      *
      *  Parameter positions
     D p_output        C                   const(2)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if not Logger_isLogging();
            return;
         endif;

         if %parms() >= p_output;
            LogLog_setInternalDebugging(i_debugMode: i_output);
         else;
            LogLog_setInternalDebugging(i_debugMode);
         endif;

         return;

      /END-FREE
      *
     P Logger_setInternalDebugging...
     P                 E
      *
      *=========================================================================
      *  Returns the internal debug mode.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   debugMode     - Mode of the internal logging.
      *=========================================================================
     P Logger_getInternalDebugMode...
     P                 B                   export
      *
     D Logger_getInternalDebugMode...
     D                 PI                         like(LOG4RPG_debugMode_t  )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if not Logger_isLogging();
            return '';
         endif;

         return LogLog_getInternalDebugMode();

      /END-FREE
      *
     P Logger_getInternalDebugMode...
     P                 E
      *
      *=========================================================================
      *  Returns the target for internal log events.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   output        - Output target for internal log events.
      *=========================================================================
     P Logger_getInternalDebugOutput...
     P                 B                   export
      *
     D Logger_getInternalDebugOutput...
     D                 PI                         like(LOG4RPG_debugOutput_t)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if not Logger_isLogging();
            return '';
         endif;

         return LogLog_getInternalDebugOutput();

      /END-FREE
      *
     P Logger_getInternalDebugOutput...
     P                 E
      *
      *=========================================================================
    R *  ***PRIVATE ***   (exported for internal use only)
      *  Creates a new logger instance.
      *=========================================================================
      *  Parameters:
      *   i_logName     - Name of the logger.
      *
      *  Returns:
      *   hLogger       - Handle of the logger on success, else
      *                   a NULL handle.
      *=========================================================================
     P Logger_new...
     P                 B                   export
      *
     D Logger_new...
     D                 PI                         like(LOG4RPG_hLogger_t   )
     D  i_logName                          const  like(LOG4RPG_loggerName_t)
      *
      *  Return value
     D hLogger         S                   like(LOG4RPG_hLogger_t ) inz
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(hLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         LogLog_debug('Creating logger [' + i_logName + '] ...');

         hLogger = %alloc(%size(LOG4RPG_logger_t));

         initializeLoggerHandle(logger: i_logName);

         LogLog_verbose('+ Allocated memory for logger [' + logger.name + ']');

         return hLogger;

      /END-FREE
      *
     P Logger_new...
     P                 E
      *
      *=========================================================================
    R *  ***PRIVATE ***   (exported for internal use only)
      *  Deletes the specified logger.
      *=========================================================================
      *  Parameters:
      *   io_hLogger    - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *
      *  Returns:
      *   void
      *=========================================================================
     P Logger_delete...
     P                 B                   export
      *
     D Logger_delete...
     D                 PI
     D  io_hLogger                                like(LOG4RPG_hLogger_t )
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t )
     D                                     based(io_hLogger)
      *
      *  Helper fields
     D name            S                   like(logger.name        ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if not Repository_existLogger(logger.name);
            io_hLogger = Logger_null();
            return;
         endif;

         LogLog_verbose('Deleting logger [' + logger.name + '] ...');

         name = logger.name;

         deleteLogger(io_hLogger);

         dealloc(N) io_hLogger;
         io_hLogger = Logger_null();

         LogLog_verbose('- Freed memory of logger [' + name + ']');

         return;

      /END-FREE
      *
     P Logger_delete...
     P                 E
      *
      *=======================================================================
      *  ***PRIVATE ***   (exported for internal use only)
      *  Adds a child node to the specified logger node.
      *  (logger nodes only)
      *=======================================================================
      *  Parameters:
      *   i_hLoggerNode - Handle of the logger node as it was returned by
      *                   Logger_getLogger().
      *   i_hChild      - Handle of the child node.
      *
      *  Returns:
      *   numChildren   - Returns the index of the child node on success,
      *                   else -1.
      *=======================================================================
     P Logger_addChild...
     P                 B                   export
     D                 PI            10I 0
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t   )
     D  i_hChild                           const  like(LOG4RPG_hLogger_t   )
      *
      *  Return value
     D index           S             10I 0 inz(-1)
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t )
     D                                     based(hLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         hLogger = i_hLogger;

         p_assert(logger.node = cLOG4RPG_NODE_LOGGER
                  : 'Expected a logger node');

         index = Node_addChild(i_hLogger: i_hChild);

         return index;

      /END-FREE
     P                 E
      *
      *=========================================================================
    R *  ***PRIVATE ***   (exported for internal use only)
      *  Sets the parent logger of the specified logger.
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *   i_hParent     - Handle of the parent logger.
      *
      *  Returns:
      *   void
      *=========================================================================
     P Logger_setParent...
     P                 B                   export
      *
     D Logger_setParent...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_hParent                          const  like(LOG4RPG_hLogger_t )
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t )
     D                                     based(i_hLogger)
     D parent          DS                  likeds(LOG4RPG_logger_t )
     D                                     based(i_hParent)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         p_assert(logger.node = cLOG4RPG_NODE_LOGGER
                  : 'Expected a logger node');

         Node_setParent(i_hLogger: i_hParent);

         if not Logger_isNull(i_hParent);
            LogLog_verbose('Set parent of logger [' + logger.name + '] to ' +
                                                '[' + parent.name + ']');
         else;
            LogLog_verbose('Set parent of logger [' + logger.name + '] to ' +
                                                '[' + '*NULL'     + ']');
         endif;

      /END-FREE
      *
     P Logger_setParent...
     P                 E
      *
      *=========================================================================
    R *  ***PRIVATE ***   (exported for internal use only)
      *  Returns the parent of the specified logger.
      *=========================================================================
      *  Parameters:
      *   i_hLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *
      *  Returns:
      *   hParent       - Handle of the parent logger.
      *=========================================================================
     P Logger_getParent...
     P                 B                   export
      *
     D Logger_getParent...
     D                 PI                         like(LOG4RPG_hLogger_t )
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t )
     D                                     based(i_hLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return Node_getParent(i_hLogger);

      /END-FREE
      *
     P Logger_getParent...
     P                 E
      *
      *=======================================================================
      *  ***PRIVATE ***   (exported for internal use only)
      *  Returns the name of a given node.
      *=======================================================================
      *  Parameters:
      *   i_hNode       - Handle of the node.
      *
      *  Returns:
      *   name          - Returns the name of the node.
      *=======================================================================
     P Node_getName...
     P                 B                   export
     D                 PI                         like(LOG4RPG_loggerName_t)
     D  i_hNode                            const  like(LOG4RPG_hLogger_t )
      *
      *  Logger handle
     D node            DS                  likeds(LOG4RPG_logger_t )
     D                                     based(hNode)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logger is NULL
         if Node_isNull(i_hNode);
            return '';
         endif;

         hNode = i_hNode;

         return node.name;

      /END-FREE
     P                 E
      *
      *=========================================================================
    R *  ***PRIVATE ***   (exported for internal use only)
      *  Tests the specified node handle for a provision node.
      *=========================================================================
      *  Parameters:
      *   i_hNode       - Handle of the node as it was returned by
      *                   Logger_getLogger(), Logger_getRootLogger() or
      *                   ProvisionNode_makeProvisionNode().
      *
      *  Returns:
      *   isProvNode    - Returns TRUE if the handle is a provision node
      *                   handle, else FALSE.
      *=========================================================================
     P Node_isProvisionNode...
     P                 B                   export
      *
     D Node_isProvisionNode...
     D                 PI              N
     D  i_hNode                            const  like(LOG4RPG_hLogger_t )
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t )
     D                                     based(i_hNode)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logger is NULL
         if Node_isNull(i_hNode);
            return cFalse;
         else;
            if logger.node <> cLOG4RPG_NODE_PROVISION;
               return cFalse;
            endif;
         endif;

         return cTrue;

      /END-FREE
      *
     P Node_isProvisionNode...
     P                 E
      *
      *=========================================================================
    R *  ***PRIVATE ***   (exported for internal use only)
      *  Tests the specified node handle for a logger node.
      *=========================================================================
      *  Parameters:
      *   i_hNode       - Handle of the node as it was returned by
      *                   Logger_getLogger(), Logger_getRootLogger() or
      *                   ProvisionNode_makeProvisionNode().
      *
      *  Returns:
      *   isLoggerNode  - Returns TRUE if the handle is a logger node
      *                   handle, else FALSE.
      *=========================================================================
     P Node_isLoggerNode...
     P                 B                   export
      *
     D Node_isLoggerNode...
     D                 PI              N
     D  i_hNode                            const  like(LOG4RPG_hLogger_t )
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t )
     D                                     based(i_hNode)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logger is NULL
         if Node_isNull(i_hNode);
            return cFalse;
         else;
            if logger.node <> cLOG4RPG_NODE_LOGGER;
               return cFalse;
            endif;
         endif;

         return cTrue;

      /END-FREE
      *
     P Node_isLoggerNode...
     P                 E
      *
      *=======================================================================
      *  ***PRIVATE ***   (exported for internal use only)
      *  Returns the number of children of the specified node.
      *  (all nodes)
      *=======================================================================
      *  Parameters:
      *   i_hProvNode   - Handle of the node.
      *
      *  Returns:
      *   numChildren   - Returns the number of children of a
      *                   node on success, else -1.
      *=======================================================================
     P Node_getNumChildren...
     P                 B                   export
     D                 PI            10I 0
     D  i_hNode                            const  like(LOG4RPG_hLogger_t)
      *
      *  Return value
     D numChildren     S             10I 0 inz(-1)
      *
      *  Logger handle
     D node            DS                  likeds(LOG4RPG_logger_t )
     D                                     based(pNode)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         pNode = i_hNode;

         p_assert(node.node = cLOG4RPG_NODE_PROVISION or
                  node.node = cLOG4RPG_NODE_LOGGER
                  : 'Expected a provision or logger node');

         if BasicList_isNull(node.pChildren);
            numChildren = 0;
         else;
            numChildren = BasicList_getNumE(node.pChildren);
         endif;

         return numChildren;

      /END-FREE
     P                 E
      *
      *=======================================================================
      *  ***PRIVATE ***   (exported for internal use only)
      *  Returns a reference to a child of the specified node.
      *=======================================================================
      *  Parameters:
      *   i_hNode       - Handle of the node.
      *
      *  Returns:
      *   hChild        - Returns the handle of the child node on success,
      *                   else *NULL.
      *=======================================================================
     P Node_getChild...
     P                 B                   export
      *
     D Node_getChild...
     D                 PI                         like(LOG4RPG_hLogger_t   )
     D  i_hNode                            const  like(LOG4RPG_hLogger_t   )
     D  i_index                      10I 0 const
      *
      *  Return value
     D hChild          S                   like(LOG4RPG_hLogger_t   ) inz
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t )
     D                                     based(pLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         pLogger = i_hNode;

         p_assert(logger.node = cLOG4RPG_NODE_PROVISION or
                  logger.node = cLOG4RPG_NODE_LOGGER
                  : 'Expected a provision or logger node');

         hChild = BasicList_getPointer(logger.pChildren: i_index);

         return hChild;

      /END-FREE
     P                 E
      *
      *=======================================================================
      *  ***PRIVATE ***   (exported for internal use only)
      *  Adds a child node to the specified node.
      *=======================================================================
      *  Parameters:
      *   i_hNode       - Handle of the node.
      *   i_hChild      - Handle of the child node.
      *
      *  Returns:
      *   numChildren   - Returns the index of the child node on success,
      *                   else -1.
      *=======================================================================
     P Node_addChild...
     P                 B                   export
     D                 PI            10I 0
     D  i_hNode                            const  like(LOG4RPG_hLogger_t   )
     D  i_hChild                           const  like(LOG4RPG_hLogger_t   )
      *
      *  Return value
     D index           S             10I 0 inz(-1)
      *
      *  Logger handle
     D node            DS                  likeds(LOG4RPG_logger_t )
     D                                     based(pNode)
     D child           DS                  likeds(LOG4RPG_logger_t )
     D                                     based(pChild)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         pNode = i_hNode;
         pChild = i_hChild;

         index = BasicList_addPointer(node.pChildren: i_hChild);
         Node_setParent(i_hChild: i_hNode);

         return index;

      /END-FREE
     P                 E
      *
      *=======================================================================
      *  ***PRIVATE ***   (exported for internal use only)
      *  Sets the parent logger of the specified node.
      *=======================================================================
      *  Parameters:
      *   i_hNode       - Handle of the node.
      *   i_hParent     - Handle of the parent logger.
      *
      *  Returns:
      *   void
      *=======================================================================
     P Node_setParent...
     P                 B                   export
     D                 PI
     D  i_hNode                            const  like(LOG4RPG_hLogger_t )
     D  i_hParent                          const  like(LOG4RPG_hLogger_t )
      *
      *  Logger handle
     D node            DS                  likeds(LOG4RPG_logger_t )
     D                                     based(pNode)
     D parent          DS                  likeds(LOG4RPG_logger_t )
     D                                     based(pParent)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         pNode = i_hNode;
         pParent = i_hParent;

         node.pParent = i_hParent;

      /END-FREE
     P                 E
      *
      *=======================================================================
      *  ***PRIVATE ***   (exported for internal use only)
      *  Returns the parent of a given node.
      *=======================================================================
      *  Parameters:
      *   i_hNode       - Handle of the node
      *
      *  Returns:
      *   hParent       - Handle of the parent node.
      *=======================================================================
     P Node_getParent...
     P                 B                   export
     D                 PI                         like(LOG4RPG_hLogger_t )
     D  i_hNode                            const  like(LOG4RPG_hLogger_t )
      *
      *  Logger handle
     D node            DS                  likeds(LOG4RPG_logger_t )
     D                                     based(i_hNode)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return node.pParent;

      /END-FREE
     P                 E
      *
      *=======================================================================
      *  ***PRIVATE ***   (exported for internal use only)
      *  Removes a child from the list of children of the specified node.
      *=======================================================================
      *  Parameters:
      *   i_hNode       - Handle of the node.
      *   index         - Position of the child in the list of children.
      *
      *  Returns:
      *   rc            - Returns 0 un success, else -1.
      *=======================================================================
     P Node_removeChild...
     P                 B                   export
     D                 PI            10I 0
     D  i_hNode                            const  like(LOG4RPG_hLogger_t   )
     D  i_index                      10I 0 const
      *
      *  Return value
     D rc              S             10I 0 inz(-1)
      *
      *  Logger handle
     D node            DS                  likeds(LOG4RPG_logger_t )
     D                                     based(hNode)
     D child           DS                  likeds(LOG4RPG_logger_t )
     D                                     based(hChild)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         hNode = i_hNode;

         p_assert(node.node = cLOG4RPG_NODE_PROVISION or
                  node.node = cLOG4RPG_NODE_LOGGER
                  : 'Expected provision or logger nodes');

         hChild = BasicList_getPointer(node.pChildren: i_index);

         if (BasicList_remove(node.pChildren: i_index) = 0);
            Node_setParent(hChild: Logger_null());
            rc = 0;
         endif;

         return rc;

      /END-FREE
      *
     P                 E
      *
      *=======================================================================
      *  ***PRIVATE ***   (exported for internal use only)
      *  Searches the children of a given node for a given child.
      *=======================================================================
      *  Parameters:
      *   i_hNode       - Handle of the node.
      *   i_hChild      - Handle of the child node.
      *
      *  Returns:
      *   index         - Index of the child on success, else -1.
      *=======================================================================
     P Node_findChild...
     P                 B                   export
     D                 PI            10I 0
     D  i_hNode                            const  like(LOG4RPG_hLogger_t )
     D  i_hChild                           const  like(LOG4RPG_hLogger_t )
      *
      *  Helper fields
     D numChildren     S             10I 0 inz
     D x               S             10I 0 inz
      *
      *  Logger handle
     D node            DS                  likeds(LOG4RPG_logger_t )
     D                                     based(hNode)
     D child           DS                  likeds(LOG4RPG_logger_t )
     D                                     based(hChild)
     D curChild        DS                  likeds(LOG4RPG_logger_t )
     D                                     based(hCurChild)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         hNode = i_hNode;
         hChild = i_hChild;

         p_assert(node.node = cLOG4RPG_NODE_PROVISION or
                  node.node = cLOG4RPG_NODE_LOGGER
                  : 'Expected a provision or logger node');

         numChildren = BasicList_getNumE(node.pChildren);

         for x = 1 to numChildren;
            hCurChild = BasicList_getPointer(node.pChildren: x);
            if (hCurChild = i_hChild);
               return x;
            endif;
         endfor;

         return -1;

      /END-FREE
      *
     P                 E
      *
      *=========================================================================
      *  Tests the specified node handle for a NULL value.
      *=========================================================================
      *  Parameters:
      *   i_hNode       - Handle of the node.
      *
      *  Returns:
      *   isNull        - Returns TRUE if the node handle is NULL, else TRUE.
      *=========================================================================
     P Node_isNull...
     P                 B                   export
     D                 PI              N
     D  i_hNode                            const  like(LOG4RPG_hLogger_t )
      *
      *  Logger handle
     D node            DS                  likeds(LOG4RPG_logger_t )
     D                                     based(i_hNode)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if i_hNode = Node_null();
            return cTrue;
         endif;

         return cFalse;

      /END-FREE
     P                 E
      *
      *=========================================================================
      *  Returns a node NULL handle.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   hNode         - Returns a NULL handle.
      *=========================================================================
     P Node_null...
     P                 B                   export
     D                 PI                         like(LOG4RPG_hLogger_t )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return *NULL;

      /END-FREE
     P                 E
      *
      *=========================================================================
      *  Returns a brief description of the node.
      *=========================================================================
      *  Parameters:
      *   i_hNode       - Handle of the node.
      *
      *  Returns:
      *   desc          - Brief description of the node.
      *=========================================================================
     P Node_toString...
     P                 B                   export
     D                 PI           117A          varying
     D  i_hNode                            const  like(LOG4RPG_hLogger_t   )
      *
      *  Return value
     D desc            S            117A   varying inz
     D appenders       S            117A   varying inz
      *
      *  Helper fields
     D priority        S                   like(node.priority)
     D pAppenderList   S                   like(LOG4RPG_pAppenderList_t) inz
     D appIter         DS                  likeds(LOG4RPG_Appender...
     D                                            ListIterator_t) inz
     D pAppender       S                   like(LOG4RPG_pAppender_t) inz
      *
      *  Logger handle
     D node            DS                  likeds(LOG4RPG_logger_t )
     D                                     based(i_hNode)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         select;
         when Node_isLoggerNode(i_hNode);
            priority = getPriorityFromHierarchy(i_hNode);
            desc = 'Logger:' + Node_getName(i_hNode);
         when Node_isProvisionNode(i_hNode);
            priority = getPriorityFromHierarchy(i_hNode);
            desc = 'ProvNode:' + Node_getName(i_hNode);
         other;
            priority = -1;
            desc = '*** Unknown node type ***';
         endsl;

         if (priority = -1);
            return desc;
         endif;

         desc += ' [' + Level_toString(priority) + ']';

         pAppenderList = getAppenderListFromHierarchy(i_hNode);
         if AppenderList_isNull(pAppenderList);
            return desc;
         endif;

         appIter = AppenderList_getIterator(pAppenderList);
         pAppender = AppenderList_getFirst(appIter);

         dow (not Appender_isNull(pAppender));
            if (appenders = '');
               appenders = '; ';
            else;
               appenders += ',';
            endif;
            appenders += Appender_getName(pAppender);
            pAppender = AppenderList_getNext(appIter);
         enddo;

         desc += appenders;

         return desc;

      /END-FREE
     P                 E
      *
      *=========================================================================
    R *  ***PRIVATE ***   (exported for internal use only)
      *  Returns the number of children of the specified provision node.
      *  (provision nodes only)
      *=========================================================================
      *  Parameters:
      *   i_hProvNode   - Handle of the provision node as it was returned by
      *                   ProvisionNode_makeProvisionNode().
      *
      *  Returns:
      *   numChildren   - Returns the number of children of a provision
      *                   node on success, else -1.
      *=========================================================================
     P ProvisionNode_getNumChildren...
     P                 B                   export
      *
     D ProvisionNode_getNumChildren...
     D                 PI            10I 0
     D  i_hProvNode                        const  like(LOG4RPG_hLogger_t   )
      *
      *  Return value
     D numChildren     S             10I 0 inz(-1)
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t )
     D                                     based(i_hProvNode)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         p_assert(logger.node = cLOG4RPG_NODE_PROVISION
                  : 'Expected a provision node');

         numChildren = Node_getNumChildren(i_hProvNode);

         return numChildren;

      /END-FREE
      *
     P ProvisionNode_getNumChildren...
     P                 E
      *
      *=========================================================================
    R *  ***PRIVATE ***   (exported for internal use only)
      *  Adds a child node to the specified provision node.
      *  (provision nodes only)
      *=========================================================================
      *  Parameters:
      *   i_hProvNode   - Handle of the provision node as it was returned by
      *                   ProvisionNode_makeProvisionNode().
      *   i_hChild      - Handle of the child node.
      *
      *  Returns:
      *   numChildren   - Returns the index of the child node on success,
      *                   else -1.
      *=========================================================================
     P ProvisionNode_addChild...
     P                 B                   export
      *
     D ProvisionNode_addChild...
     D                 PI            10I 0
     D  i_hProvNode                        const  like(LOG4RPG_hLogger_t   )
     D  i_hChild                           const  like(LOG4RPG_hLogger_t   )
      *
      *  Return value
     D index           S             10I 0 inz(-1)
      *
      *  Helper fields
     D hChild          S                   like(i_hChild)
      *
      *  Logger handle
     D provNode        DS                  likeds(LOG4RPG_logger_t )
     D                                     based(i_hProvNode)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         p_assert(provNode.node = cLOG4RPG_NODE_PROVISION
                  : 'Expected a provision node');

         index = Node_addChild(i_hProvNode: i_hChild);

         return index;

      /END-FREE
      *
     P ProvisionNode_addChild...
     P                 E
      *
      *=========================================================================
    R *  ***PRIVATE ***   (exported for internal use only)
      *  Returns a reference to a child of the specified provision node.
      *  (provision nodes only)
      *=========================================================================
      *  Parameters:
      *   i_hProvNode   - Handle of the provision node as it was returned by
      *                   ProvisionNode_makeProvisionNode().
      *
      *  Returns:
      *   hChild        - Returns the handle of the child node on success,
      *                   else *NULL.
      *=========================================================================
     P ProvisionNode_getChild...
     P                 B                   export
      *
     D ProvisionNode_getChild...
     D                 PI                         like(LOG4RPG_hLogger_t   )
     D  i_hProvNode                        const  like(LOG4RPG_hLogger_t   )
     D  i_index                      10I 0 const
      *
      *  Return value
     D hChild          S                   like(LOG4RPG_hLogger_t   ) inz
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t )
     D                                     based(i_hProvNode)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         p_assert(logger.node = cLOG4RPG_NODE_PROVISION
                  : 'Expected a provision node');

         hChild = Node_getChild(i_hProvNode: i_index);

         return hChild;

      /END-FREE
      *
     P ProvisionNode_getChild...
     P                 E
      *
      *=========================================================================
    R *  ***PRIVATE ***   (exported for internal use only)
      *  Removes a child from the list of children of the specified provision node.
      *  (provision nodes only)
      *=========================================================================
      *  Parameters:
      *   i_hProvNode   - Handle of the provision node as it was returned by
      *                   ProvisionNode_makeProvisionNode().
      *   index         - Position of the child in the list of children.
      *
      *  Returns:
      *   rc            - Returns 0 un success, else -1.
      *=========================================================================
     P ProvisionNode_removeChild...
     P                 B                   export
      *
     D ProvisionNode_removeChild...
     D                 PI            10I 0
     D  i_hProvNode                        const  like(LOG4RPG_hLogger_t   )
     D  i_index                      10I 0 const
      *
      *  Return value
     D rc              S             10I 0 inz(-1)
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t )
     D                                     based(i_hProvNode)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         p_assert(logger.node = cLOG4RPG_NODE_PROVISION
                  : 'Expected provision node only');

         rc = Node_removeChild(i_hProvNode: i_index);

         return rc;

      /END-FREE
      *
     P ProvisionNode_removeChild...
     P                 E
      *
      *=======================================================================
      *  ***PRIVATE ***   (exported for internal use only)
      *  Sets the parent logger of the specified logger.
      *=======================================================================
      *  Parameters:
      *   i_hProvNode   - Handle of the provision node.
      *   i_hParent     - Handle of the parent node.
      *
      *  Returns:
      *   void
      *=======================================================================
     P ProvisionNode_setParent...
     P                 B                   export
     D                 PI
     D  i_hProvNode                        const  like(LOG4RPG_hLogger_t )
     D  i_hParent                          const  like(LOG4RPG_hLogger_t )
      *
      *  Logger handle
     D provNode        DS                  likeds(LOG4RPG_logger_t )
     D                                     based(hProvNode)
     D parent          DS                  likeds(LOG4RPG_logger_t )
     D                                     based(hParent)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         hProvNode = i_hProvNode;
         hParent = i_hParent;

         p_assert(provNode.node = cLOG4RPG_NODE_PROVISION
                  : 'Expected a provision node');

         Node_setParent(i_hProvNode: i_hParent);

         if not Logger_isNull(i_hParent);
            LogLog_verbose('Set parent of provision node [' +
                                                    provNode.name + '] to ' +
                                              '[' + parent.name   + ']');
         else;
            LogLog_verbose('Set parent of provision node [' +
                                                    provNode.name + '] to ' +
                                                '[' + '*NULL'     + ']');
         endif;

      /END-FREE
     P                 E
      *
      *=======================================================================
      *  ***PRIVATE ***   (exported for internal use only)
      *  Returns the parent of the specified provision node.
      *=======================================================================
      *  Parameters:
      *   i_hProvNode   - Handle of the provision node.
      *
      *  Returns:
      *   hParent       - Handle of the parent logger.
      *=======================================================================
     P ProvisionNode_getParent...
     P                 B                   export
     D                 PI                         like(LOG4RPG_hLogger_t )
     D  i_hProvNode                        const  like(LOG4RPG_hLogger_t )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return Node_getParent(i_hProvNode);

      /END-FREE
     P                 E
      *
      *=========================================================================
    R *  ***PRIVATE ***   (exported for internal use only)
      *  Factory: Produces a provision node and adds a child to it.
      *=========================================================================
      *  Parameters:
      *   i_logName     - Name of the logger.
      *   i_hChild      - Handle of the child node.
      *
      *  Returns:
      *   hProvNode     - Handle of the provision node on success, else
      *                   a NULL handle.
      *=========================================================================
     P ProvisionNode_makeProvisionNode...
     P                 B                   export
      *
     D ProvisionNode_makeProvisionNode...
     D                 PI                         like(LOG4RPG_hLogger_t   )
     D  i_nodeName                         const  like(LOG4RPG_loggerName_t)
     D  i_hChild                           const  like(LOG4RPG_hLogger_t   )
      *
      *  Return value
     D provNode        DS                  likeds(LOG4RPG_logger_t )
     D                                     based(hProvNode)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         LogLog_verbose('Creating provision node [' + i_nodeName + '] ...');

         hProvNode = Logger_null();

         hProvNode = %alloc(%size(LOG4RPG_logger_t));

         clearHandleData(provNode);

         initializeProvisionNodeHandle(provNode: i_nodeName);

         ProvisionNode_addChild(hProvNode: i_hChild);

         LogLog_verbose('+ Allocated memory for provision node [' +
                         i_nodeName + ']');

         return hProvNode;

      /END-FREE
      *
     P ProvisionNode_makeProvisionNode...
     P                 E
      *
      *=========================================================================
    R *  ***PRIVATE ***   (exported for internal use only)
      *  Frees a provision node.
      *=========================================================================
      *  Parameters:
      *   io_hProvNode  - Handle of the provision node as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *
      *  Returns:
      *   void
      *=========================================================================
     P ProvisionNode_free...
     P                 B                   export
      *
     D ProvisionNode_free...
     D                 PI
     D  io_hProvNode                              like(LOG4RPG_hLogger_t )
      *
      *  Helper fields
     D nodeName        S                   like(LOG4RPG_loggerName_t) inz
      *
      *  Node handle
     D provNode        DS                  likeds(LOG4RPG_logger_t)
     D                                     based(io_hProvNode)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if not Node_isProvisionNode(io_hProvNode);
            LogLog_error('Illegal node type passed to ' + f_this() +
                         ': [' + provNode.name + '('
                               + %char(provNode.node) + ')] ...');
         endif;

         LogLog_verbose('Deleting provision node [' +
                         provNode.name + '] ...');

         nodeName = provNode.name;

         p_assert(provNode.pAppenderList = AppenderList_null()
                  : 'Did not expect appender list on logger [' +
                     nodeName + ']');

         BasicList_delete(provNode.pChildren);

         clearHandleData(provNode);

         dealloc(N) io_hProvNode;
         io_hProvNode = Logger_null();

         LogLog_verbose('- Free memory of provision node [' + nodeName + ']');

         return;

      /END-FREE
      *
     P ProvisionNode_free...
     P                 E
      *
      *=======================================================================
      *  ***PRIVATE ***   (exported for internal use only)
      *  Moves the children to a given logger node.
      *=======================================================================
      *  Parameters:
      *   i_hProvNode   - Handle of the provision node.
      *   i_hLogger     - Handle of a logger that receices the children.
      *
      *  Returns:
      *   void

      *=======================================================================
     P ProvisionNode_moveChildren...
     P                 B                   export
     D                 PI
     D  i_hProvNode                               like(LOG4RPG_hLogger_t )
     D  i_hLogger                                 like(LOG4RPG_hLogger_t )
      *
      *  Return value
     D clone           DS                  likeds(LOG4RPG_logger_t)
     D                                     based(hClone)
      *
      *  Hellper fields
     D x               S             10I 0 inz
     D numChildren     S             10I 0 inz
      *
      *  Logger handle
     D provNode        DS                  likeds(LOG4RPG_logger_t)
     D                                     based(hProvNode)
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(hLogger)
     D child           DS                  likeds(LOG4RPG_logger_t)
     D                                     based(hChild)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         hProvNode = i_hProvNode;
         hLogger = i_hLogger;


         p_assert(provNode.node = cLOG4RPG_NODE_PROVISION
                  : 'Expected a provision node');
         p_assert(logger.node = cLOG4RPG_NODE_LOGGER
                  : 'Expected a logger node');
         p_assert(BasicList_getNumE(logger.pChildren) = 0:
                  'Logger must not yet have any hildren');

         numChildren = BasicList_getNumE(provNode.pChildren);
         for x = numChildren downto 1;
            hChild = BasicList_getPointer(provNode.pChildren: x);
            ProvisionNode_removeChild(i_hProvNode: x);
            Logger_addChild(i_hLogger: hChild);
         endfor;

         p_assert(BasicList_getNumE(provNode.pChildren) = 0:
                  'Provision node must not have any hildren');
         p_assert(BasicList_getNumE(logger.pChildren) = numChildren:
                  'Logger must have ' + %char(numChildren) + ' any children');

      /END-FREE
     P                 E
      *
      *=========================================================================
      *  Tests the specified provision node handle for a NULL value.
      *=========================================================================
      *  Parameters:
      *   i_hProvNode   - Handle of the provision node.
      *
      *  Returns:
      *   isNull        - Returns TRUE if the handle is NULL, else TRUE.
      *=========================================================================
     P ProvisionNode_isNull...
     P                 B                   export
     D                 PI              N
     D  i_hProvNode                        const  like(LOG4RPG_hLogger_t )
      *
      *  Logger handle
     D provNode        DS                  likeds(LOG4RPG_logger_t )
     D                                     based(i_hProvNode)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         p_assert(i_hProvNode = *NULL or
                  provNode.node = cLOG4RPG_NODE_PROVISION
                  : 'Expected a provision node');

         return Node_isNull(i_hProvNode);

      /END-FREE
     P                 E
      *
      *=========================================================================
      *  Returns a provision node NULL handle.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   hProvNode     - Returns a NULL handle.
      *=========================================================================
     P ProvisionNode_null...
     P                 B                   export
     D                 PI                         like(LOG4RPG_hLogger_t )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return Node_null();

      /END-FREE
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Clears a given logger handle.
      *=========================================================================
     P clearHandleData...
     P                 B
      *
     D clearHandleData...
     D                 PI
     D  io_logger                                 likeds(LOG4RPG_logger_t)
      *
      *  Return value
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         clear io_logger;

         return;

      /END-FREE
      *
     P clearHandleData...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Deletes a logger.
      *=========================================================================
     P deleteLogger...
     P                 B
      *
     D deleteLogger...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t   )
      *
      *  Helper fields
     D logName         S                   like(LOG4RPG_loggerName_t    ) inz
     D appIter         DS                  likeds(LOG4RPG_Appender...
     D                                            ListIterator_t        ) inz
     D pAppender       S                   like(LOG4RPG_pAppender_t     ) inz
     D logger          DS                  likeds(LOG4RPG_logger_t      )
     D                                     based(i_hLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         logName = logger.name;

         if logger.pAppenderList <> AppenderList_null();
            appIter = AppenderList_getIterator(logger.pAppenderList);

            dow AppenderList_getNumE(logger.pAppenderList) > 0;
               pAppender = AppenderList_getFirst(appIter);
               Logger_removeAppender(i_hLogger: Appender_getName(pAppender));
            enddo;

            AppenderList_delete(logger.pAppenderList);
         endif;

         clearHandleData(logger);

         return;

      /END-FREE
      *
     P deleteLogger...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Returns cTrue if logging is enabled.
      *=========================================================================
     P isLoggingEnabled...
     P                 B
      *
     D isLoggingEnabled...
     D                 PI              N
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(i_hLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return to caller if logging is disabled.
         if not Logger_isLogging();
            return cFalse;
         endif;

         // Return to caller if logger is NULL
         if Logger_isNull(i_hLogger);
            return cFalse;
         endif;

         // Reload properties (if reloading has been enabled)
         Configurator_checkAndReloadPropertiesConfiguration();

         // Return to caller if logger does not exist
         if not Repository_existLogger(logger.name);
            return cFalse;
         endif;

         return cTrue;

      /END-FREE
      *
     P isLoggingEnabled...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Returns the logging priority from the logger hierarchy.
      *=========================================================================
     P getPriorityFromHierarchy...
     P                 B
      *
     D getPriorityFromHierarchy...
     D                 PI                         like(LOG4RPG_priority_t  )
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t   )
      *
      *  Helper fields
     D logger          DS                  likeds(LOG4RPG_logger_t )
     D                                     based(pLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         pLogger = i_hLogger;

         dow logger.priority = cLOG4RPG_LEVEL_PARENT;
            if logger.pParent = Logger_null();
               return cLOG4RPG_PRIORITY_NONE;
               leave;
            endif;
            pLogger = logger.pParent;
         enddo;

         return logger.priority;

      /END-FREE
      *
     P getPriorityFromHierarchy...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Logs the logging event.
      *=========================================================================
     P logLoggingEvent...
     P                 B
      *
     D logLoggingEvent...
     D                 PI
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t   )
     D  i_priority                         const  like(LOG4RPG_priority_t  )
     D  i_text                             const  like(LOG4RPG_text_t      )
     D                                            options(*varsize)
     D  i_caller                           const  likeds(LOG4RPG_caller_t  )
     D  i_errMsg                           const  likeds(msg_t             )
     D                                            options(*nopass)
      *
      *  Parameter positions
     D p_errMsg        C                   5
      *
      *  Helper fields
     D isMsgRtvErr     S               N   inz(cFalse)
     D msgRtvErrText   S            128A   inz
      *
     D x               S             10I 0 inz
     D pPropList       S                   like(LOG4RPG_pPropertyList_t ) inz
     D pAppenderList   S                   like(LOG4RPG_pAppenderList_t ) inz
     D pAppender       S                   like(LOG4RPG_pAppender_t     ) inz
     D pLogEvent       S                   like(LOG4RPG_pLogEvent_t     ) inz
      *
     D appIter         DS                  likeds(LOG4RPG_Appender...
     D                                            ListIterator_t        ) inz
      *
      *  Logger handle
     D logger          DS                  likeds(LOG4RPG_logger_t )
     D                                     based(i_hLogger)
      *
      *  Structure for message data of CPF2419
     D CPF2419         DS                  qualified
     D  msgID                         7A
     D  msgF                         10A
     D  msgFLib                      10A
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         pAppenderList = getAppenderListFromHierarchy(i_hLogger);
         if AppenderList_isNull(pAppenderList);
            if (logger.name = cROOT_LOGGER) and not g_warnRootNoAppender;
               LogLog_warning('No appenders could be found for logger [root]');
               LogLog_warning('Please initialize the log4rpg system properly.');
               g_warnRootNoAppender = cTrue;
            endif;
            return;
         endif;

         appIter = AppenderList_getIterator(pAppenderList);
         pAppender = AppenderList_getFirst(appIter);

         pLogEvent = LogEvent_new(logger.name
                                  : i_priority
                                  : ''
                                  : i_caller);

         if (%parms() >= p_errMsg);
            if (i_errMsg.ID = 'CPF2419');
               CPF2419 = i_errMsg.data;
               msgRtvErrText = 'Unable to retrieve message description of +
                                message ' + CPF2419.msgID +
                                ' from message file ' +
                                %trim(CPF2419.msgFLib) + '/' +
                                %trim(CPF2419.msgF);
               LogLog_error(msgRtvErrText);
               isMsgRtvErr = cTrue;
            endif;
         endif;

         dow not Appender_isNull(pAppender);

            if (isMsgRtvErr);
               LogEvent_setText(pLogEvent: msgRtvErrText);
            else;
               LogEvent_setText(pLogEvent: i_text);
            endif;

            Appender_doAppend(pAppender: pLogEvent);
            pAppender = AppenderList_getNext(appIter);

            pPropList = LogEvent_getPropertyList(pLogEvent);
            if not PropertyList_isNull(pPropList);
               PropertyList_clear(pPropList);
               LogLog_verbose('> Cleared property list of log event');
            endif;

         enddo;

         LogEvent_delete(pLogEvent);

         return;

      /END-FREE
      *
     P logLoggingEvent...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Returns the appender list from the logger hierarchy.
      *=========================================================================
     P getAppenderListFromHierarchy...
     P                 B
      *
     D getAppenderListFromHierarchy...
     D                 PI                         like(LOG4RPG_pAppenderList_t )
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t       )
      *
      *  Helper fields
     D logger          DS                  likeds(LOG4RPG_logger_t )
     D                                     based(pLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         pLogger = i_hLogger;

         dow logger.pAppenderList = AppenderList_null();
            if logger.pParent = Logger_null();
               return AppenderList_null();
               leave;
            endif;
            pLogger = logger.pParent;
         enddo;

         return logger.pAppenderList;

      /END-FREE
      *
     P getAppenderListFromHierarchy...
     P                 E
      *
      *=========================================================================
    R *  *** private ***
      *  Initializes a given logger handle.
      *=========================================================================
      *  Parameters:
      *   i_logger      - Logger handle.
      *
      *  Returns:
      *   void
      *=========================================================================
     P initializeLoggerHandle...
     P                 B
      *
     D initializeLoggerHandle...
     D                 PI
     D  io_logger                                 likeds(LOG4RPG_logger_t  )
     D  i_logName                          const  like(LOG4RPG_loggerName_t)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         clearHandleData(io_logger);

         io_logger.node         = cLOG4RPG_NODE_LOGGER;  // Logger node
         io_logger.pParent      = Logger_null();         // Parent logger
         io_logger.name         = i_logName;             // Logger name
         io_logger.priority     = cLOG4RPG_LEVEL_PARENT; // Use log level of parent logger
         io_logger.pAppenderList= AppenderList_null();   // Appender list
         io_logger.pChildren    = BasicList_new('*CHILDREN');// Children of logger node

         if i_logName = cROOT_LOGGER;
            io_logger.priority = Level_toInt(cLOG4RPG_LEVEL_DEBUG);
         endif;

         return;

      /END-FREE
      *
     P initializeLoggerHandle...
     P                 E
      *
      *=========================================================================
    R *  *** private ***
      *  Initializes a given provision node handle.
      *=========================================================================
     P initializeProvisionNodeHandle...
     P                 B
      *
     D initializeProvisionNodeHandle...
     D                 PI
     D  io_provNode                               likeds(LOG4RPG_logger_t  )
     D  i_nodeName                         const  like(LOG4RPG_loggerName_t)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         clearHandleData(io_provNode);

         io_provNode.node         = cLOG4RPG_NODE_PROVISION; // Provision node
         io_provNode.pParent      = Logger_null();           // No parent logger
         io_provNode.name         = i_nodeName;              // Node name
         io_provNode.priority     = cLOG4RPG_LEVEL_PARENT;   // Use log level of parent logg
         io_provNode.pAppenderList= AppenderList_null();     // No Appender list
         io_provNode.pChildren    = BasicList_new('*CHILDREN');// Children of provision node

         return;

      /END-FREE
      *
     P initializeProvisionNodeHandle...
     P                 E
      *
      *=========================================================================
    R *  *** private ***
      *  Sets an offset to let f_caller() skip the Log4rpg stub module
      *  if present.
      *=========================================================================
     P setStubOfs...
     P                 B                   export
      *
     D setStubOfs...
     D                 PI
     D  i_stubOfs                     3I 0 const
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         g_stubOfs = i_stubOfs;

         return;

      /END-FREE
      *
     P setStubOfs...
     P                 E
      *
      *=========================================================================
    R *  *** private ***
      *  Initializes this module.
      *=========================================================================
     P initializeModule...
     P                 B
      *
     D initializeModule...
     D                 PI
      *
      *  Return value
      *
      *  Helper fields
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if g_isInit;
            return;
         endif;

         Loglog_verbose('Initializing module ' + sds.modContProc + '...');

         Repository_initialize();

         if not Repository_existLogger(cROOT_LOGGER);
            // Configurator_loadDefaultConfiguration();
         endif;

         g_isInit = cTrue;

         return;

      /END-FREE
      *
     P initializeModule...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG02  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG02 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: LoggerList              "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: LoggerList                               *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  13.06.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG02
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PTYPES                        Private type definitions
      *
     D handle_t...
     D                 DS                  qualified               based(pDummy)
     D  pMap                               like(BasicMap_handle_t )
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QBASICS1,PBASICS1                      Basic RPG Extensions
      /COPY QIFS,PIFS                              IFS Stream file support
      *
      /COPY QLOG4RPG,PLOG4RPG10                    LogLog
      /COPY QLOG4RPG,PLOG4RPG99                    Helpers
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      *=========================================================================
      *  Creates a new logger list instance.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   pLoggerList   - Returns a handle to the logger list on success, else
      *                   a NULL handle.
      *=========================================================================
     P LoggerList_new...
     P                 B                   export
      *
     D LoggerList_new...
     D                 PI                         like(LOG4RPG_pLoggerList_t )
      *
      *  Return value
     D logList         DS                  likeds(handle_t       )
     D                                     based(pLogList)
      *
      *  Helper fields
     D tempLogList     DS                  likeds(handle_t       ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         LogLog_verbose('Creating logger list ...');

         pLogList = LoggerList_null();

         // Initialize appender list handle
         clear tempLogList;
         tempLogList.pMap = BasicMap_new();

         // Return properties list to caller
         pLogList = %alloc(%size(handle_t));
         logList = tempLogList;

         LogLog_verbose('+ Allocated memory for logger list.');

         return pLogList;

      /END-FREE
      *
     P LoggerList_new...
     P                 E
      *
      *=========================================================================
      *  Returns the number of entries in the specified logger list.
      *=========================================================================
      *  Parameters:
      *   i_pLogList    - Logger list returned by LoggerList_new().
      *
      *  Returns:
      *   numE          - Returns the number of loggers in this
      *                   logger list on success, else -1.
      *=========================================================================
     P LoggerList_getNumE...
     P                 B                   export
      *
     D LoggerList_getNumE...
     D                 PI            10I 0
     D  i_pLogList                         const  like(LOG4RPG_pLoggerList_t )
      *
      *  Logger list handle
     D logList         DS                  likeds(handle_t    )
     D                                     based(i_pLogList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return BasicMap_getNumE(logList.pMap);

      /END-FREE
      *
     P LoggerList_getNumE...
     P                 E
      *
      *=========================================================================
      *  Adds a logger to the specified logger list.
      *=========================================================================
      *  Parameters:
      *   i_pLogList    - Logger list returned by LoggerList_new().
      *   i_pLogger     - Logger that is added to this logger list.
      *
      *  Returns:
      *   index         - Returns the index of the logger on success,
      *                   else -1.
      *=========================================================================
     P LoggerList_put...
     P                 B                   export
      *
     D LoggerList_put...
     D                 PI            10I 0
     D  i_pLogList                         const  like(LOG4RPG_pLoggerList_t )
     D  i_pLogger                          const  like(LOG4RPG_hLogger_t     )
      *
      *  Helper fields
     D pLogger         S                   like(i_pLogger)
      *
      *  Logger list handle
     D logList         DS                  likeds(handle_t    )
     D                                     based(i_pLogList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         pLogger = i_pLogger;

         return BasicMap_put(logList.pMap: Logger_getName(pLogger)
                                         : %addr(pLogger)
                                         : %len(pLogger ));

      /END-FREE
      *
     P LoggerList_put...
     P                 E
      *
      *=========================================================================
      *  Removes the specified logger from the given logger list.
      *=========================================================================
      *  Parameters:
      *   i_pLogList    - Logger list returned by LoggerList_new().
      *   i_logName     - Name of the logger that is removed from
      *                   this logger list.
      *
      *  Returns:
      *   rc            - Returns 0 on success, else -1.
      *=========================================================================
     P LoggerList_remove...
     P                 B                   export
      *
     D LoggerList_remove...
     D                 PI            10I 0
     D  i_pLogList                         const  like(LOG4RPG_pLoggerList_t )
     D  i_logName                          const  like(LOG4RPG_loggerName_t  )
      *
      *  Logger list handle
     D logList         DS                  likeds(handle_t    )
     D                                     based(i_pLogList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return BasicMap_remove(logList.pMap: i_logName);

      /END-FREE
      *
     P LoggerList_remove...
     P                 E
      *
      *=========================================================================
      *  Returns the logger assigned to the specified logger name.
      *=========================================================================
      *  Parameters:
      *   i_pLogList    - Logger list returned by LoggerList_new().
      *   i_logName     - Name of the logger that is returned.
      *
      *  Returns:
      *   pLogger       - Returns the associated logger on ssuccess, else NULL.
      *=========================================================================
     P LoggerList_get...
     P                 B                   export
      *
     D LoggerList_get...
     D                 PI                         like(LOG4RPG_hLogger_t     )
     D  i_pLogList                         const  like(LOG4RPG_pLoggerList_t )
     D  i_logName                          const  like(LOG4RPG_loggerName_t  )
      *
      *  Return value
     D pLogger         S                   like(LOG4RPG_hLogger_t       ) inz
      *
      *  Logger list handle
     D logList         DS                  likeds(handle_t    )
     D                                     based(i_pLogList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         BasicMap_get(logList.pMap: i_logName: %addr(pLogger)
                                             : %size(pLogger));

         return pLogger;

      /END-FREE
      *
     P LoggerList_get...
     P                 E
      *
      *=========================================================================
      *  Tests, if the logger list contains the specified logger.
      *=========================================================================
      *  Parameters:
      *   i_pLogList    - Logger list returned by LoggerList_new().
      *   i_logName     - Name of the logger.
      *
      *  Returns:
      *   exist         - Returns TRUE if the logger exists, else FALSE.
      *=========================================================================
     P LoggerList_exist...
     P                 B                   export
      *
     D LoggerList_exist...
     D                 PI              N
     D  i_pLogList                         const  like(LOG4RPG_pLoggerList_t )
     D  i_logName                          const  like(LOG4RPG_loggerName_t  )
      *
      *  Logger list handle
     D logList         DS                  likeds(handle_t    )
     D                                     based(i_pLogList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return BasicMap_containsKey(logList.pMap: i_logName);

      /END-FREE
      *
     P LoggerList_exist...
     P                 E
      *
      *=========================================================================
      *  Returns an iterator for the specified logger list.
      *=========================================================================
      *  Parameters:
      *   i_pLogList    - Logger list returned by LoggerList_new().
      *
      *  Returns:
      *   logIter       - Iterator for the logger list.
      *=========================================================================
     P LoggerList_getIterator...
     P                 B                   export
      *
     D LoggerList_getIterator...
     D                 PI                         likeds(LOG4RPG_Logger...
     D                                                           ListIterator_t)
     D  i_pLogList                         const  like(LOG4RPG_pLoggerList_t )
      *
      *  Return value
     D logIter         DS                  likeds(LOG4RPG_Logger...
     D                                                    ListIterator_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         clear logIter;
         logIter.pLogList = i_pLogList;
         logIter.lastLog  = 0;

         return logIter;

      /END-FREE
      *
     P LoggerList_getIterator...
     P                 E
      *
      *=========================================================================
      *  Returns the first logger of the specified logger list.
      *=========================================================================
      *  Parameters:
      *   i_logIter     - Iteratur returned by LoggerList_getIterator().
      *
      *  Returns:
      *   pLogger       - Returns the first logger in the specified
      *                   logger list on success, else a NULL handle.
      *=========================================================================
     P LoggerList_getFirst...
     P                 B                   export
      *
     D LoggerList_getFirst...
     D                 PI                         like(LOG4RPG_hLogger_t       )
     D  io_logIter                                likeds(LOG4RPG_Logger...
     D                                                           ListIterator_t)
      *
      *  Return value
     D pLogger         S                   like(LOG4RPG_hLogger_t       ) inz
      *
      *  Helper fields
     D logName         S                   like(LOG4RPG_loggerName_t   ) inz
      *
      *  Logger list handle
     D logList         DS                  likeds(handle_t    )
     D                                     based(io_logIter.pLogList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         pLogger = Logger_null();

         if LoggerList_getNumE(io_logIter.pLogList) = 0;
            return pLogger;
         endif;

         io_logIter.lastLog = 1;

         logName = BasicMap_getKeyByIndex(logList.pMap
                                       : io_logIter.lastLog);
         pLogger = LoggerList_get(io_logIter.pLogList: logName);

         return pLogger;

      /END-FREE
      *
     P LoggerList_getFirst...
     P                 E
      *
      *=========================================================================
      *  Returns the next logger of the specified logger list.
      *=========================================================================
      *  Parameters:
      *   i_logIter     - Iteratur returned by LoggerList_getIterator().
      *
      *  Returns:
      *   pLogger       - Returns the next logger in the specified
      *                   logger list on success, else a NULL handle.
      *=========================================================================
     P LoggerList_getNext...
     P                 B                   export
      *
     D LoggerList_getNext...
     D                 PI                         like(LOG4RPG_hLogger_t       )
     D  io_logIter                                likeds(LOG4RPG_Logger...
     D                                                           ListIterator_t)
      *
      *  Return value
     D pLogger         S                   like(LOG4RPG_hLogger_t       ) inz
      *
      *  Helper fields
     D logName         S                   like(LOG4RPG_loggerName_t   ) inz
      *
      *  Logger list handle
     D logList         DS                  likeds(handle_t    )
     D                                     based(io_logIter.pLogList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         pLogger = Logger_null();

         if LoggerList_getNumE(io_logIter.pLogList) <= io_logIter.lastLog;
            return pLogger;
         endif;

         io_logIter.lastLog = io_logIter.lastLog + 1;

         logName = BasicMap_getKeyByIndex(logList.pMap
                                       : io_logIter.lastLog);
         pLogger = LoggerList_get(io_logIter.pLogList: logName);

         return pLogger;

      /END-FREE
      *
     P LoggerList_getNext...
     P                 E
      *
      *=========================================================================
      *  Deletes the specified logger list.
      *=========================================================================
      *  Parameters:
      *   io_pLogList   - Logger list returned by LoggerList_new().
      *
      *  Returns:
      *   isDeleted     - Returns TRUE on success, else FALSE.
      *=========================================================================
     P LoggerList_delete...
     P                 B                   export
      *
     D LoggerList_delete...
     D                 PI              N
     D  io_pLogList                               like(LOG4RPG_pLoggerList_t )
      *
      *  Return value
     D isDeleted       S               N   inz(cFalse)
      *
      *  Helper fields
     D logIter         DS                  likeds(LOG4RPG_Logger...
     D                                            ListIterator_t        ) inz
     D pLogger         S                   like(LOG4RPG_hLogger_t       ) inz
      *
      *  Logger list handle
     D logList         DS                  likeds(handle_t    )
     D                                     based(io_pLogList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if BasicMap_isNull(logList.pMap);
            return cTrue;
         endif;

         LogLog_verbose('Deleting logger list ...');

         p_assert(LoggerList_getNumE(io_pLogList) = 0
                  : 'All loggers should have been removed from this +
                     logger list by the repository.');

         logIter = LoggerList_getIterator(io_pLogList);

         dow LoggerList_getNumE(io_pLogList) > 0;
            pLogger = LoggerList_getFirst(logIter);
            LoggerList_remove(io_pLogList: Logger_getName(pLogger));
            Logger_delete(pLogger);
         enddo;

         if BasicMap_delete(logList.pMap) = 0;
            isDeleted = cTrue;
         else;
            isDeleted = cFalse;
         endif;

         io_pLogList = LoggerList_null();

         LogLog_verbose('- Deleted Logger list');

         return isDeleted;

      /END-FREE
      *
     P LoggerList_delete...
     P                 E
      *
      *=========================================================================
      *  Tests the specified logger list for a NULL value.
      *=========================================================================
      *  Parameters:
      *   i_logList     - Logger list returned by LoggerList_new().
      *
      *  Returns:
      *   isNull        - Returns TRUE if the handle of the logger list is a
      *                   NULL handle.
      *=========================================================================
     P LoggerList_isNull...
     P                 B                   export
      *
     D LoggerList_isNull...
     D                 PI              N
     D  i_pLogList                         const  like(LOG4RPG_pLoggerList_t )
      *
      *  Logger list handle
     D logList         DS                  likeds(handle_t    )
     D                                     based(i_pLogList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if i_pLogList = LoggerList_null();
            return cTrue;
         else;
            return BasicMap_isNull(logList.pMap);
         endif;

      /END-FREE
      *
     P LoggerList_isNull...
     P                 E
      *
      *=========================================================================
      *  Returns a NULL logger list.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   pLogList      - Logger list NULL handle.
      *=========================================================================
     P LoggerList_null...
     P                 B                   export
      *
     D LoggerList_null...
     D                 PI                         like(LOG4RPG_pLoggerList_t )
      *
      *  Return value
     D logList         S                   like(LOG4RPG_pLoggerList_t ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return BasicMap_null();

      /END-FREE
      *
     P LoggerList_null...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG03  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG03 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: Appender                "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: Appender                                 *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  13.06.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *  26.10.2006  Th.Raddatz    Introduced Filter to Log4rpg.            *
      *                            Added procedure Appender_knowsProperty().*
      *                            Moved wordWrap processing to Appender    *
      *                            implementation objects.                  *
      *                                                                     *
      *  09.09.2008  Th.Raddatz    Changed parameter 'i_filterName' of      *
      *                            Appender_setFilter() to 'i_pFilter' to   *
      *                            be consistent with Filter_setNext().     *
      *                                                                     *
      *  23.05.2011  Th.Raddatz    Fixed problem that the following         *
      *                            procedure did not return a return value: *
      *                               Appender_setFilter()                  *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG03
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
     D handle_t...
     D                 DS                  qualified               based(pDummy)
     D  name                               like(LOG4RPG_appenderName_t    )
     D  appenderImpl                       likeds(LOG4RPG_classAppender_t )
     D  pLayout                            like(LOG4RPG_pLayout_t         )
     D  pFilter                            like(LOG4RPG_pFilter_t         )
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QLOG4RPG,CEELIB                        CEE-Procedures
      /COPY QBASICS1,PBASICS1                      Basic RPG Extensions
      *
      /COPY QLOG4RPG,PLOG4RPG06                    Property
      /COPY QLOG4RPG,PLOG4RPG07                    PropertyList
      /COPY QLOG4RPG,PLOG4RPG10                    LogLog
      /COPY QLOG4RPG,PLOG4RPG12                    ClassLoader
      /COPY QLOG4RPG,PLOG4RPG13                    Repository
      /COPY QLOG4RPG,PLOG4RPG17                    Filter
      /COPY QLOG4RPG,PLOG4RPG99                    Helpers
      *
      /COPY QLOG4RPG,PFILTER                       Filter implementation
      *
      /DEFINE DEFINE_PROCPTR
      /COPY QLOG4RPG,PAPPENDER                     Appender implementation
      /UNDEFINE DEFINE_PROCPTR
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      *  Initializes this module.
     D initializeModule...
     D                 PR
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
     D cPARAMETER_LAYOUT...
     D                 C                          const('layout')
     D cPARAMETER_FILTER...
     D                 C                          const('filter')
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
     D g_isInit        S               N   inz(cFalse)
      *
      * -----------------------------------------
      *  Program status data structure
      * -----------------------------------------
      /DEFINE SDS_EXTENDED
      /COPY QLOG4RPG,SDS
      /UNDEFINE SDS_EXTENDED
      *
      *=========================================================================
      *  Creates a new appender.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   pAppender     - Returns a handle to the appender on success, else
      *                   a NULL handle.
      *=========================================================================
     P Appender_new...
     P                 B                   export
      *
     D Appender_new...
     D                 PI                         like(LOG4RPG_pAppender_t     )
     D  i_appName                          const  like(LOG4RPG_appenderName_t  )
     D  i_appImpl                          const  like(LOG4RPG_implClass_t     )
     D  i_pPropString                  *   const  options(*nopass:
     D                                                    *omit  : *string)
      *
      *  Return value
     D appender        DS                  likeds(handle_t             )
     D                                     based(pAppender)
      *
      *  Paremeter positions
     D p_pPropString   C                   const(3)
      *
      *  Fields for optional parameters
     D pPropString     S                   like(i_pPropString  ) inz
      *
      *  Helper fields
     D isPresent       S             10I 0 inz
     D pPropList       S                   like(LOG4RPG_pPropertyList_t ) inz
     D tempAppender    DS                  likeds(handle_t              ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         initializeModule();

         LogLog_debug('Creating appender [' + i_appName + '] ...');

         pAppender = Appender_null();

         // Get optional parameters ...
         // ... property string
         if %parms() >= p_pPropString;
            CEETSTA(isPresent: p_pPropString: *omit);
         else;
            isPresent = 0;
         endif;

         if isPresent = 1;
            pPropString = i_pPropString;
         else;
            pPropString = *NULL;
         endif;

         // Initialize appender
         tempAppender.name    = i_appName;
         if not ClassLoader_resolveAppender(i_appImpl
                                            : tempAppender.appenderImpl);
            return pAppender;
         endif;
         tempAppender.pLayout  = Layout_null();
         tempAppender.pFilter  = Filter_null();

         // Create properties list
         if pPropString <> *NULL;
            pPropList = PropertyList_new(pPropString);
         else;
            pPropList = PropertyList_null();
         endif;

         // Create appender handle
         pAppender = %alloc(%size(handle_t));
         appender = tempAppender;

         // Instanciate appender implementation object
         g_pAppender_new = appender.appenderImpl.procNew.procptr;
         SrvPgmAppender_new(pAppender
                            : appender.appenderImpl.pHandle
                            : pPropList
                            : '');

         // Destroy properties list
         if not PropertyList_isNull(pPropList);
            PropertyList_delete(pPropList);
         endif;

         // Add appender to the repository
         Repository_addAppender(pAppender);

         LogLog_verbose('+ Allocated memory for appender [' +
                           appender.name + '].');

         return pAppender;

      /END-FREE
      *
     P Appender_new...
     P                 E
      *
      *=========================================================================
      *  Appends a message to the specified appender.
      *=========================================================================
      *  Parameters:
      *   i_pAppender   - Handle of the appender returned by Appender_new().
      *   i_pLogEvent   - Handle of the Log event that is logged.
      *
      *  Returns:
      *   void
      *=========================================================================
     P Appender_doAppend...
     P                 B                   export
      *
     D Appender_doAppend...
     D                 PI              N
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t     )
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  Return value
     D isAppended      S               N   inz(cFalse)
      *
      *  Helper fields
     D decision        S             10I 0 inz
     D pFilter         S                   like(LOG4RPG_pFilter_t ) inz
      *
      *  Appender handle
     D appender        DS                  likeds(handle_t)
     D                                     based(i_pAppender)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Let the filter decide what to do with the log event
         pFilter = Appender_getFilter(i_pAppender);
         dow not Filter_isNull(pFilter);
            decision = Filter_decide(pFilter: i_pLogEvent);
            select;
            when decision = cFILTER_DENY;
               return cFalse;
            when decision = cFILTER_ACCEPT;
               leave;
            when decision = cFILTER_NEUTRAL;
               pFilter = Filter_getNext(pFilter);
            other;
               LogLog_warning('Invalid return value returned by +
                               Filter_decide() of filter [' +
                               Filter_getName(pFilter) + ']');
               leave;
            endsl;
         enddo;

         // Layout text of logging event
         if Appender_requiresLayout(i_pAppender) and
 B02        not Layout_isNull(appender.pLayout);
            Layout_format(appender.pLayout: i_pLogEvent);
         endif;

         // Append line of log statement to log
         g_pAppender_doAppend = appender.appenderImpl.procDoAppend.procptr;
         isAppended = SrvPgmAppender_doAppend(
                         appender.appenderImpl.pHandle: i_pLogEvent);

         return isAppended;

      /END-FREE
      *
     P Appender_doAppend...
     P                 E
      *
      *=========================================================================
      *  Returns the name of the appender.
      *=========================================================================
      *  Parameters:
      *   i_pAppender   - Handle of the appender returned by Appender_new().
      *
      *  Returns:
      *   name          - Name of the specidfied appender.
      *=========================================================================
     P Appender_getName...
     P                 B                   export
      *
     D Appender_getName...
     D                 PI                         like(LOG4RPG_appenderName_t  )
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t     )
      *
      *  Appender handle
     D appender        DS                  likeds(handle_t)
     D                                     based(i_pAppender)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return appender.name;

      /END-FREE
      *
     P Appender_getName...
     P                 E
      *
      *=========================================================================
      *  Returns the layout of the appender.
      *=========================================================================
      *  Parameters:
      *   i_pAppender   - Handle of the appender returned by Appender_new().
      *
      *  Returns:
      *   i_pLayout     - Handle of the layout.
      *=========================================================================
     P Appender_getLayout...
     P                 B                   export
      *
     D Appender_getLayout...
     D                 PI                         like(LOG4RPG_pLayout_t       )
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t     )
      *
      *  Appender handle
     D appender        DS                  likeds(handle_t)
     D                                     based(i_pAppender)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return appender.pLayout;

      /END-FREE
      *
     P Appender_getLayout...
     P                 E
      *
      *=========================================================================
      *  Sets the properties of the specified appender.
      *=========================================================================
      *  Parameters:
      *   i_pAppender   - Handle of the appender returned by Appender_new().
      *   i_pPropList   - Handle of the properties list.
      *   i_prefix      - Prefix of the relevant property keys.
      *
      *  Returns:
      *   void
      *=========================================================================
     P Appender_setProperties...
     P                 B                   export
      *
     D Appender_setProperties...
     D                 PI
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t     )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Appender handle
     D appender        DS                  likeds(handle_t    )
     D                                     based(i_pAppender)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         g_pAppender_setProperties =
               appender.appenderImpl.procSetProperties.procptr;
         SrvPgmAppender_setProperties(appender.appenderImpl.pHandle
                                      : i_pPropList
                                      : i_prefix);

         return;

      /END-FREE
      *
     P Appender_setProperties...
     P                 E
      *
      *=========================================================================
      *  Deletes a given appender.
      *=========================================================================
      *  Parameters:
      *   io_pAppender  - Handle of the appender returned by Appender_new().
      *
      *  Returns:
      *   isDeleted     - Returns TRUE on success, else FALSE.
      *=========================================================================
      *
     P Appender_delete...
     P                 B                   export
      *
     D Appender_delete...
     D                 PI              N
     D  io_pAppender                              like(LOG4RPG_pAppender_t     )
      *
      *  Return value
     D isDeleted       S               N   inz(cFalse)
      *
      *  Helper fields
     D name            S                   like(appender.name  ) inz
      *
      *  Appender handle
     D appender        DS                  likeds(handle_t)
     D                                     based(io_pAppender)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         initializeModule();

         if not Repository_existAppender(appender.name);
            io_pAppender = Appender_null();
            return cTrue;
         endif;

         LogLog_verbose('Deleting appender [' + appender.name + '] ...');

         name = appender.name;

         // Remove appender from repository
         Repository_removeAppender(appender.name);

         // Delete appender (close appender)
         g_pAppender_delete = appender.appenderImpl.procDelete.procptr;
         isDeleted = SrvPgmAppender_delete(appender.appenderImpl.pHandle);

         // Delete layout
         if Appender_requiresLayout(io_pAppender);
            if not Layout_isNull(appender.pLayout);
               Layout_delete(appender.pLayout);
               appender.pLayout = Layout_null();
            endif;
         endif;

         // Detach filter from appender
         appender.pFilter = Filter_null();

         dealloc(N) io_pAppender;
         io_pAppender = Appender_null();

         LogLog_verbose('- Freed memory of appender [' + name + '].');

         return isDeleted;

      /END-FREE
      *
     P Appender_delete...
     P                 E
      *
      *=========================================================================
      *  Returns TRUE if the appender requires a layout.
      *=========================================================================
      *  Parameters:
      *   i_pAppender   - Handle of the appender returned by Appender_new().
      *
      *  Returns:
      *   reqLayout     - Returns TRUE if the appender requires a layout,
      *                   else FALSE.
      *=========================================================================
     P Appender_requiresLayout...
     P                 B                   export
      *
     D Appender_requiresLayout...
     D                 PI              N
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t     )
      *
      *  Return value
     D reqLayout       S               N   inz(cFalse)
      *
      *  Appender handle
     D appender        DS                  likeds(handle_t)
     D                                     based(i_pAppender)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         g_pAppender_requiresLayout =
                     appender.appenderImpl.procRequiresLayout.procptr;
         reqLayout = SrvPgmAppender_requiresLayout(
                                       appender.appenderImpl.pHandle);

         return reqLayout;

      /END-FREE
      *
     P Appender_requiresLayout...
     P                 E
      *
      *=========================================================================
      *  Sets the layout for the specified appender.
      *=========================================================================
      *  Parameters:
      *   i_pAppender   - Handle of the appender returned by Appender_new().
      *   i_pLayout     - Handle of the layout.
      *
      *  Returns:
      *   isSet         - Returns TRUE on success, else FALSE.
      *=========================================================================
     P Appender_setLayout...
     P                 B                   export
      *
     D Appender_setLayout...
     D                 PI              N
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t     )
     D  i_pLayout                          const  like(LOG4RPG_pLayout_t       )
      *
      *  Appender handle
     D appender        DS                  likeds(handle_t)
     D                                     based(i_pAppender)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         appender.pLayout = i_pLayout;

         return cTrue;

      /END-FREE
      *
     P Appender_setLayout...
     P                 E
      *
      *=========================================================================
      *  Sets the filter for the specified appender.
      *=========================================================================
      *  Parameters:
      *   i_pAppender   - Handle of the appender returned by Appender_new().
      *   i_filterName  - Name of the filter.
      *
      *  Returns:
      *   isSet         - Returns TRUE on success, else FALSE.
      *=========================================================================
     P Appender_setFilter...
     P                 B                   export
      *
     D Appender_setFilter...
     D                 PI              N
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t     )
     D  i_pFilter                          const  like(LOG4RPG_pFilter_t       )
      *
      *  Helper fields
     D filterName      S                   like(LOG4RPG_filterName_t ) inz
      *
      *  Appender handle
     D appender        DS                  likeds(handle_t)
     D                                     based(i_pAppender)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if Filter_isNull(i_pFilter);
            LogLog_warning('Filter is NULL. Please check call from [' +
                           f_caller() + '] to [' + f_this() + '].');
            return cFalse;
         endif;

         filterName = Filter_getName(i_pFilter);

         if not Repository_existFilter(filterName);
            LogLog_warning('Filter [' + filterName +
                           '] does not exist in repository.');
            return cFalse;
         endif;

         appender.pFilter = i_pFilter;

         LogLog_debug('Filter [' + filterName +
                      '] attached to appender [' + appender.name + '].');

         return cTrue;

      /END-FREE
      *
     P Appender_setFilter...
     P                 E
      *
      *=========================================================================
      *  Returns the filter attached to the appender.
      *=========================================================================
      *  Parameters:
      *   i_pAppender   - Handle of the appender returned by Appender_new().
      *
      *  Returns:
      *   pFilter       - Returns the handle of the filter on success, else
      *                   Filter_null();
      *=========================================================================
     P Appender_getFilter...
     P                 B                   export
      *
     D Appender_getFilter...
     D                 PI                         like(LOG4RPG_pFilter_t       )
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t     )
      *
      *  Appender handle
     D appender        DS                  likeds(handle_t)
     D                                     based(i_pAppender)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return appender.pFilter;

      /END-FREE
      *
     P Appender_getFilter...
     P                 E
      *
      *=========================================================================
      *  Tests, whether the specified property is known by the
      *  super Appender.
      *=========================================================================
      *  Parameters:
      *   i_parameter   - Parameter that is tested.
      *
      *  Returns:
      *   isKnown       - Returns TRUE if the property is known by the super
      *                   Appender "class", else FALSE.
      *=========================================================================
     P Appender_knowsProperty...
     P                 B                   export
      *
     D Appender_knowsProperty...
     D                 PI              N
     D  i_parameter                        const  like(LOG4RPG_Property_key_t  )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         select;
         when i_parameter = cPARAMETER_LAYOUT or
              f_startsWith(cPARAMETER_LAYOUT + '.': i_parameter);
            return cTrue;
         when i_parameter = cPARAMETER_FILTER or
              f_startsWith(cPARAMETER_FILTER + '.': i_parameter);
            return cTrue;
         other;
            return cFalse;
         endsl;

      /END-FREE
      *
     P Appender_knowsProperty...
     P                 E
      *
      *=========================================================================
      *  Tests a given appender for a NULL value.
      *=========================================================================
      *  Parameters:
      *   i_pAppender   - Handle of the appender returned by Appender_new().
      *
      *  Returns:
      *   isNull        - Returns TRUE if the handle of the appender is a
      *                   NULL handle.
      *=========================================================================
     P Appender_isNull...
     P                 B                   export
      *
     D Appender_isNull...
     D                 PI              N
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t     )
      *
      *  Return value
     D isNull          S               N   inz(cFalse)
      *
      *  Appender handle
     D appender        DS                  likeds(handle_t)
     D                                     based(i_pAppender)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if i_pAppender = Appender_null();
            isNull = cTrue;
         else;
            isNull = cFalse;
         endif;

         return isNull;

      /END-FREE
      *
     P Appender_isNull...
     P                 E
      *
      *=========================================================================
      *  Returns a NULL appender.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   pAppender     - Appender NULL handle.
      *=========================================================================
     P Appender_null...
     P                 B                   export
      *
     D Appender_null...
     D                 PI                         like(LOG4RPG_pAppender_t     )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return *NULL;

      /END-FREE
      *
     P Appender_null...
     P                 E
      *
      *=========================================================================
    R *  *** private ***
      *  Initializes this module.
      *=========================================================================
     P initializeModule...
     P                 B
      *
     D initializeModule...
     D                 PI
      *
      *  Return value
      *
      *  Helper fields
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if g_isInit;
            return;
         endif;

         Loglog_verbose('Initializing module ' + sds.modContProc + '...');

         Repository_initialize();

         g_isInit = cTrue;

         return;

      /END-FREE
      *
     P initializeModule...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG04  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG04 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: AppenderList            "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: AppenderList                             *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  13.06.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG04
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PTYPES                        Private type definitions
      *
     D handle_t...
     D                 DS                  qualified               based(pDummy)
     D  pMap                               like(BasicMap_handle_t )
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QBASICS1,PBASICS1                      Basic RPG Extensions
      /COPY QIFS,PIFS                              IFS Stream file support
      *
      /COPY QLOG4RPG,PLOG4RPG10                    LogLog
      /COPY QLOG4RPG,PLOG4RPG99                    Helpers
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      *=========================================================================
      *  Creates a new appender list.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   pAppList      - Returns a handle to the appender list on success, else
      *                   a NULL handle.
      *=========================================================================
     P AppenderList_new...
     P                 B                   export
      *
     D AppenderList_new...
     D                 PI                         like(LOG4RPG_pAppenderList_t )
      *
      *  Return value
     D appList         DS                  likeds(handle_t       )
     D                                     based(pAppList)
      *
      *  Helper fields
     D tempAppList     DS                  likeds(handle_t       ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         LogLog_verbose('Creating appender list ...');

         pAppList = AppenderList_null();

         // Initialize appender list handle
         clear tempAppList;
         tempAppList.pMap = BasicMap_new();

         // Return properties list to caller
         pAppList = %alloc(%size(handle_t));
         appList = tempAppList;

         LogLog_verbose('+ Allocated memory for appender list.');

         return pAppList;

      /END-FREE
      *
     P AppenderList_new...
     P                 E
      *
      *=========================================================================
      *  Returns the number of entries in the specified appender list.
      *=========================================================================
      *  Parameters:
      *   i_pAppList    - Appender list returned by AppenderList_new().
      *
      *  Returns:
      *   numE          - Returns the number of appenders in this
      *                   appender list on success, else -1.
      *=========================================================================
     P AppenderList_getNumE...
     P                 B                   export
      *
     D AppenderList_getNumE...
     D                 PI            10I 0
     D  i_pAppList                         const  like(LOG4RPG_pAppenderList_t )
      *
      *  Appender list handle
     D appList         DS                  likeds(handle_t    )
     D                                     based(i_pAppList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return BasicMap_getNumE(appList.pMap);

      /END-FREE
      *
     P AppenderList_getNumE...
     P                 E
      *
      *=========================================================================
      *  Adds an appender to the specified appender list.
      *=========================================================================
      *  Parameters:
      *   i_pAppList    - Appender list returned by AppenderList_new().
      *   i_pAppender   - Appender that is added to this appender list.
      *
      *  Returns:
      *   index         - Returns 0 on success, else -1.
      *=========================================================================
     P AppenderList_put...
     P                 B                   export
      *
     D AppenderList_put...
     D                 PI            10I 0
     D  i_pAppList                         const  like(LOG4RPG_pAppenderList_t )
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t     )
      *
      *  Helper fields
     D pAppender       S                   like(i_pAppender            )
      *
      *  Appender list handle
     D appList         DS                  likeds(handle_t    )
     D                                     based(i_pAppList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         pAppender = i_pAppender;

         return BasicMap_put(appList.pMap: Appender_getName(pAppender)
                                         : %addr(pAppender)
                                         : %len(pAppender ));

      /END-FREE
      *
     P AppenderList_put...
     P                 E
      *
      *=========================================================================
      *  Removes the specified appender from the given appender list.
      *=========================================================================
      *  Parameters:
      *   i_pAppList    - Appender list returned by AppenderList_new().
      *   i_appName     - Name of the appender that is removed from
      *                   this appender list.
      *
      *  Returns:
      *   rc            - Returns 0 on success, else -1.
      *=========================================================================
     P AppenderList_remove...
     P                 B                   export
      *
     D AppenderList_remove...
     D                 PI            10I 0
     D  i_pAppList                         const  like(LOG4RPG_pAppenderList_t )
     D  i_appName                          const  like(LOG4RPG_appenderName_t  )
      *
      *  Appender list handle
     D appList         DS                  likeds(handle_t    )
     D                                     based(i_pAppList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return BasicMap_remove(appList.pMap: i_appName);

      /END-FREE
      *
     P AppenderList_remove...
     P                 E
      *
      *=========================================================================
      *  Returns the appender assigned to the specified key.
      *=========================================================================
      *  Parameters:
      *   i_pAppList    - Appender list returned by AppenderList_new().
      *   i_appName     - Name of the appender that is returned.
      *
      *  Returns:
      *   pAppender     - Returns the associated appender on ssuccess, else NULL.
      *=========================================================================
     P AppenderList_get...
     P                 B                   export
      *
     D AppenderList_get...
     D                 PI                         like(LOG4RPG_pAppender_t     )
     D  i_pAppList                         const  like(LOG4RPG_pAppenderList_t )
     D  i_appName                          const  like(LOG4RPG_appenderName_t  )
      *
      *  Return value
     D pAppender       S                   like(LOG4RPG_pAppender_t     ) inz
      *
      *  Appender list handle
     D appList         DS                  likeds(handle_t    )
     D                                     based(i_pAppList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         BasicMap_get(appList.pMap: i_appName: %addr(pAppender)
                                             : %size(pAppender));

         return pAppender;

      /END-FREE
      *
     P AppenderList_get...
     P                 E
      *
      *=========================================================================
      *  Tests, if the appender list contains the specified appender.
      *=========================================================================
      *  Parameters:
      *   i_pAppList    - Appender list returned by AppenderList_new().
      *   i_appName     - Name of the appender.
      *
      *  Returns:
      *   exist         - Returns TRUE if the appender exists, else FALSE.
      *=========================================================================
     P AppenderList_exist...
     P                 B                   export
      *
     D AppenderList_exist...
     D                 PI              N
     D  i_pAppList                         const  like(LOG4RPG_pAppenderList_t )
     D  i_appName                          const  like(LOG4RPG_appenderName_t  )
      *
      *  Appender list handle
     D appList         DS                  likeds(handle_t    )
     D                                     based(i_pAppList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return BasicMap_containsKey(appList.pMap: i_appName);

      /END-FREE
      *
     P AppenderList_exist...
     P                 E
      *
      *=========================================================================
      *  Returns an iterator for the specified appender list.
      *=========================================================================
      *  Parameters:
      *   i_pAppList    - Appender list returned by AppenderList_new().
      *
      *  Returns:
      *   appIter       - Iterator for the appender list.
      *=========================================================================
     P AppenderList_getIterator...
     P                 B                   export
      *
     D AppenderList_getIterator...
     D                 PI                        likeds(LOG4RPG_Appender...
     D                                                          ListIterator_t )
     D  i_pAppList                         const  like(LOG4RPG_pAppenderList_t )
      *
      *  Return value
     D appIter         DS                  likeds(LOG4RPG_Appender...
     D                                                    ListIterator_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         clear appIter;
         appIter.pAppList = i_pAppList;
         appIter.lastApp  = 0;

         return appIter;

      /END-FREE
      *
     P AppenderList_getIterator...
     P                 E
      *
      *=========================================================================
      *  Returns the first appender of the specified appender list.
      *=========================================================================
      *  Parameters:
      *   io_appIter    - Iteratur returned by AppenderList_getIterator().
      *
      *  Returns:
      *   pAppender     - Returns the first appender in the specified
      *                   appender list on success, else a NULL handle.
      *=========================================================================
     P AppenderList_getFirst...
     P                 B                   export
      *
     D AppenderList_getFirst...
     D                 PI                         like(LOG4RPG_pAppender_t     )
     D  io_appIter                                likeds(LOG4RPG_Appender...
     D                                                           ListIterator_t)
      *
      *  Return value
     D pAppender       S                   like(LOG4RPG_pAppender_t     ) inz
      *
      *  Helper fields
     D appName         S                   like(LOG4RPG_appenderName_t ) inz
      *
      *  Appender list handle
     D appList         DS                  likeds(handle_t    )
     D                                     based(io_appIter.pAppList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         pAppender = Appender_null();

         if AppenderList_getNumE(io_appIter.pAppList) = 0;
            return pAppender;
         endif;

         io_appIter.lastApp = 1;

         appName = BasicMap_getKeyByIndex(appList.pMap
                                          : io_appIter.lastApp);
         pAppender = AppenderList_get(io_appIter.pAppList: appName);

         return pAppender;

      /END-FREE
      *
     P AppenderList_getFirst...
     P                 E
      *
      *=========================================================================
      *  Returns the next appender of the specified appender list.
      *=========================================================================
      *  Parameters:
      *   io_appIter    - Iteratur returned by AppenderList_getIterator().
      *
      *  Returns:
      *   pAppender     - Returns the next appender in the specified
      *                   appender list on success, else a NULL handle.
      *=========================================================================
     P AppenderList_getNext...
     P                 B                   export
      *
     D AppenderList_getNext...
     D                 PI                         like(LOG4RPG_pAppender_t     )
     D  io_appIter                                likeds(LOG4RPG_Appender...
     D                                                           ListIterator_t)
      *
      *  Return value
     D pAppender       S                   like(LOG4RPG_pAppender_t     ) inz
      *
      *  Helper fields
     D appName         S                   like(LOG4RPG_appenderName_t ) inz
      *
      *  Appender list handle
     D appList         DS                  likeds(handle_t    )
     D                                     based(io_appIter.pAppList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         pAppender = Appender_null();

         if AppenderList_getNumE(io_appIter.pAppList) <= io_appIter.lastApp;
            return pAppender;
         endif;

         io_appIter.lastApp = io_appIter.lastApp + 1;

         appName = BasicMap_getKeyByIndex(appList.pMap
                                          : io_appIter.lastApp);
         pAppender = AppenderList_get(io_appIter.pAppList: appName);

         return pAppender;

      /END-FREE
      *
     P AppenderList_getNext...
     P                 E
      *
      *=========================================================================
      *  Deletes the specified appender list.
      *=========================================================================
      *  Parameters:
      *   io_pAppList   - Appender list returned by AppenderList_new().
      *
      *  Returns:
      *   isDeleted     - Returns TRUE on success, else FALSE.
      *=========================================================================
     P AppenderList_delete...
     P                 B                   export
      *
     D AppenderList_delete...
     D                 PI              N
     D  io_pAppList                               like(LOG4RPG_pAppenderList_t )
      *
      *  Return value
     D isDeleted       S               N   inz(cFalse)
      *
      *  Helper fields
     D name            S                   like(LOG4RPG_appenderName_t  ) inz
     D appIter         DS                  likeds(LOG4RPG_Appender...
     D                                            ListIterator_t        ) inz
     D pAppender       S                   like(LOG4RPG_pAppender_t     ) inz
      *
      *  Appender list handle
     D appList         DS                  likeds(handle_t    )
     D                                     based(io_pAppList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if BasicMap_isNull(appList.pMap);
            return cTrue;
         endif;

         LogLog_verbose('Deleting appender list ...');

         p_assert(AppenderList_getNumE(io_pAppList) = 0
                  : 'All appender should have been removed from this +
                     appender list by the logger or the repository.');

         appIter = AppenderList_getIterator(io_pAppList);

         dow AppenderList_getNumE(io_pAppList) > 0;
            pAppender = AppenderList_getFirst(appIter);
            name = Appender_getName(pAppender);
            AppenderList_remove(io_pAppList: name);
            Appender_delete(pAppender);
         enddo;

         if BasicMap_delete(appList.pMap) = 0;
            isDeleted = cTrue;
         else;
            isDeleted = cFalse;
         endif;

         clear appList;
         dealloc(N) io_pAppList;

         io_pAppList = AppenderList_null();

         LogLog_verbose('- Freed memory of appender list.');

         return isDeleted;

      /END-FREE
      *
     P AppenderList_delete...
     P                 E
      *
      *=========================================================================
      *  Test the specified appender list for a NULL value.
      *=========================================================================
      *  Parameters:
      *   i_appList     - Appender list returned by AppenderList_new().
      *
      *  Returns:
      *   isNull        - Returns TRUE if the handle of the appender list is a
      *                   NULL handle.
      *=========================================================================
     P AppenderList_isNull...
     P                 B                   export
      *
     D AppenderList_isNull...
     D                 PI              N
     D  i_pAppList                         const  like(LOG4RPG_pAppenderList_t )
      *
      *  Appender list handle
     D appList         DS                  likeds(handle_t    )
     D                                     based(i_pAppList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if i_pAppList = AppenderList_null();
            return cTrue;
         else;
            return BasicMap_isNull(appList.pMap);
         endif;

      /END-FREE
      *
     P AppenderList_isNull...
     P                 E
      *
      *=========================================================================
      *  Returns a NULL appender list.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   pAppList      - Appender list NULL handle.
      *=========================================================================
     P AppenderList_null...
     P                 B                   export
      *
     D AppenderList_null...
     D                 PI                         like(LOG4RPG_pAppenderList_t )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return BasicMap_null();

      /END-FREE
      *
     P AppenderList_null...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG07  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG07 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: PropertyList            "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: PropertyList                             *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  13.06.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *  16.10.2006 Th.Raddatz     Fix bug in PropertyList_loadFromUrl().   *
      *                            Now returning cFalse on unknown URL      *
      *                            protocol.                                *
      *                                                                     *
      *  26.10.2006 Th.Raddatz     Added procedures:                        *
      *                               PropertyList_containsKey()            *
      *                               PropertyList_remove()                 *
      *                               PropertyList_clear()                  *
      *                                                                     *
      *  27.10.2006 Th.Raddatz     Now changing property key to lower       *
      *                            case, when adding a property.            *
      *                                                                     *
      *  18.04.2008 Th.Raddatz     Fixed problem that loadPropertiesFromMbr *
      *                            crashed with RNX0100 if the record length*
      *                            of a non-source member exceeded 512.     *
      *                                                                     *
      *  18.06.2008 Th.Raddatz     Added special value *SEARCH for the      *
      *                            library name when loading properties     *
      *                            from a physical file member.             *
      *                            Added PropertyList_getUrl() to return    *
      *                            actual URL used to load configuration    *
      *                            data.                                    *
      *                                                                     *
      *  19.06.2008 Th.Raddatz     Fixed potential memory leak. Now the     *
      *                            memory of the PropertyList handle is     *
      *                            correctly freed.                         *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
     FMBR       IF   F  512        DISK    usropn
     F                                     extfile(g_file)
     F                                     extmbr(g_mbr)
     F                                     infds(g_mbrInf)
      *
     D g_file          S             21A   inz
     D g_mbr           S             10A   inz
      *
     D g_mbrInf        DS                  qualified
     D  rcdLength            125    126I 0
     D  sourceFile           163    163A
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG07
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PTYPES                        Private type definitions
      *
     D handle_t...
     D                 DS                  qualified               based(pDummy)
     D  pMap                               like(BasicMap_handle_t )
     D  url                                like(url_t)
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QLOG4RPG,CEELIB                        CEE-Procedures
      /COPY QLOG4RPG,OPNLSTAPIS                    Process Open List APIs
      /COPY QBASICS1,PBASICS1                      Basic RPG Extensions
      /COPY QIFS,PIFS                              IFS Stream file support
      *
      /COPY QLOG4RPG,PLOG4RPG10                    LogLog
      /COPY QLOG4RPG,PLOG4RPG99                    Helpers
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      *  Loads the properties from the specified stream file.
     D loadPropertiesFromStmf...
     D                 PR              N
     D  i_pMap                             const  like(BasicMap_handle_t    )
     D  i_path                             const  like(LOG4RPG_path_t       )
      *
      *  Loads the properties from the specified member.
     D loadPropertiesFromMbr...
     D                 PR              N
     D  i_pMap                             const  like(BasicMap_handle_t    )
     D  i_path                             const  like(LOG4RPG_path_t       )
      *
      *  Loads the properties from embedded string data.
     D loadPropertiesFromString...
     D                 PR              N
     D  i_pMap                             const  like(BasicMap_handle_t    )
     D  i_pString                      *   const  options(*string           )
      *
      *  Test the specified buffer, splitts the buffer and adds the property
      *  to the proeprty list.
     D addPropertyToList...
     D                 PR
     D  i_pMap                             const  like(BasicMap_handle_t    )
     D  i_buffer                    256A   const  varying
      *
      *  Splitts a path into pieces of file, library and member.
     D getMbrLocation...
     D                 PR
     D                                     extproc('+
     D                                     getMbrLocation+
     D                                     ')
     D  i_path                             const  like(LOG4RPG_path_t       )
     D  o_file                       10A
     D  o_lib                        10A
     D  o_mbr                        10A
      *
      *  Spin through all files in the library and search for the specified
      *  specified memebr. Return the library name of the library that
      *  contains the file that contains the member.
     D searchMemberAndReturnLibrary...
     D                 PR            10A
     D                                     extproc('+
     D                                     searchMemberAndReturnLibrary+
     D                                     ')
     D  i_file                       10A   const
     D  i_mbr                        10A   const
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      *=========================================================================
      *  Creates a new property list.
      *=========================================================================
      *  Parameters:
      *   i_pString     - Pointer to a string of properties.
      *
      *  Returns:
      *   pPropList     - Returns a handle to the property list on success, else
      *                   a NULL handle.
      *=========================================================================
     P PropertyList_new...
     P                 B                   export
      *
     D PropertyList_new...
     D                 PI                         like(LOG4RPG_pPropertyList_t )
     D  i_pString                      *   const  options(*nopass:
     D                                                    *omit  : *string)
      *
      *  Parameter positions
     D p_pString       C                   const(1)
      *
      *  Fields for optional parameters
     D pString         S                   like(i_pString   ) inz
      *
      *  Return value
     D propList        DS                  likeds(handle_t  )
     D                                     based(pPropList)
      *
      *  Helper fields
     D isPresent       S             10I 0 inz
     D tempPropList    DS                  likeds(handle_t       ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Get optional parameters
         // ... pString
         if %parms() >= p_pString;
            CEETSTA(isPresent: p_pString: *omit);
         else;
            isPresent = 0;
         endif;

         if isPresent = 1;
            pString = i_pString;
         else;
            pString = *NULL;
         endif;

         LogLog_verbose('Creating properties list ...');

         pPropList = PropertyList_null();

         // Initialize property list handle
         clear tempPropList;
         tempPropList.pMap    = BasicMap_new();
         tempPropList.url     = '';

         // Load properties from string
         if pString <> *NULL;
            if not loadPropertiesFromString(tempPropList.pMap: pString);
               return pPropList;
            endif;
            tempPropList.url = '';
         endif;

         // Return properties list to caller
         pPropList = %alloc(%size(handle_t));
         propList = tempPropList;

         LogLog_verbose('+ Allocated memory for properties list.');

         return pPropList;

      /END-FREE
      *
     P PropertyList_new...
     P                 E
      *
      *=========================================================================
      *  Loads the properties from the specified location.
      *=========================================================================
      *  Parameters:
      *   i_pPropList   - Handle of the property list returned by
      *                   PropertyList_new().
      *   i_url         - The URL that specifies the location where to load the
      *                   properties from.
      *
      *  Returns:
      *   isLoaded      - Returns TRUE on success, else FALSE.
      *=========================================================================
     P PropertyList_loadFromUrl...
     P                 B                   export
      *
     D PropertyList_loadFromUrl...
     D                 PI              N
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_url                              const  like(url_t                   )
      *
      *  Property list handle
     D propList        DS                  likeds(handle_t    )
     D                                     based(i_pPropList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Load properties ...
         select;
         // ... from stream file
         when Url_getProtocol(i_url) = 'file';
            if not loadPropertiesFromStmf(propList.pMap: Url_getPath(i_url));
               return cFalse;
            endif;
            propList.url = i_url;
         when Url_getProtocol(i_url) = 'mbr';
            if not loadPropertiesFromMbr(propList.pMap: Url_getPath(i_url));
               return cFalse;
            endif;
            propList.url = 'mbr:' + %trim(g_file) + '.' + %trim(g_mbr);
         other;
            LogLog_warning('Unknown URL protocol: ' +
                            Url_getProtocol(i_url));
            return cFalse;
         endsl;

         return cTrue;

      /END-FREE
      *
     P PropertyList_loadFromUrl...
     P                 E
      *
      *=========================================================================
      *  Returns the final URL that was used to load the properties.
      *=========================================================================
      *  Parameters:
      *   i_pPropList   - Handle of the property list returned by
      *                   PropertyList_new().
      *
      *  Returns:
      *   url           - URL that was used to load the properties.
      *                   If the properties have been loaded from a string
      *                   an empty string is returned.
      *=========================================================================
     P PropertyList_getUrl...
     P                 B                   export
      *
     D PropertyList_getUrl...
     D                 PI                         like(url_t )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
      *
      *  Property list handle
     D propList        DS                  likeds(handle_t    )
     D                                     based(i_pPropList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return propList.url;

      /END-FREE
      *
     P PropertyList_getUrl...
     P                 E
      *
      *=========================================================================
      *  Returns the number of entries in the specified property list.
      *=========================================================================
      *  Parameters:
      *   i_pPropList   - Handle of the property list returned by
      *                   PropertyList_new().
      *
      *  Returns:
      *   numE          - Returns the number of properties in this
      *                   property list on success, else -1.
      *=========================================================================
     P PropertyList_getNumE...
     P                 B                   export
      *
     D PropertyList_getNumE...
     D                 PI            10I 0
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
      *
      *  Property list handle
     D propList        DS                  likeds(handle_t    )
     D                                     based(i_pPropList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return BasicMap_getNumE(propList.pMap);

      /END-FREE
      *
     P PropertyList_getNumE...
     P                 E
      *
      *=========================================================================
      *  Adds a property to the speciffied property list.
      *=========================================================================
      *  Parameters:
      *   i_pPropList   - Handle of the property list returned by
      *                   PropertyList_new().
      *   i_property    - Property that is added to this property list.
      *
      *  Returns:
      *   index         - Returns the index of the property on success,
      *                   else -1.
      *=========================================================================
     P PropertyList_put...
     P                 B                   export
      *
     D PropertyList_put...
     D                 PI            10I 0
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_property                         const  likeds(LOG4RPG_Property_t    )
      *
      *  Helper fields
     D property        DS                  likeds(i_property)
      *
      *  Property list handle
     D propList        DS                  likeds(handle_t    )
     D                                     based(i_pPropList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         property = i_property;

         return BasicMap_put(propList.pMap: property.key
                                          : %addr(property.value)
                                          : %len(property.value) + 2);

      /END-FREE
      *
     P PropertyList_put...
     P                 E
      *
      *=========================================================================
      *  Returns the value assigned to the specified key.
      *=========================================================================
      *  Parameters:
      *   i_pPropList   - Handle of the property list returned by
      *                   PropertyList_new().
      *   i_key         - Key, whose associated value is returned.
      *
      *  Returns:
      *   value         - Returns the associated value on success, else ''.
      *=========================================================================
     P PropertyList_get...
     P                 B                   export
      *
     D PropertyList_get...
     D                 PI                         like(LOG4RPG_Property_value_t)
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_key                              const  like(LOG4RPG_Property_key_t  )
      *
      *  Return value
     D value           S                   like(LOG4RPG_Property_value_t) inz
      *
      *  Property list handle
     D propList        DS                  likeds(handle_t    )
     D                                     based(i_pPropList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         BasicMap_get(propList.pMap: i_key: %addr(value): %size(value));

         return value;

      /END-FREE
      *
     P PropertyList_get...
     P                 E
      *
      *=========================================================================
      *  Returns an iterator for the specified property list.
      *=========================================================================
      *  Parameters:
      *   i_pPropList   - Handle of the property list returned by
      *                   PropertyList_new().
      *
      *  Returns:
      *   propIter      - Iterator for the property list.
      *=========================================================================
     P PropertyList_getIterator...
     P                 B                   export
      *
     D PropertyList_getIterator...
     D                 PI                         likeds(LOG4RPG_Property...
     D                                                           ListIterator_t)
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
      *
      *  Return value
     D propIter        DS                  likeds(LOG4RPG_Property...
     D                                                    ListIterator_t) inz
      *
      *  Property list handle
     D propList        DS                  likeds(handle_t    )
     D                                     based(i_pPropList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         clear propIter;
         propIter.pPropList = i_pPropList;
         propIter.lastProp  = 0;

         return propIter;

      /END-FREE
      *
     P PropertyList_getIterator...
     P                 E
      *
      *=========================================================================
      *  Returns the first property of the specified property list.
      *=========================================================================
      *  Parameters:
      *   i_pPropList   - Handle of the property list returned by
      *                   PropertyList_new().
      *
      *  Returns:
      *   property      - Returns the first property in the specified
      *                   property list on success, else ''.
      *=========================================================================
     P PropertyList_getFirst...
     P                 B                   export
      *
     D PropertyList_getFirst...
     D                 PI                         likeds(LOG4RPG_Property_t    )
     D  io_propIter                               likeds(LOG4RPG_Property...
     D                                                           ListIterator_t)
      *
      *  Return value
     D property        DS                  likeds(LOG4RPG_Property_t   ) inz
      *
      *  Property list handle
     D propList        DS                  likeds(handle_t    )
     D                                     based(io_propIter.pPropList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if PropertyList_getNumE(io_propIter.pPropList) = 0;
            return property;
         endif;

         io_propIter.lastProp = 1;

         property.key = BasicMap_getKeyByIndex(propList.pMap
                                               : io_propIter.lastProp);
         BasicMap_getValueByIndex(propList.pMap
                                  : io_propIter.lastProp
                                  : %addr(property.value)
                                  : %size(property.value));

         return property;

      /END-FREE
      *
     P PropertyList_getFirst...
     P                 E
      *
      *=========================================================================
      *  Returns the next property of the specified property list.
      *=========================================================================
      *  Parameters:
      *   i_pPropList   - Handle of the property list returned by
      *                   PropertyList_new().
      *
      *  Returns:
      *   property      - Returns the next property in the specified
      *                   property list on success, else ''.
      *=========================================================================
     P PropertyList_getNext...
     P                 B                   export
      *
     D PropertyList_getNext...
     D                 PI                         likeds(LOG4RPG_Property_t    )
     D  io_propIter                               likeds(LOG4RPG_Property...
     D                                                           ListIterator_t)
      *
      *  Return value
     D property        DS                  likeds(LOG4RPG_Property_t   ) inz
      *
      *  Property list handle
     D propList        DS                  likeds(handle_t    )
     D                                     based(io_propIter.pPropList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if PropertyList_getNumE(io_propIter.pPropList) <= io_propIter.lastProp;
            return property;
         endif;

         io_propIter.lastProp = io_propIter.lastProp + 1;

         property.key = BasicMap_getKeyByIndex(propList.pMap
                                               : io_propIter.lastProp);
         BasicMap_getValueByIndex(propList.pMap
                                  : io_propIter.lastProp
                                  : %addr(property.value)
                                  : %size(property.value));

         return property;

      /END-FREE
      *
     P PropertyList_getNext...
     P                 E
      *
      *=========================================================================
      *  Returns true if this property list contains a mapping for the
      *  specified key.
      *=========================================================================
      *  Parameters:
      *   i_pPropList   - Handle of the property list returned by
      *                   PropertyList_new().
      *   i_key         - Key of the property.
      *
      *  Returns:
      *   isFound       - Returns TRUE is this property list contains a mapping
      *                   for the specified key, else FALSE.
      *=========================================================================
     P PropertyList_containsKey...
     P                 B                   export
      *
     D PropertyList_containsKey...
     D                 PI              N
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_key                              const  like(LOG4RPG_Property_key_t  )
      *
      *  Property list handle
     D propList        DS                  likeds(handle_t    )
     D                                     based(i_pPropList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return BasicMap_containsKey(propList.pMap: i_key);

      /END-FREE
      *
     P PropertyList_containsKey...
     P                 E
      *
      *=========================================================================
      *  Removes the specified property from the property list.
      *=========================================================================
      *  Parameters:
      *   i_pPropList   - Handle of the property list returned by
      *                   PropertyList_new().
      *   i_key         - Key of the property.
      *
      *  Returns:
      *   void
      *=========================================================================
     P PropertyList_remove...
     P                 B                   export
      *
     D PropertyList_remove...
     D                 PI
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_key                              const  like(LOG4RPG_Property_key_t  )
      *
      *  Property list handle
     D propList        DS                  likeds(handle_t    )
     D                                     based(i_pPropList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         BasicMap_remove(propList.pMap: i_key);

         return;

      /END-FREE
      *
     P PropertyList_remove...
     P                 E
      *
      *=========================================================================
      *  Removes all properties from the specified property list.
      *=========================================================================
      *  Parameters:
      *   i_pPropList   - Handle of the property list returned by
      *                   PropertyList_new().
      *
      *  Returns:
      *   void
      *=========================================================================
     P PropertyList_clear...
     P                 B                   export
      *
     D PropertyList_clear...
     D                 PI
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
      *
      *  Helper fields
     D x               S             10I 0 inz
     D numE            S             10I 0 inz
     D key             S                   like(LOG4RPG_Property_key_t  )
      *
      *  Property list handle
     D propList        DS                  likeds(handle_t    )
     D                                     based(i_pPropList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         numE = BasicMap_getNumE(propList.pMap);

         for x = 1 to numE;
            key = BasicMap_getKeyByIndex(propList.pMap: 1);
            BasicMap_remove(propList.pMap: key);
         endfor;

         return;

      /END-FREE
      *
     P PropertyList_clear...
     P                 E
      *
      *=========================================================================
      *  Deletes the specified property list.
      *=========================================================================
      *  Parameters:
      *   io_pPropList  - Handle of the property list returned by
      *                   PropertyList_new().
      *
      *  Returns:
      *   isDeleted     - Returns TRUE on success, else FALSE.
      *=========================================================================
     P PropertyList_delete...
     P                 B                   export
      *
     D PropertyList_delete...
     D                 PI              N
     D  io_pPropList                              like(LOG4RPG_pPropertyList_t )
      *
      *  Return value
     D isDeleted       S               N   inz(cFalse)
      *
      *  Property list handle
     D propList        DS                  likeds(handle_t    )
     D                                     based(io_pPropList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         LogLog_verbose('Deleting properties list ...');

         if (not BasicMap_isNull(propList.pMap));
            BasicMap_delete(propList.pMap);
         endif;

         propList.url = '';

         clear propList;
         dealloc(N) io_pPropList;

         io_pPropList = PropertyList_null();

         LogLog_verbose('- Freed memory of properties list.');

         isDeleted = cTrue;

         return isDeleted;

      /END-FREE
      *
     P PropertyList_delete...
     P                 E
      *
      *=========================================================================
      *  Tests the specified property list for a NULL value.
      *=========================================================================
      *  Parameters:
      *   i_pPropList   - Handle of the property list returned by
      *                   PropertyList_new().
      *
      *  Returns:
      *   isNull        - Returns TRUE if the handle of the property list is a
      *                   NULL handle.
      *=========================================================================
     P PropertyList_isNull...
     P                 B                   export
      *
     D PropertyList_isNull...
     D                 PI              N
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
      *
      *  Property list handle
     D propList        DS                  likeds(handle_t    )
     D                                     based(i_pPropList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if i_pPropList = PropertyList_null();
            return cTrue;
         else;
            return BasicMap_isNull(propList.pMap);
         endif;

      /END-FREE
      *
     P PropertyList_isNull...
     P                 E
      *
      *=========================================================================
      *  Returns a NULL properties list.
      *=========================================================================
      *  Parameters:
      *
      *  Returns:
      *   pPropList     - Property list NULL handle.
      *=========================================================================
     P PropertyList_null...
     P                 B                   export
      *
     D PropertyList_null...
     D                 PI                         like(LOG4RPG_pPropertyList_t )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return BasicMap_null();

      /END-FREE
      *
     P PropertyList_null...
     P                 E
      *
      *=========================================================================
      *  *** Private ***
      *  Loads the properties from the specified stream file.
      *=========================================================================
     P loadPropertiesFromStmf...
     P                 B
      *
     D loadPropertiesFromStmf...
     D                 PI              N
     D  i_pMap                             const  like(BasicMap_handle_t    )
     D  i_path                             const  like(LOG4RPG_path_t       )
      *
      *  Return value
     D isLoaded        S               N   inz(cFalse)
      *
      *  Helper fields
     D hFile           S                   like(ifs_hFile_t ) inz
     D bytesRed        S             10I 0                    inz
     D buffer          S           1024A                      inz
     D msg             DS                  likeds(msg_t             ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         LogLog_debug('Loading properties from file [' + i_path + '] ...');

         // Test, if configuration file exists
         if not f_isIfsFile(i_path: msg);
            LogLog_warningMsg(msg);
            return isLoaded;
         endif;

         hFile = f_openIfsFile(i_path
                               : O_RDONLY + O_SHARE_RDONLY + O_TEXTDATA
                               : *omit: *omit: msg);
         if hFile = RC_ERROR;
            LogLog_warningMsg(msg);
            return isLoaded;
         endif;

         bytesRed = f_readLineIfsFile(hFile
                                      : %addr(buffer): %size(buffer): *omit);
         dow   bytesRed <> cIFS_EOF;

            if bytesRed > 0;
               addPropertyToList(i_pMap: %subst(buffer: 1: bytesRed));
            endif;

            bytesRed = f_readLineIfsFile(hFile
                                         : %addr(buffer): %size(buffer): *omit);
         enddo;

         f_closeIfsFile(hFile);

         LogLog_verbose('Loaded properties from file [' + i_path + '].');

         isLoaded = cTrue;

         return isLoaded;

      /END-FREE
      *
     P loadPropertiesFromStmf...
     P                 E
      *
      *=========================================================================
      *  *** Private ***
      *  Loads the properties from the specified member.
      *=========================================================================
     P loadPropertiesFromMbr...
     P                 B
      *
     D loadPropertiesFromMbr...
     D                 PI              N
     D  i_pMap                             const  like(BasicMap_handle_t    )
     D  i_path                             const  like(LOG4RPG_path_t       )
      *
      *  Return value
     D isLoaded        S               N   inz(cFalse)
      *
      *  Helper fields
     D file            S             10A   inz
     D lib             S             10A   inz
     D member          S             10A   inz
     D length          S             10I 0 inz
     D warnLength      S               N   inz(cFalse)
      *
     D inBufMbr        DS                  qualified
     D  data                        512A
      *
     D inBufSrcMbr     DS                  qualified
     D  srcSeq                        6S 2
     D  srcDat                        6S 0
     D  srcDta                      500A
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         LogLog_debug('Loading properties from member [' + i_path + '] ...');

         getMbrLocation(i_path: file: lib: member);
         if (f_ucase(lib) = cLOG4RPG_LIB_SEARCH);
            lib = searchMemberAndReturnLibrary(file: member);
         endif;

         // Test, if configuration file exists
         if not f_exist(file: lib: '*FILE': member);
            LogLog_warning('Member ' + %trim(member) + ' in file ' +
                            %trim(file) + ' in library ' +
                            %trim(lib)  + ' does not exist.');
            return isLoaded;
         endif;

         g_file = %trim(lib) + '/' + %trim(file);
         g_mbr  = %trim(member);

         open(E) MBR;

         if %error();
            LogLog_warning('Could not open member [' + %trim(member) + '].');
            return isLoaded;
         endif;

         p_rmvPgmMsg(cMsg_Rmv_All: *omit: cMsg_Same: cMsg_ToMyself);

         setll 1 MBR;

         dow %found(MBR);
            if g_mbrInf.sourceFile = 'Y';
               read MBR inBufSrcMbr;
            else;
               read MBR inBufMbr;
            endif;

            if %eof(MBR);
               leave;
            endif;

            if g_mbrInf.sourceFile = 'Y';
               length = g_mbrInf.rcdLength - (%size(inBufSrcMbr.SrcSeq) +
                                              %size(inBufSrcMbr.SrcDat));
               addPropertyToList(i_pMap: %subst(inBufSrcMbr.srcDta
                                                : 1
                                                : length));
            else;
               if g_mbrInf.rcdLength > %len(inBufMbr.data);
                  length = %len(inBufMbr.data);
                  if not warnLength;
                     // LogLog_warning('Record length of properties file +
                     //                 exceeded maximum of ' +
                     //                 %char(%len(inBufMbr.data)) + ' byte.');
                     warnLength = cTrue;
                  endif;
               else;
                  length = g_mbrInf.rcdLength;
               endif;
               addPropertyToList(i_pMap: %subst(inBufMbr.data
                                                : 1
                                                : length));
            endif;
         enddo;

         close MBR;

         LogLog_verbose('Loaded properties from member [' + i_path + '].');

         isLoaded = cTrue;

         return isLoaded;

      /END-FREE
      *
     P loadPropertiesFromMbr...
     P                 E
      *
      *=========================================================================
      *  *** Private ***
      *  Loads the properties from embedded string data.
      *=========================================================================
     P loadPropertiesFromString...
     P                 B
      *
     D loadPropertiesFromString...
     D                 PI              N
     D  i_pMap                             const  like(BasicMap_handle_t    )
     D  i_pString                      *   const  options(*string           )
      *
      *  Return value
     D isLoaded        S               N   inz(cFalse)
      *
      *  Helper fields
     D pToken          S               *   inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         LogLog_debug('Loading properties from string ...');

         pToken = strtok(i_pString: ';');
         dow pToken <> *NULL;
            addPropertyToList(i_pMap: %str(pToken));
            pToken = strtok(*NULL: ';');
         enddo;

         LogLog_verbose('Loaded properties from string.');

         isLoaded = cTrue;

         return isLoaded;

      /END-FREE
      *
     P loadPropertiesFromString...
     P                 E
      *
      *=========================================================================
      *  *** Private ***
      *  Test the specified buffer, splitts the buffer and adds the property
      *  to the proeprty list.
      *=========================================================================
     P addPropertyToList...
     P                 B
      *
     D addPropertyToList...
     D                 PI
     D  i_pMap                             const  like(BasicMap_handle_t    )
     D  i_buffer                    256A   const  varying
      *
      *  Helper fields
     D x               S             10I 0                    inz
     D char            S              1A                      inz
     D buffer          S                   like(i_buffer    ) inz
     D property        DS                  likeds(LOG4RPG_Property_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         buffer = %trim(i_buffer);

         if buffer = '';
            return;
         endif;

         char   = %subst(buffer: 1: 1);

         if (char <> '#') and (char <> ';') and (char <> '!');
            x = %scan('=': buffer);
            if (x > 1) and (x < %len(buffer));

               property.key   = f_lcase(%trim(%subst(buffer: 1: x-1)));
               property.value = %trim(%subst(buffer: x+1));

               BasicMap_put(i_pMap: property.key
                                  : %addr(property.value)
                                  : %len(property.value) + 2);
            endif;
         endif;

         return;

      /END-FREE
      *
     P addPropertyToList...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Splitts a path into pieces of file, library and member.
      *=========================================================================
     P getMbrLocation...
     P                 B
      *
     D getMbrLocation...
     D                 PI
     D  i_path                             const  like(LOG4RPG_path_t       )
     D  o_file                       10A
     D  o_lib                        10A
     D  o_mbr                        10A
      *
      *  Helper fields
     D x               S             10I 0 inz
     D path            S                   like(i_path   ) inz
     D closingChar     S              1A   inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         o_file = '';
         o_lib  = '';
         o_mbr  = '';

         if i_path = '';
            LogLog_warning('Specified path is *BLANKS.');
            return;
         endif;

         path = f_ucase(%trim(i_path));

         // Get library name from path
         x = %scan('/': path);

         select;
         when x > 11;
            LogLog_warning('Library name is too long.');
            LogLog_warning('Path is: ' + i_path);
            return;
         when x > 1;
            o_lib = %subst(path: 1: x-1);
            if x < %len(path);
               path = %subst(path: x+1);
            else;
               LogLog_warning('Specified path does not contain +
                               file and member names.');
               LogLog_warning('Path is: ' + i_path);
               return;
            endif;
         when x = 1;
            o_lib = '*LIBL';
            path = %subst(path: x+1);
         other;
            o_lib = '*LIBL';
         endsl;

         // Get file name from path
         x = %scan('(': path);
         if x > 0;
            closingChar = ')';
         else;
            x = %scan('.': path);
            if x > 0;
               closingChar = '';
            else;
               x = %len(path) + 1;
            endif;
         endif;

         select;
         when x > 11;
            LogLog_warning('File name is too long.');
            LogLog_warning('Path is: ' + i_path);
            return;
         when x > 1;
            o_file = %subst(path: 1: x-1);
            if x < %len(path);
               path = %subst(path: x+1);
            else;
               o_mbr = '*FIRST';
               return;
            endif;
         when x = 1;
            LogLog_warning('File portion is missing in path.');
            LogLog_warning('Path is: ' + i_path);
            return;
         endsl;

         // Get member name from path
         if closingChar = '';
            x = %len(path) + 1;
         else;
            x = %scan(closingChar: path);
            if x = 0;
               LogLog_warning('Closing character [' + closingChar +
                               '] is missing.');
               LogLog_warning('Path is: ' + i_path);
               return;
            endif;
         endif;

         select;
         when x > 11;
            LogLog_warning('Member name is too long.');
            LogLog_warning('Path is: ' + i_path);
            return;
         when x > 1;
            o_mbr = %subst(path: 1: x-1);
         other;
            LogLog_warning('Member portion is missing in path.');
            LogLog_warning('Path is: ' + i_path);
            return;
         endsl;

         return;

      /END-FREE
      *
     P getMbrLocation...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Spin through all files in the library and search for the specified
      *  specified memebr. Return the library name of the library that
      *  contains the file that contains the member.
      *=========================================================================
     P searchMemberAndReturnLibrary...
     P                 B
      *
     D searchMemberAndReturnLibrary...
     D                 PI            10A
     D  i_file                       10A   const
     D  i_mbr                        10A   const
      *
      *  Helper fields
     D i               S             10I 0 inz
     D qObj            DS                  likeds(qObj_t    ) inz
      *
     D authCtrl        DS                  likeds(qgy_authCtrl_t   ) inz
     D selectCtrl      DS                  likeds(qgy_selectCtrl_t ) inz
     D listInf         DS                  likeds(qgy_opnListInf_t ) inz
     D sortInf         DS                  likeds(qgy_sortInf_t    ) inz
     D objInf          DS                  likeds(qgy_objInf_t     ) inz
      *
     D errCode         DS                  likeds(errCode_t        ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not f_exist('QGYOLOBJ': '*LIBL': '*PGM'));
            LogLog_warning('Open List of Objects (QGYOLOBJ) API not found.');
            LogLog_warning('- Please install the Host Servers option of i5/OS');
            LogLog_warning('  to be able to use the ' + cLOG4RPG_LIB_SEARCH +
                           ' special value.');
            return '*LIBL';
         endif;

         qObj.name = i_file;
         qObj.lib  = '*LIBL';

         authCtrl.length     = %size(authCtrl);
         authCtrl.callLvl    = 0;
         authCtrl.ofsObjAuth = %size(authCtrl) - %size(authCtrl.objAuthList)
                                               - %size(authCtrl.libAuthList);
         authCtrl.numObjAuth = 1;
         authCtrl.ofsLibAuth = %size(authCtrl) - %size(authCtrl.libAuthList);
         authCtrl.numLibAuth = 1;
         authCtrl.reserved_1 = *ALLx'00';
         authCtrl.objAuthList.auth(1) = '*USE';
         authCtrl.libAuthList.auth(1) = '*USE';

         selectCtrl.length     = %size(selectCtrl);
         selectCtrl.value      = 0;   // 0=select; 1=omit
         selectCtrl.ofsStat    = %size(selectCtrl) -
                                 %size(selectCtrl.statList);
         selectCtrl.numStat    = 1;
         selectCtrl.reserved_1 = 0;
         selectCtrl.statList.stat(1) = ' ';   // return no-eeror entries only

         clear objInf;
         clear listInf;
         errCode = f_newApiErrCode(cTrue);

         monitor;
            QGYOLOBJ(objInf: 0: listInf: -1: sortInf: qObj: '*ALL':
                     authCtrl: selectCtrl: 0: '': errCode);

            i = 0;
            dow (i < listInf.totalRcds);
               i = i + 1;
               // Get next object in list
               QGYGTLE(objInf: %size(objInf)
                       : listInf.hRequest: listInf: 1: i: errCode);
               if (f_exist(objInf.name: objInf.lib: '*FILE': i_mbr));
                  return objInf.lib;
               endif;
            enddo;

            // Close list of objects
            QGYCLST(listInf.hREquest: errCode);
         on-error;
            return '*LIBL';
         endmon;

         return '*LIBL';

      /END-FREE
      *
     P searchMemberAndReturnLibrary...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG08  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG08 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: Configurator            "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: Configurator                             *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  13.06.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *  26.10.2006  Th.Raddatz    Introduced Filter to Log4rpg.            *
      *                                                                     *
      *  27.10.2006  Th.Raddatz    Fixed problem that properties were not   *
      *                            found because auf case mismatch.         *
      *                            Added feature to completely enable/      *
      *                            disable Log4rpg. Logger_isLogging().     *
      *                                                                     *
      *  14.11.2006  Th.Raddatz    Fixed problem that appender 'defaultFile'*
      *                            was not found when the default           *
      *                            configuration was used.                  *
      *                                                                     *
      *  18.04.2008  Th.Raddatz    Added support to reload the configuration*
      *                            data every n minutes:                    *
      *                            Configurator_loadAndWatchProp...()       *
      *                                                                     *
      *  19.06.2008  Th.Raddatz    Added support for *SEARCH special value. *
      *                                                                     *
      *  20.06.2008  Th.Raddatz    Fixed problem that appenders, layouts    *
      *                            and filters were not (re)configured when *
      *                            reloading configuration data.            *
      *                                                                     *
      *  09.09.2008  Th.Raddatz    Changed call to Appender_setFilter()     *
      *                            to pass a filter handle instead of a     *
      *                            filter name.                             *
      *                                                                     *
      *  14.02.2014  Th.Raddatz    Now calling Repository_dumpHierarchy()   *
      *                            for debugging purposes.                  *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG08
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG                      Public interface & type definitions
      /COPY QLOG4RPG,PLOG4RPG01                    Logger
      /COPY QLOG4RPG,PLOG4RPG10                    LogLog
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QLOG4RPG,CLIB                          C-Library
      /COPY QBASICS1,PBASICS1                      Basic RPG Extensions
      /COPY QIFS,PIFS                              IFS Stream file support
      *
      /COPY QLOG4RPG,PLOG4RPG03                    Appender
      /COPY QLOG4RPG,PLOG4RPG06                    Property
      /COPY QLOG4RPG,PLOG4RPG07                    Property List
      /COPY QLOG4RPG,PLOG4RPG10                    LogLog
      /COPY QLOG4RPG,PLOG4RPG12                    ClassLoader
      /COPY QLOG4RPG,PLOG4RPG13                    Repository
      /COPY QLOG4RPG,PLOG4RPG14                    DebugMode
      /COPY QLOG4RPG,PLOG4RPG15                    DebugOutput
      /COPY QLOG4RPG,PLOG4RPG17                    Filter
      /COPY QLOG4RPG,PLOG4RPG99                    Helpers
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      *  Configures LOG4RPG from a properties file.
     D loadPropertiesConfiguration...
     D                 PR              N
     D  i_path                             const  like(LOG4RPG_path_t   )
     D  o_realPath                                like(LOG4RPG_path_t   )
      *
      *  Configures log4rpg.
     D doConfigure...
     D                 PR
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
      *
      *  Configures the base system of log4rpg.
     D configureBaseSystem...
     D                 PR
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
      *
      *  Configures the internal log of Log4rpg.
     D configureInternalLog...
     D                 PR
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
      *
      *  Configures Log4rpg mode (enable/disable).
     D configureLog4rpgMode...
     D                 PR
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
      *
      *  Configures the root logger.
     D configureRootLogger...
     D                 PR
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
      *
      *  Configures a logger.
     D configureLoggers...
     D                 PR
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Parse configuration data of the specified logger.
     D parseLogger...
     D                 PR
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_pLogger                          const  like(LOG4RPG_hLogger_t       )
     D  i_value                            const  like(LOG4RPG_Property_value_t)
      *
      *  Parse appender configuration data.
     D parseAppender...
     D                 PR                         like(LOG4RPG_pAppender_t     )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_appName                          const  like(LOG4RPG_appenderName_t  )
      *
      *  Parse filter configuration data.
     D parseFilter...
     D                 PR                         like(LOG4RPG_pFilter_t       )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_filterName                       const  like(LOG4RPG_filterName_t    )
     D  i_pFilterMap                       const  like(BasicMap_handle_t       )
     D                                            options(*nopass)
      *
      *  Parse layout configuration data.
     D parseLayout...
     D                 PR                         like(LOG4RPG_pLayout_t       )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_logName                          const  like(LOG4RPG_loggerName_t    )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Disables the auto-reload feature.
     D AutoReload_disable...
     D                 PR
      *
      *  Enables the auto-reload feature.
     D AutoReload_enable...
     D                 PR
     D  i_url                              const  like(url_t )
     D  i_minutes                    10I 0 const
     D  i_unit                       10A   const
      *
      *  Updates the time the properties file was last modified.
     D AutoReload_updateLastModificationTime...
     D                 PR
      *
      *  Sets the time the properties file has to be checked for changes.
     D AutoReload_setNextUpdateTime...
     D                 PR
      *
      *  Initializes this module.
     D initializeModule...
     D                 PR
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
     D cROOT_LOGGER_PREFIX...
     D                 C                   const('log4rpg.rootlogger')
     D cLOGGER_PREFIX...
     D                 C                   const('log4rpg.logger.')
      *
     D cAPPENDER_PREFIX...
     D                 C                   const('log4rpg.appender.')
     D cLAYOUT_SUFFIX...
     D                 C                   const('.layout')
      *
     D cFILTER_PREFIX...
     D                 C                   const('log4rpg.filter.')
      *
     D cFILTER_SUFFIX...
     D                 C                   const('.filter')
     D cFILTER_NEXT_FILTER...
     D                 C                   const('.nextfilter')
      *
     D cPROPERTY_LOG4RPG...
     D                 C                   const('log4rpg')
      *
     D cPROPERTY_DEBUG...
     D                 C                   const('log4rpg.debug')
      *
     D cCOMPILER_MSECONDS...
     D                 C                   const('*MSECONDS')
     D cCOMPILER_MSECONDS_SHORT...
     D                 C                   const('*MS')
     D cCOMPILER_SECONDS...
     D                 C                   const('*SECONDS')
     D cCOMPILER_SECONDS_SHORT...
     D                 C                   const('*S')
     D cCOMPILER_MINUTES...
     D                 C                   const('*MINUTES')
     D cCOMPILER_MINUTES_SHORT...
     D                 C                   const('*MN')
     D cCOMPILER_HOURS...
     D                 C                   const('*HOURS')
     D cCOMPILER_HOURS_SHORT...
     D                 C                   const('*H')
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
     D g_isInit        S               N   inz(cFalse)
      *
     D g_autoReload    DS                  qualified
     D  isAutoReload                   N   inz(cFalse)
     D  waitTime                     10I 0 inz
     D  unit                         10A   inz
     D  reloadURL                          like(url_t ) inz
     D  nextUpd                        Z   inz
     D  lastMod                        Z   inz
     D  lastUpd                        Z   inz
      *
      * -----------------------------------------
      *  Program status data structure
      * -----------------------------------------
      /DEFINE SDS_EXTENDED
      /COPY QLOG4RPG,SDS
      /UNDEFINE SDS_EXTENDED
      *
      *=========================================================================
      *  Configures LOG4RPG using a default configuration.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   isConfigured  - Returns TRUE on succes, else FALSE.
      *
      *  Default configuration:
      *   log4rpg.rootLogger=DEBUG, defaultFile
      *   log4rpg.appender.defaultFile=DailyRollingFileAppender
      *   log4rpg.appender.defaultFile.path=log4rpg.log
      *   log4rpg.appender.defaultFile.datePattern=.yyyy-MM-dd
      *   log4rpg.appender.defaultFile.layout=PatternLayout
      *=========================================================================
     P Configurator_loadDefaultConfiguration...
     P                 B                   export
      *
     D Configurator_loadDefaultConfiguration...
     D                 PI              N
      *
      *  Return value
     D isConfigured    S               N   inz(cFalse)
      *
      *  Helper fields
     D property        DS                  likeds(LOG4RPG_Property_t    ) inz
     D pPropList       S                   like(LOG4RPG_pPropertyList_t ) inz
     D msg             DS                  likeds(msg_t                 ) inz
      *
      *  Local constants
     D cDEFAULT_APPENDER...
     D                 C                   const('defaultfile')
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if not Logger_isLogging();
            return isConfigured;
         endif;

         initializeModule();

         AutoReload_disable();

         LogLog_debug('Loading default configuration ...');

         // Create property list for default configuration
         pPropList = PropertyList_new();

         // Add properties ...
         // ...  log4rpg.rootLogger=DEBUG, defaultFile
         property.key   = cROOT_LOGGER_PREFIX;
         property.value = 'DEBUG, ' + cDEFAULT_APPENDER;
         PropertyList_put(pPropList: property);

         // ...  log4rpg.appender.defaultFile=DailyRollingFileAppender
         property.key   = cAPPENDER_PREFIX + cDEFAULT_APPENDER;
         property.value = 'DailyRollingFileAppender';
         PropertyList_put(pPropList: property);

         // ...  log4rpg.appender.defaultFile.path=log4rpg.log
         property.key   = cAPPENDER_PREFIX + cDEFAULT_APPENDER + '.path';
         property.value = 'log4rpg.log';
         PropertyList_put(pPropList: property);

         // ...  log4rpg.appender.defaultFile.datePattern=.yyyy-MM-dd
         property.key   = cAPPENDER_PREFIX + cDEFAULT_APPENDER + '.datePattern';
         property.value = '.yyyy-MM-dd';
         PropertyList_put(pPropList: property);

         // ...  log4rpg.appender.defaultFile.layout=PatternLayout
         property.key   = cAPPENDER_PREFIX + cDEFAULT_APPENDER + '.layout';
         property.value = 'PatternLayout';
         PropertyList_put(pPropList: property);

         // Configure root and non-root loggers
         doConfigure(pPropList);

         // Free resources
         PropertyList_delete(pPropList);

         LogLog_debug('Finished loading default configuration.');
         LogLog_debug('LOG4RPG is configured, now.');

         isConfigured = cTrue;

         return isConfigured;

      /END-FREE
      *
     P Configurator_loadDefaultConfiguration...
     P                 E
      *
      *=========================================================================
      *  Configures LOG4RPG from a properties file.
      *=========================================================================
      *  Parameters:
      *   i_path        - String URL that conatins the location where to
      *                   load the properties from.
      *
      *  Returns:
      *   isConfigured  - Returns TRUE on succes, else FALSE.
      *
      *  Samples:
      *   Configurator_loadPropertiesConfiguration('file:log4rpg.properties')
      *   Configurator_loadPropertiesConfiguration('mbr:QLOG4RPG.B_PROPS')
      *=========================================================================
     P Configurator_loadPropertiesConfiguration...
     P                 B                   export
      *
     D Configurator_loadPropertiesConfiguration...
     D                 PI              N
     D  i_path                             const  like(LOG4RPG_path_t   )
      *
      *  Return value
     D isConfigured    S               N   inz(cFalse)
      *
      *  Helper fields
     D realPath        S                   like(LOG4RPG_path_t          ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if not Logger_isLogging();
            return isConfigured;
         endif;

         initializeModule();

         AutoReload_disable();

         if not loadPropertiesConfiguration(i_path: realPath);
            return isConfigured;
         endif;

         isConfigured = cTrue;

         return isConfigured;

      /END-FREE
      *
     P Configurator_loadPropertiesConfiguration...
     P                 E
      *
      *=========================================================================
      *  Configures LOG4RPG from a properties file. Watches the properties
      *  for changes and reloads the configuration on changes.
      *=========================================================================
      *  Parameters:
      *   i_path        - String URL that conatins the location where to
      *                   load the properties from.
      *   i_waitTime    - Time to wait until going to check for changed
      *                   configuration data. Default: 1
      *   i_unit        - Unit of i_waitTime. Default: minutes
      *
      *  Returns:
      *   isConfigured  - Returns TRUE on succes, else FALSE.
      *=========================================================================
     P Configurator_loadAndWatchPropertiesConfiguration...
     P                 B                   export
      *
     D Configurator_loadAndWatchPropertiesConfiguration...
     D                 PI              N
     D  i_path                             const  like(LOG4RPG_path_t   )
     D  i_waitTime                   10I 0 const  options(*nopass)
     D  i_unit                       10A   const  options(*nopass)
      *
      *  Return value
     D isConfigured    S               N   inz(cFalse)
      *
      *  Parameter positions
     D p_waitTime      C                   const(2)
     D p_unit          C                   const(3)
      *
      *  Field for optional parameters
     D waitTime        S                   like(i_waitTime  ) inz
     D unit            S                   like(i_unit      ) inz
      *
      *  Helper fields
     D realPath        S                   like(LOG4RPG_path_t          ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if not Logger_isLogging();
            return isConfigured;
         endif;

         initializeModule();

         // Get optional parameter values ...
         // ... waitTime
         if %parms() >= p_waitTime;
            waitTime = i_waitTime;
         else;
            waitTime = cLOG4RPG_CONFIGURATION_DEFAULT_RELOAD_DELAY;
         endif;

         // ... unit
         if %parms() >= p_unit;
            unit = i_unit;
         else;
            unit = cLOG4RPG_CONFIGURATION_DEFAULT_RELOAD_DELAY_UNIT;
         endif;

         if waitTime > 0;
            LogLog_debug('Setting reload time to ' +
                         %char(waitTime) + ' (' + unit + ').');
            AutoReload_enable(i_path: waitTime: unit);
         else;
            LogLog_debug('AUTO-RELOAD disabled. No reload interval specified.');
            AutoReload_disable();
         endif;

         if not loadPropertiesConfiguration(i_path: realPath);
            return isConfigured;
         endif;

         if (g_autoReload.isAutoReload = cTrue and i_path <> realPath);
            AutoReload_enable(realPath: waitTime: unit);
         endif;

         isConfigured = cTrue;

         return isConfigured;

      /END-FREE
      *
     P Configurator_loadAndWatchPropertiesConfiguration...
     P                 E
      *
      *=========================================================================
      *  If AUTO-UPDATE is enabled, this procedure checks for configuration
      *  changes. It updates the configuration if needed.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   void
      *=========================================================================
     P Configurator_checkAndReloadPropertiesConfiguration...
     P                 B                   export
      *
     D Configurator_checkAndReloadPropertiesConfiguration...
     D                 PI
      *
      *
      *  Helper fields
     D lastModOld      S                   like(g_autoReload.lastMod) inz
     D realPath        S                   like(LOG4RPG_path_t          ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if not g_autoReload.isAutoReload;
            return;
         endif;

         if g_autoreload.nextUpd > %timestamp();
            return;
         endif;

         AutoReload_setNextUpdateTime();

         lastModOld = g_autoReload.lastMod;
         AutoReload_updateLastModificationTime();

         if lastModOld = g_autoReload.lastMod;
            return;
         endif;

         Repository_prepareReload();
         loadPropertiesConfiguration(g_autoReload.reloadURL: realPath);

         return;

      /END-FREE
      *
     P Configurator_checkAndReloadPropertiesConfiguration...
     P                 E
      *
      *=========================================================================
      *  Clears all configuration data. All loggers and appenders are deleted.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   void
      *=========================================================================
     P Configurator_clearConfiguration...
     P                 B                   export
      *
     D Configurator_clearConfiguration...
     D                 PI
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if not Logger_isLogging();
            return;
         endif;

         LogLog_debug('Clearing configuration ...');

         AutoReload_disable();

         Repository_clear();

         LogLog_verbose('Configuration cleared.');

         return;

      /END-FREE
      *
     P Configurator_clearConfiguration...
     P                 E
      *
      *=========================================================================
      *  Returns cTrue if automatic reloading of the configuration is
      *  enabled, else cFalse.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   isAutoReload  - Returns cTrue if auto-reload is enabled, else cFalse.
      *=========================================================================
     P Configurator_isAutoReload...
     P                 B                   export
      *
     D Configurator_isAutoReload...
     D                 PI              N
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return g_autoReload.isAutoReload;

      /END-FREE
      *
     P Configurator_isAutoReload...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Configures LOG4RPG from a properties file.
      *=========================================================================
     P loadPropertiesConfiguration...
     P                 B
      *
     D loadPropertiesConfiguration...
     D                 PI              N
     D  i_path                             const  like(LOG4RPG_path_t   )
     D  o_realPath                                like(LOG4RPG_path_t   )
      *
      *  Return value
     D isConfigured    S               N   inz(cFalse)
      *
      *  Helper fields
     D isLoaded        S               N   inz(cFalse)
     D url             S                   like(url_t                   ) inz
     D pPropList       S                   like(LOG4RPG_pPropertyList_t ) inz
     D msg             DS                  likeds(msg_t                 ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         LogLog_debug('Loading properties configuration ...');

         // Load configuration into property list
         url = URL_new(i_path);

         LogLog_debug(
            'Loading properties configuration from: ' +
             URL_toString(url) + ' ...');

         pPropList = PropertyList_new();
         isLoaded = PropertyList_loadFromUrl(pPropList: url);
         if not isLoaded;
            LogLog_warning('Could not read configuration file [' +
                            i_path  + '].');
            o_realPath = '';
            return isConfigured;
         endif;

         o_realPath = PropertyList_getUrl(pPropList);

         // Configure root and non-root loggers
         doConfigure(pPropList);

         // Free resources
         PropertyList_delete(pPropList);

         LogLog_debug('Finished loading properties configuration from: ' +
                      URL_toString(url));
         LogLog_debug('LOG4RPG is configured, now.');

         isConfigured = cTrue;

         return isConfigured;

      /END-FREE
      *
     P loadPropertiesConfiguration...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Configures root and non-root loggers.
      *=========================================================================
     P doConfigure...
     P                 B
      *
     D doConfigure...
     D                 PI
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Configure base system of log4rpg
         configureBaseSystem(i_pPropList);
         if not Logger_isLogging();
            return;
         endif;

         // Configure root logger
         configureRootLogger(i_pPropList);

         // Configure non-root loggers
         configureLoggers(i_pPropList: cLOGGER_PREFIX);

         // Dump repository
         Repository_dumpHierarchy();

      /END-FREE
      *
     P doConfigure...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Configures the base system of log4rpg.
      *=========================================================================
     P configureBaseSystem...
     P                 B
      *
     D configureBaseSystem...
     D                 PI
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
      *
      *  Helper fields
     D value           S                   like(LOG4RPG_Property_value_t) inz
     D pToken          S               *   inz
     D debugMode       S                   like(LOG4RPG_debugMode_t  )
     D                                     inz(cLOG4RPG_DEBUG_OFF)
     D output          S                   like(LOG4RPG_debugOutput_t)
     D                                     inz(cLOG4RPG_DEBUG_OUTPUT_PRINTER)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Enable/disable internal log
         configureInternalLog(i_pPropList);

         // Enable/disable Log4rpg
         configureLog4rpgMode(i_pPropList);

         return;

      /END-FREE
      *
     P configureBaseSystem...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Configures the internal log of Log4rpg.
      *=========================================================================
     P configureInternalLog...
     P                 B
      *
     D configureInternalLog...
     D                 PI
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
      *
      *  Helper fields
     D value           S                   like(LOG4RPG_Property_value_t) inz
     D pToken          S               *   inz
     D debugMode       S                   like(LOG4RPG_debugMode_t  )
     D                                     inz(cLOG4RPG_DEBUG_OFF)
     D output          S                   like(LOG4RPG_debugOutput_t)
     D                                     inz(cLOG4RPG_DEBUG_OUTPUT_PRINTER)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         value = PropertyList_get(i_pPropList: cPROPERTY_DEBUG);
         if value = '';
            return;
         endif;

         // Get debug mode
         pToken = strtok(value: ',');
         if pToken <> *NULL;
            debugMode = %trim(%str(pToken));
         endif;

         // Get output
         pToken = strtok(*NULL: ',');
         if pToken <> *NULL;
            output = %trim(%str(pToken));
         endif;

         LogLog_setInternalDebugging(debugMode: output);

         return;

      /END-FREE
      *
     P configureInternalLog...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Configures Log4rpg mode (enable/disable).
      *=========================================================================
     P configureLog4rpgMode...
     P                 B
      *
     D configureLog4rpgMode...
     D                 PI
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
      *
      *  Helper fields
     D value           S             32A   varying                        inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Enable/disable Log4rpg
         if PropertyList_containsKey(i_pPropList: cPROPERTY_LOG4RPG);
            value = f_lcase(PropertyList_get(i_pPropList: cPROPERTY_LOG4RPG));
            select;
            when (value = '1') or (value = 'true') or (value = 'on');
               Logger_setLogging(cTrue);
            when (value = '0') or (value = 'false') or (value = 'off');
               LogLog_debug('Log4rpg disabled. +
                             Stopped configuration procedure.');
               Logger_setLogging(cFalse);
               return;
            other;
               LogLog_warning('Invalid value specified for property ''' +
                               cPROPERTY_LOG4RPG + ''': ' + value);
            endsl;
         endif;

         return;

      /END-FREE
      *
     P configureLog4rpgMode...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Configures the root logger.
      *=========================================================================
     P configureRootLogger...
     P                 B
      *
     D configureRootLogger...
     D                 PI
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
      *
      *  Helper fields
     D value           S                   like(LOG4RPG_Property_value_t) inz
     D pRootLogger     S                   like(LOG4RPG_hLogger_t       ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         value = PropertyList_get(i_pPropList: cROOT_LOGGER_PREFIX);
         if value = '';
            LogLog_warning('Could not find root logger information. +
                            Is this OK?');
            return;
         endif;

         // Get rootLogger
         pRootLogger = Repository_getLogger(cROOT_LOGGER);

         // Parse root logger configuration data
         parseLogger(i_pPropList: pRootLogger: value);

         return;

      /END-FREE
      *
     P configureRootLogger...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Configures a logger.
      *=========================================================================
     P configureLoggers...
     P                 B
      *
     D configureLoggers...
     D                 PI
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Helper fields
     D logName         S                   like(LOG4RPG_loggerName_t) inz
     D property        DS                  likeds(LOG4RPG_property_t) inz
     D pLogger         S                   like(LOG4RPG_hLogger_t   ) inz
     D propIter        DS                  likeds(LOG4RPG_Property...
     D                                                    ListIterator_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         propIter = PropertyList_getIterator(i_pPropList);

         property = PropertyList_getFirst(propIter);

         dow property.key <> '';

            if f_startsWith(i_prefix: property.key) and
               %len(property.key) > %len(i_prefix);

               logName = %subst(property.key: %len(i_prefix) + 1);
               logName = translateLoggerName(logName);

               // Get logger from hierarchy  (add logger to hierarchy)
               pLogger = Repository_getLogger(logName);

               parseLogger(i_pPropList: pLogger: property.value);

            endif;

            property = PropertyList_getNext(propIter);
         enddo;

         return;

      /END-FREE
      *
     P configureLoggers...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Parse configuration data of the specified logger.
      *=========================================================================
     P parseLogger...
     P                 B
      *
     D parseLogger...
     D                 PI
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_pLogger                          const  like(LOG4RPG_hLogger_t       )
     D  i_value                            const  like(LOG4RPG_Property_value_t)
      *
      *  Helper fields
     D pToken          S               *                                  inz
     D pAppender       S                   like(LOG4RPG_pAppender_t     ) inz
     D appName         S                   like(LOG4RPG_appenderName_t  ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Get log level
         pToken = strtok(i_value: ',');
         if pToken <> *NULL;
            Logger_setLevel(i_pLogger: %str(pToken));
         endif;

         // Remove all existing appenders
         Logger_removeAllAppenders(i_pLogger);

         // Get & configure appenders
         pToken = strtok(*NULL: ',');
         dow pToken <> *NULL;
            appName = f_lcase(%trim(%str(pToken)));

            if not Repository_existAppender(appName);
               pAppender = parseAppender(i_pPropList: appName);
            else;
               pAppender = Repository_getAppender(appName);
            endif;

            if not Appender_isNull(pAppender);

               // Add appender to logger
               Logger_addAppender(i_pLogger: pAppender);
            endif;

            pToken = strtok(*NULL: ',');
         enddo;

         return;

      /END-FREE
      *
     P parseLogger...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Parse appender configuration data.
      *=========================================================================
     P parseAppender...
     P                 B
      *
     D parseAppender...
     D                 PI                         like(LOG4RPG_pAppender_t     )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_appName                          const  like(LOG4RPG_appenderName_t  )
      *
      *  Return value
     D pAppender       S                   like(LOG4RPG_pAppender_t     ) inz
      *
      *  Helper fields
     D value           S                   like(LOG4RPG_Property_value_t) inz
     D prefix          S                   like(LOG4RPG_prefix_t        ) inz
     D pLayout         S                   like(LOG4RPG_pLayout_t       ) inz
     D pFilter         S                   like(LOG4RPG_pFilter_t       ) inz
     D filterName      S                   like(LOG4RPG_filterName_t    ) inz
     D key             S                   like(LOG4RPG_property_key_t  ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         prefix = cAPPENDER_PREFIX + i_appName;

         value = PropertyList_get(i_pPropList: prefix);
         if value = '';
            LogLog_warning('Could not find appender information for +
                            appender named [' + i_appName + ']');
            return pAppender;
         endif;

         pAppender = Appender_new(i_appName: value);
         if Appender_isNull(pAppender);
            LogLog_warning('Could not instantiate appender [' +
                            i_appName + ']');
            return pAppender;
         endif;

         Appender_setProperties(pAppender: i_pPropList: prefix + '.');

         // Parse layout if appender requires layout
         if Appender_requiresLayout(pAppender);
            pLayout = parseLayout(i_pPropList: i_appName
                                             : prefix + cLAYOUT_SUFFIX);
            if not Layout_isNull(pLayout);
               Appender_setLayout(pAppender: pLayout);
            endif;
         endif;

         // Parse filter if properties file specifies a filter for the appender
         key = cAPPENDER_PREFIX + i_appName + cFILTER_SUFFIX;
         if PropertyList_containsKey(i_pPropList: key);
            filterName = f_lcase(PropertyList_get(i_pPropList: key));
            if not Repository_existFilter(filterName);
               pFilter = parseFilter(i_pPropList: filterName);
            else;
               pFilter = Repository_getFilter(filterName);
            endif;

            // Attach filter to appender
            if not Filter_isNull(pFilter);
               Appender_setFilter(pAppender: pFilter);
            endif;
         endif;

         return pAppender;

      /END-FREE
      *
     P parseAppender...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Parse filter configuration data.
      *=========================================================================
     P parseFilter...
     P                 B
      *
     D parseFilter...
     D                 PI                         like(LOG4RPG_pFilter_t       )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_filterName                       const  like(LOG4RPG_filterName_t    )
     D  i_pFilterMap                       const  like(BasicMap_handle_t       )
     D                                            options(*nopass)
      *
      *  Return value
     D pFilter         S                   like(LOG4RPG_pFilter_t       ) inz
      *
      *  Parameter positions
     D p_pFilterMap    C                   const(3)
      *
      *  Fields for optional parameters
     D pFilterMap      S                   like(i_pFilterMap   ) inz
      *
      *  Helper fields
     D value           S                   like(LOG4RPG_Property_value_t) inz
     D prefix          S                   like(LOG4RPG_prefix_t        ) inz
     D pNextFilter     S                   like(LOG4RPG_pFilter_t       ) inz
     D nextFilterName  S                   like(LOG4RPG_filterName_t    ) inz
     D key             S                   like(LOG4RPG_property_key_t  ) inz
     D isLocalFilterMap...
     D                 S               N   inz(cFalse)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         prefix = cFILTER_PREFIX + i_filterName;

         value = PropertyList_get(i_pPropList: prefix);
         if value = '';
            LogLog_warning('Could not find filter information for +
                            filter named [' + i_filterName + ']');
            return pFilter;
         endif;

         pFilter = Filter_new(i_filterName: value);
         if Filter_isNull(pFilter);
            LogLog_warning('Could not instantiate filter [' +
                            i_filterName + ']');
            return pFilter;
         endif;

         Filter_setProperties(pFilter: i_pPropList: prefix + '.');

         if %parms() >= p_pFilterMap;
            pFilterMap = i_pFilterMap;
            isLocalFilterMap = cFalse;
         else;
            pFilterMap = BasicMap_new();
            isLocalFilterMap = cTrue;
         endif;

         BasicMap_put(pFilterMap: i_filterName: '*');

         // Parse next filter if properties file specifies a next filter
         key = cFILTER_PREFIX + i_filterName + cFILTER_NEXT_FILTER;
         if PropertyList_containsKey(i_pPropList: key);
            nextFilterName = f_lcase(PropertyList_get(i_pPropList: key));
            if BasicMap_containsKey(pFilterMap: nextFilterName);
               LogLog_warning('Recursion detected for filter [' +
                               i_filterName + ']');
            else;
               if not Repository_existFilter(nextFilterName);
                  pNextFilter = parseFilter(
                                   i_pPropList: nextFilterName: pFilterMap);
               else;
                  pNextFilter = Repository_getFilter(nextFilterName);
               endif;

               // Set next filter of filter
               if not Filter_isNull(pNextFilter);
                  Filter_setNext(pFilter: pNextFilter);
               endif;
            endif;
         endif;

         if isLocalFilterMap;
            BasicMap_delete(pFilterMap);
         endif;

         return pFilter;

      /END-FREE
      *
     P parseFilter...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Parse layout configuration data.
      *=========================================================================
     P parseLayout...
     P                 B
      *
     D parseLayout...
     D                 PI                         like(LOG4RPG_pLayout_t       )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_logName                          const  like(LOG4RPG_loggerName_t    )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Return value
     D pLayout         S                   like(LOG4RPG_pLayout_t       ) inz
      *
      *  Helper fields
     D value           S                   like(LOG4RPG_Property_value_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         pLayout = Layout_null();

         value = PropertyList_get(i_pPropList: i_prefix);
         if value = '';
            LogLog_warning('Property [Layout] is missing for appender +
                            [' + i_logName + ']');
            return pLayout;
         endif;

         pLayout = Layout_new(value);
         if Layout_isNull(pLayout);
            LogLog_warning('Could not instantiate layout [' +
                            getProcedure(value) + ']');
            return pLayout;
         endif;

         Layout_setProperties(pLayout: i_pPropList: i_prefix + '.');

         return pLayout;

      /END-FREE
      *
     P parseLayout...
     P                 E
      *
      *=========================================================================
    R *  *** private ***
      *  Disables the auto-reload feature.
      *=========================================================================
     P AutoReload_disable...
     P                 B
      *
     D AutoReload_disable...
     D                 PI
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         g_autoReload.isAutoReload = cFalse;
         g_autoReload.waitTime     = 0;
         g_autoReload.unit         = '*N';
         g_autoReload.reloadURL    = '';
         g_autoReload.nextUpd      = *loval;
         g_autoReload.lastMod      = *loval;

         LogLog_debug('AUTO-RELOAD feature disabled.');

         return;

      /END-FREE
      *
     P AutoReload_disable...
     P                 E
      *
      *=========================================================================
    R *  *** private ***
      *  Enables the auto-reload feature.
      *=========================================================================
     P AutoReload_enable...
     P                 B
      *
     D AutoReload_enable...
     D                 PI
     D  i_url                              const  like(url_t )
     D  i_time                       10I 0 const
     D  i_unit                       10A   const
      *
     D protocol        S                   like(url_t ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         protocol = Url_getProtocol(i_url);
         if protocol <> 'file' and protocol <> 'mbr';
            AutoReload_disable();
            LogLog_error('Unsupported URL protocol. AUTO-RELOAD disabled.');
            return;
         endif;

         g_autoReload.isAutoReload = cTrue;
         g_autoReload.waitTime     = i_time;
         g_autoReload.reloadURL    = i_url;
         g_autoReload.unit         = i_unit;

         AutoReload_setNextUpdateTime();
         AutoReload_updateLastModificationTime();

         LogLog_debug('AUTO-RELOAD feature enabled.');
         LogLog_debug(' -> URL : ' + g_autoReload.reloadURL);
         LogLog_debug(' -> Wait: ' + %char(g_autoReload.waitTime));

         return;

      /END-FREE
      *
     P AutoReload_enable...
     P                 E
      *
      *=========================================================================
    R *  *** private ***
      *  Updates the time the properties file was last modified.
      *=========================================================================
     P AutoReload_updateLastModificationTime...
     P                 B
      *
     D AutoReload_updateLastModificationTime...
     D                 PI
      *
     D protocol        S                   like(url_t ) inz
      *
     D mbr             DS                  qualified
     D  name                         10A   inz
     D  file                         10A   inz
     D  lib                          10A   inz
      *
     D mbrd0100        DS                  likeds(mbrd0100_t  ) inz
     D mbrd0200        DS                  likeds(mbrd0200_t  ) inz
      *
     D lastChgDateAPI  DS                  qualified
     D  cymd                   1      7A
     D  hms                    8     13A
      *
     D msg             DS                  likeds(msg_t       ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         g_autoReload.lastMod = *LOVAL;

         protocol = Url_getProtocol(g_autoReload.reloadURL);

         // Get time the object was last modified for a ...
         select;
         // ... file object
         when protocol = 'file';
            g_autoReload.lastMod = f_getIfsFileDataChgTime(
                                      Url_getPath(g_autoReload.reloadURL): msg);
            if (msg.ID <> cMSG_ID_OK);
               return;
            endif;

         // ... member object
         when protocol = 'mbr';
            URL_getMbr(g_autoReload.reloadURL
                       : mbr.file: mbr.lib: mbr.name);
            mbrd0100 = f_rtvMbrD(mbr.file: mbr.lib: mbr.name: 'MBRD0100': msg);
            if (msg.ID <> cMSG_ID_OK);
               return;
            endif;

            if mbrd0100.isSrcFile = '0';
               mbrd0200 = f_rtvMbrD(
                                mbr.file: mbr.lib: mbr.name: 'MBRD0200': *omit);
               lastChgDateAPI = mbrd0200.mbrChgDatTim;
            else;
               lastChgDateAPI = mbrd0100.chgDatTim;
            endif;

            monitor;
               g_autoReload.lastMod = %date(lastChgDateAPI.cymd: *CYMD0) +
                                      %time(lastChgDateAPI.hms : *HMS0 );
            on-error;
               // Nothing to do here
            endmon;

         other;
            // Ignore any other protocol
         endsl;

         return;

      /END-FREE
      *
     P AutoReload_updateLastModificationTime...
     P                 E
      *
      *=========================================================================
    R *  *** private ***
      *  Sets the time the properties file has to be checked for changes.
      *=========================================================================
     P AutoReload_setNextUpdateTime...
     P                 B
      *
     D AutoReload_setNextUpdateTime...
     D                 PI
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         select;
         // milli-seconds
         when (g_autoReload.unit = cCOMPILER_MSECONDS or
               g_autoReload.unit = cCOMPILER_MSECONDS_SHORT);
            g_autoReload.nextUpd = %timestamp() +
                                   %mseconds(g_autoReload.waitTime);
         // seconds
         when (g_autoReload.unit = cCOMPILER_SECONDS or
               g_autoReload.unit = cCOMPILER_SECONDS_SHORT);
            g_autoReload.nextUpd = %timestamp() +
                                   %seconds(g_autoReload.waitTime);
         // minutes
         when (g_autoReload.unit = cCOMPILER_MINUTES or
               g_autoReload.unit = cCOMPILER_MINUTES_SHORT);
            g_autoReload.nextUpd = %timestamp() +
                                   %minutes(g_autoReload.waitTime);
         // hours
         when (g_autoReload.unit = cCOMPILER_HOURS or
               g_autoReload.unit = cCOMPILER_HOURS_SHORT);
            g_autoReload.nextUpd = %timestamp() +
                                   %hours(g_autoReload.waitTime);
         endsl;

         return;

      /END-FREE
      *
     P AutoReload_setNextUpdateTime...
     P                 E
      *
      *=========================================================================
    R *  *** private ***
      *  Initializes this module.
      *=========================================================================
     P initializeModule...
     P                 B
      *
     D initializeModule...
     D                 PI
      *
      *  Return value
      *
      *  Helper fields
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if g_isInit;
            return;
         endif;

         Loglog_verbose('Initializing module ' + sds.modContProc + '...');

         Repository_initialize();

         g_isInit = cTrue;

         return;

      /END-FREE
      *
     P initializeModule...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG09  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG09 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: Level                   "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: Level                                    *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  13.06.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG09
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG                      Public interface & type definitions
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QBASICS1,PBASICS1                      Basic RPG Extensions
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      *=========================================================================
      *  Converts the string passed as argument to an integer level.
      *=========================================================================
      *  Parameters:
      *   i_level       - Level.
      *
      *  Returns:
      *   level         - Level, converted to an integer value (= priority).
      *=========================================================================
     P Level_toInt...
     P                 B                   export
      *
     D Level_toInt...
     D                 PI                         like(LOG4RPG_priority_t      )
     D  i_level                            const  like(LOG4RPG_level_t         )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         select;
         when i_level = cLOG4RPG_LEVEL_DEBUG;
            return cLOG4RPG_PRIORITY_DEBUG;
         when i_level = cLOG4RPG_LEVEL_INFO;
            return cLOG4RPG_PRIORITY_INFO;
         when i_level = cLOG4RPG_LEVEL_WARN;
            return cLOG4RPG_PRIORITY_WARN;
         when i_level = cLOG4RPG_LEVEL_ERROR;
            return cLOG4RPG_PRIORITY_ERROR;
         when i_level = cLOG4RPG_LEVEL_FATAL;
            return cLOG4RPG_PRIORITY_FATAL;
         other;
            return cLOG4RPG_PRIORITY_NONE;
         endsl;

      /END-FREE
      *
     P Level_toInt...
     P                 E
      *
      *=========================================================================
      *  Converts the integer passed as argument to a string level.
      *=========================================================================
      *  Parameters:
      *   i_level       - Level as integer value (= priority).
      *
      *  Returns:
      *   level         - Level, converted to a string value.
      *=========================================================================
     P Level_toString...
     P                 B                   export
      *
     D Level_toString...
     D                 PI                         like(LOG4RPG_level_t         )
     D  i_priority                         const  like(LOG4RPG_priority_t      )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         select;
         when i_priority = cLOG4RPG_PRIORITY_DEBUG;
            return cLOG4RPG_LEVEL_DEBUG;
         when i_priority = cLOG4RPG_PRIORITY_INFO;
            return cLOG4RPG_LEVEL_INFO;
         when i_priority = cLOG4RPG_PRIORITY_WARN;
            return cLOG4RPG_LEVEL_WARN;
         when i_priority = cLOG4RPG_PRIORITY_ERROR;
            return cLOG4RPG_LEVEL_ERROR;
         when i_priority = cLOG4RPG_PRIORITY_FATAL;
            return cLOG4RPG_LEVEL_FATAL;
         other;
            return '';
         endsl;

      /END-FREE
      *
     P Level_toString...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG10  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG10 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: LogLog                  "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: LogLog                                   *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  13.06.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *  27.10.2006  Th.Raddatz    Added feature to completely enable/      *
      *                            disable Log4rpg. Logger_isLogging().     *
      *                                                                     *
      *  15.11.2006  Th.Raddatz    Added procedures:                        *
      *                            LogLog_getInternalDebugMode()            *
      *                            LogLog_getInternalDebugOutput()          *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
     FLOG4RPG   O    F  132        PRINTER usropn
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG10
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG                      Public interface & type definitions
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QLOG4RPG,CLIB                          C-Library
      /COPY QBASICS1,PBASICS1                      Basic RPG Extensions
      /COPY QLOG4RPG,PLOG4RPG14                    DebugMode
      /COPY QLOG4RPG,PLOG4RPG15                    DebugOutput
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      *  This method is used to output log4rpg internal
      *  statements.
     D streamOut...
     D                 PR
     D  i_text                             const  like(LOG4RPG_formattedText_t)
      *
      *  This method is used to output log4rpg internal
      *  statements. Output goes to stdout.
     D writeToStdout...
     D                 PR
     D  i_text                             const  like(LOG4RPG_formattedText_t)
      *
      *  This method is used to output log4rpg internal
      *  statements. Output goes to the printer.
     D writeToPrinter...
     D                 PR
     D  i_text                             const  like(LOG4RPG_formattedText_t)
      *
      *  Formats the name of the calling procedure.
     D formatCaller...
     D                 PR           256A   varying
     D  i_procName                  256A   const  varying
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
     D cPREFIX...
     D                 C                   const('log4rpg: ')
     D cERR_PREFIX...
     D                 C                   const('log4rpg:ERROR ')
     D cWARN_PREFIX...
     D                 C                   const('log4rpg:WARN ')
      *
      * Constants for printf()
     D cESC_NEW_LINE   C                   const(x'15')
     D cESC_TAB        C                   const(x'05')
     D cESC_BACKSLASH  C                   const(x'EC')
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
     D g_debugMode     S              5U 0 inz(
     D                                        cLOG4RPG_INT_DEBUG_OFF)
     D g_output        S              5U 0 inz(
     D                                        cLOG4RPG_INT_DEBUG_OUTPUT_PRINTER)
      *
     D g_printText     S            117A
      *
      * -----------------------------------------
      *  Output to printer
      * -----------------------------------------
     OLOG4RPG   E            printLine
     O                       g_printText        127
      *
      *=========================================================================
      *  Allows to enable/disable log4rpg internal logging.
      *=========================================================================
      *  Parameters:
      *   i_debugMode   - Specifies the debug mode for the log4rpg
      *                   internal logging.
      *
      *  Returns:
      *   void
      *=========================================================================
     P LogLog_setInternalDebugging...
     P                 B                   export
      *
     D LogLog_setInternalDebugging...
     D                 PI
     D  i_debugMode                        const  like(LOG4RPG_debugMode_t  )
     D  i_output                           const  like(LOG4RPG_debugOutput_t)
     D                                            options(*nopass)
      *
      *  Parameter positions
     D p_output        C                   const(2)
      *
      *  Fields for optional parameters
     D output          S                   like(i_output ) inz
      *
      *  Helper fields
     D mode            S                   like(i_debugMode ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if %parms() >= p_output;
            output = f_lcase(i_output);
         else;
            output = cLOG4RPG_DEBUG_OUTPUT_PRINTER;
         endif;

         mode = f_lcase(i_debugMode);

         if DebugMode_isValid(mode);
            g_debugMode = DebugMode_toInt(mode);
         else;
            g_debugMode = DebugMode_toInt(cLOG4RPG_DEBUG_ON);
            LogLog_error('Unexpected value [' + mode +
                          '] passed for parameter ''debug mode'' to +
                          procedure [' + f_this + ']');
         endif;

         if DebugOutput_isValid(output);
            g_output = DebugOutput_toInt(output);
         else;
            g_output = cLOG4RPG_INT_DEBUG_OUTPUT_PRINTER;
            LogLog_error('Unexpected value [' + output +
                          '] passed for parameter ''output'' to +
                          procedure [' + f_this + ']');
         endif;

         if (g_output <> cLOG4RPG_INT_DEBUG_OUTPUT_PRINTER) and %open(LOG4RPG);
            close LOG4RPG;
         endif;

         return;

      /END-FREE
      *
     P LogLog_setInternalDebugging...
     P                 E
      *
      *=========================================================================
      *  Returns the internal debug mode.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   debugMode     - Mode of the internal logging.
      *=========================================================================
     P LogLog_getInternalDebugMode...
     P                 B                   export
      *
     D LogLog_getInternalDebugMode...
     D                 PI                         like(LOG4RPG_debugMode_t  )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return DebugMode_toString(g_debugMode);

      /END-FREE
      *
     P LogLog_getInternalDebugMode...
     P                 E
      *
      *=========================================================================
      *  Returns the target for internal log events.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   output        - Output target for internal log events.
      *=========================================================================
     P LogLog_getInternalDebugOutput...
     P                 B                   export
      *
     D LogLog_getInternalDebugOutput...
     D                 PI                         like(LOG4RPG_debugOutput_t)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return DebugOutput_toString(g_output);

      /END-FREE
      *
     P LogLog_getInternalDebugOutput...
     P                 E
      *
      *=========================================================================
      *  This method is used to output log4rpg internal debug statements.
      *=========================================================================
      *  Parameters:
      *   i_text        - The debug statement.
      *
      *  Returns:
      *   void
      *=========================================================================
     P LogLog_debug...
     P                 B                   export
      *
     D LogLog_debug...
     D                 PI
     D  i_text                             const  like(LOG4RPG_text_t    )
     D caller          S            128a   varying
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if not Logger_isLogging();
            return;
         endif;

         if g_debugMode = cLOG4RPG_INT_DEBUG_QUIET;
            return;
         endif;

         if g_debugMode <> cLOG4RPG_INT_DEBUG_OFF;
            streamOut(cPREFIX + formatCaller(f_caller()) + i_text);
         endif;

         return;

      /END-FREE
      *
     P LogLog_debug...
     P                 E
      *
      *=========================================================================
      *  This method is used to output log4rpg internal debug messages.
      *=========================================================================
      *  Parameters:
      *   i_msg         - The debug message.
      *
      *  Returns:
      *   void
      *=========================================================================
     P LogLog_debugMsg...
     P                 B                   export
      *
     D LogLog_debugMsg...
     D                 PI
     D  i_msg                              const  likeds(msg_t           )
      *
      *  Helper fields
     D text            S                   like(LOG4RPG_text_t    ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if not Logger_isLogging();
            return;
         endif;

         if g_debugMode = cLOG4RPG_INT_DEBUG_QUIET;
            return;
         endif;

         if g_debugMode <> cLOG4RPG_INT_DEBUG_OFF;
            text = %trimR(f_rtvMsgText(i_msg: *omit));
            LogLog_debug(text);
         endif;

         return;

      /END-FREE
      *
     P LogLog_debugMsg...
     P                 E
      *
      *=========================================================================
      *  This method is used to output log4rpg internal error statements.
      *=========================================================================
      *  Parameters:
      *   i_text        - The error statement.
      *
      *  Returns:
      *   void
      *=========================================================================
     P LogLog_error...
     P                 B                   export
      *
     D LogLog_error...
     D                 PI
     D  i_text                             const  like(LOG4RPG_text_t    )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if not Logger_isLogging();
            return;
         endif;

         if g_debugMode = cLOG4RPG_INT_DEBUG_QUIET;
            return;
         endif;

         streamOut(cERR_PREFIX + formatCaller(f_caller()) + i_text);

         return;

      /END-FREE
      *
     P LogLog_error...
     P                 E
      *
      *=========================================================================
      *  This method is used to output log4rpg internal error messages.
      *=========================================================================
      *  Parameters:
      *   i_msg         - The error message.
      *
      *  Returns:
      *   void
      *=========================================================================
     P LogLog_errorMsg...
     P                 B                   export
      *
     D LogLog_errorMsg...
     D                 PI
     D  i_msg                              const  likeds(msg_t           )
      *
      *  Helper fields
     D text            S                   like(LOG4RPG_text_t    ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if not Logger_isLogging();
            return;
         endif;

         if g_debugMode = cLOG4RPG_INT_DEBUG_QUIET;
            return;
         endif;

         text = %trimR(f_rtvMsgText(i_msg: *omit));
         LogLog_error(text);

         return;

      /END-FREE
      *
     P LogLog_errorMsg...
     P                 E
      *
      *=========================================================================
      *  This method is used to output log4rpg internal warning statements.
      *=========================================================================
      *  Parameters:
      *   i_text        - The warning statement.
      *
      *  Returns:
      *   void
      *=========================================================================
     P LogLog_warning...
     P                 B                   export
      *
     D LogLog_warning...
     D                 PI
     D  i_text                             const  like(LOG4RPG_text_t    )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if not Logger_isLogging();
            return;
         endif;

         if g_debugMode = cLOG4RPG_INT_DEBUG_QUIET;
            return;
         endif;

         streamOut(cWARN_PREFIX + formatCaller(f_caller()) + i_text);

         return;

      /END-FREE
      *
     P LogLog_warning...
     P                 E
      *
      *=========================================================================
      *  This method is used to output log4rpg internal warning message.
      *=========================================================================
      *  Parameters:
      *   i_msg         - The warning message.
      *
      *  Returns:
      *   void
      *=========================================================================
     P LogLog_warningMsg...
     P                 B                   export
      *
     D LogLog_warningMsg...
     D                 PI
     D  i_msg                              const  likeds(msg_t           )
      *
      *  Helper fields
     D text            S                   like(LOG4RPG_text_t    ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if not Logger_isLogging();
            return;
         endif;

         if g_debugMode = cLOG4RPG_INT_DEBUG_QUIET;
            return;
         endif;

         text = %trimR(f_rtvMsgText(i_msg: *omit));
         LogLog_warning(text);

         return;

      /END-FREE
      *
     P LogLog_warningMsg...
     P                 E
      *
      *=========================================================================
      *  This method is used to output log4rpg internal verbose statements.
      *=========================================================================
      *  Parameters:
      *   i_text        - The verbose statement.
      *
      *  Returns:
      *   void
      *=========================================================================
     P LogLog_verbose...
     P                 B                   export
      *
     D LogLog_verbose...
     D                 PI
     D  i_text                             const  like(LOG4RPG_text_t    )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if not Logger_isLogging();
            return;
         endif;

         if g_debugMode = cLOG4RPG_INT_DEBUG_QUIET;
            return;
         endif;

         if g_debugMode = cLOG4RPG_INT_DEBUG_VERBOSE;
            streamOut(cPREFIX + formatCaller(f_caller()) + i_text);
         endif;

         return;

      /END-FREE
      *
     P LogLog_verbose...
     P                 E
      *
      *=========================================================================
      *  This method is used to output log4rpg internal verbose message.
      *=========================================================================
      *  Parameters:
      *   i_msg         - The verbose message.
      *
      *  Returns:
      *   void
      *=========================================================================
     P LogLog_verboseMsg...
     P                 B                   export
      *
     D LogLog_verboseMsg...
     D                 PI
     D  i_msg                              const  likeds(msg_t           )
      *
      *  Helper fields
     D text            S                   like(LOG4RPG_text_t    ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if not Logger_isLogging();
            return;
         endif;

         if g_debugMode = cLOG4RPG_INT_DEBUG_QUIET;
            return;
         endif;

         if g_debugMode = cLOG4RPG_INT_DEBUG_VERBOSE;
            text = %trimR(f_rtvMsgText(i_msg: *omit));
            LogLog_verbose(text);
         endif;

         return;

      /END-FREE
      *
     P LogLog_verboseMsg...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  This method is used write log4rpg internal statements to the output.
      *=========================================================================
     P streamOut...
     P                 B
      *
     D streamOut...
     D                 PI
     D  i_text                             const  like(LOG4RPG_formattedText_t)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         select;
         when g_output = cLOG4RPG_INT_DEBUG_OUTPUT_PRINTER;
            writeToPrinter(i_text);
         when g_output = cLOG4RPG_INT_DEBUG_OUTPUT_STDOUT;
            writeToStdout(i_text);
         endsl;

         return;

      /END-FREE
      *
     P streamOut...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  This method is used to output log4rpg internal statements.
      *  Output goes to printer.
      *=========================================================================
     P writeToPrinter...
     P                 B
      *
     D writeToPrinter...
     D                 PI
     D  i_text                             const  like(LOG4RPG_formattedText_t)
      *
      *  Helper fields
     D startPos        S             10U 0 inz(1)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if i_text = '';
            return;
         endif;

         if not %open(LOG4RPG);
            system('OVRPRTF FILE(LOG4RPG) +
                    TOFILE(QSYS/QSYSPRT) OVRSCOPE(*CALLLVL)');
            open LOG4RPG;
         endif;

         dow   startPos > 0;
            g_printText = f_wordWrap(i_text
                                     : %len(g_printText)
                                     : startPos
                                     : cWORDWRAP_PARAGRAPH_TEXT);
            except printLine;
         enddo;

         return;

      /END-FREE
      *
     P writeToPrinter...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  This method is used to output log4rpg internal statements.
      *  Output goes to stdout.
      *=========================================================================
     P writeToStdout...
     P                 B
      *
     D writeToStdout...
     D                 PI
     D  i_text                             const  like(LOG4RPG_formattedText_t)
      *
      *  printf -- Print Formatted Characters
     D printf...
     D                 PR            10I 0 extproc('printf')
     D  i_fmtString                    *   value  options(*string)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         printf(i_text + cESC_NEW_LINE);

         return;

      /END-FREE
      *
     P writeToStdout...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Formats the name of the calling procedure.
      *=========================================================================
     P formatCaller...
     P                 B
     D                 PI           256A   varying
     D  i_procName                  256A   const  varying
      *
     D formatted       S            256A   varying
     D partLen         S             10I 0
      *
     D DELIMITERS      C                   '....'
     D LENGTH          C                   40
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (%len(i_procName) <= LENGTH);
            formatted = i_procName;
         else;
            partLen = %int((LENGTH - %len(DELIMITERS)) / 2);
            formatted = %subst(i_procName: 1: partLen) + '....' +
                        %subst(i_procName: %len(i_procName) - partLen + 1);
         endif;


         formatted = ' ' + formatted + '() ';
         %len(formatted) = LENGTH + 4;

         return formatted;

      /END-FREE
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG11  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG11 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: Layout                  "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: Layout                                   *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  13.06.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *  27.10.2006  Th.Raddatz    Removed return value from procedure      *
      *                            Layout_format().                         *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG11
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
     D handle_t...
     D                 DS                  qualified               based(pDummy)
     D  layoutImpl                         likeds(LOG4RPG_classLayout_t   )
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QLOG4RPG,CLIB                          C Library
      /COPY QLOG4RPG,CEELIB                        CEE-Procedures
      /COPY QBASICS1,PBASICS1                      Basic RPG Extensions
      *
      /COPY QLOG4RPG,PLOG4RPG07                    PropertyList
      /COPY QLOG4RPG,PLOG4RPG10                    LogLog
      /COPY QLOG4RPG,PLOG4RPG12                    ClassLoader
      /COPY QLOG4RPG,PLOG4RPG99                    Helpers
      *
      /DEFINE DEFINE_PROCPTR
      /COPY QLOG4RPG,PLAYOUT                       Layout implementation
      /UNDEFINE DEFINE_PROCPTR
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      *=========================================================================
      *  Creates a new layout.
      *=========================================================================
      *  Parameters:
      *   i_layoutImpl  - A string that specifies the layout implementation
      *                   object.
      *   i_pPropString - A string that specifies the properties for the
      *                   layout implementation object.
      *
      *  Returns:
      *   pLayout       - Returns a handle to the layout object on success,
      *                   else a NULL handle.
      *=========================================================================
     P Layout_new...
     P                 B                   export
      *
     D Layout_new...
     D                 PI                         like(LOG4RPG_pLayout_t       )
     D  i_layoutImpl                       const  like(LOG4RPG_implClass_t     )
     D  i_pPropString                  *   const  options(*nopass:
     D                                                    *omit  : *string)
      *
      *  Return value
     D layout          DS                  likeds(handle_t    )
     D                                     based(pLayout)
      *
      *  Paremeter positions
     D p_pPropString   C                   const(2)
      *
      *  Fields for optional parameters
     D pPropString     S                   like(i_pPropString  ) inz
      *
      *  Helper fields
     D isPresent       S             10I 0 inz
     D pPropList       S                   like(LOG4RPG_pPropertyList_t ) inz
     D tempLayout      DS                  likeds(handle_t              ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         LogLog_debug('Creating layout ...');

         pLayout = Layout_null();

         // Get optional parameters ...
         // ... property string
         if %parms() >= p_pPropString;
            CEETSTA(isPresent: p_pPropString: *omit);
         else;
            isPresent = 0;
         endif;

         if isPresent = 1;
            pPropString = i_pPropString;
         else;
            pPropString = *NULL;
         endif;

         // Initialize layout;
         if not ClassLoader_resolveLayout(i_layoutImpl: tempLayout.layoutImpl);
            return pLayout;
         endif;

         // Create properties list
         if pPropString <> *NULL;
            pPropList = PropertyList_new(pPropString);
         else;
            pPropList = PropertyList_null();
         endif;

         // Create layout handle
         pLayout = %alloc(%size(handle_t));
         layout = tempLayout;

         // Instanciate layout implementation object
         g_pLayout_new = layout.layoutImpl.procNew.procptr;
         SrvPgmLayout_new(pLayout
                          : layout.layoutImpl.pHandle
                          : pPropList
                          : '');

         // Destroy properties list
         if not PropertyList_isNull(pPropList);
            PropertyList_delete(pPropList);
         endif;

         LogLog_verbose('+ Allocated memory for layout.');

         return pLayout;

      /END-FREE
      *
     P Layout_new...
     P                 E
      *
      *=========================================================================
      *  Formats the given string according to the layout.
      *=========================================================================
      *  Parameters:
      *   i_pLayout     - Handle of the layout returned by Layout_new().
      *
      *  Returns:
      *   text          - Returns the formatted text on success, else ''.
      *=========================================================================
     P Layout_format...
     P                 B                   export
      *
     D Layout_format...
     D                 PI
     D  i_pLayout                          const  like(LOG4RPG_pLayout_t      )
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t    )
      *
      *  Layout handle
     D layout          DS                  likeds(handle_t    )
     D                                     based(i_pLayout)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         LogLog_verbose('-> Formatting log event of logger [' +
                            LogEvent_getLoggerName(i_pLogEvent) + ']...');

         g_pLayout_format = layout.layoutImpl.procFormat.procptr;
         SrvPgmLayout_format(layout.layoutImpl.pHandle
                             : i_pLogEvent);

         return;

      /END-FREE
      *
     P Layout_format...
     P                 E
      *
      *=========================================================================
      *  Returns the header of the layout. (optional layout procedure)
      *=========================================================================
      *  Parameters:
      *   i_pLayout     - Handle of the layout returned by Layout_new().
      *
      *  Returns:
      *   header        - Returns the header of the layout.
      *=========================================================================
     P Layout_getHeader...
     P                 B                   export
      *
     D Layout_getHeader...
     D                 PI                         like(LOG4RPG_header_t       )
     D  i_pLayout                          const  like(LOG4RPG_pLayout_t      )
      *
      *  Return value
     D header          S                   like(LOG4RPG_header_t  ) inz
      *
      *  Layout handle
     D layout          DS                  likeds(handle_t    )
     D                                     based(i_pLayout)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         g_pLayout_getHeader = layout.layoutImpl.procGetHeader.procptr;

         if g_pLayout_getHeader <> *NULL;
            header = SrvPgmLayout_getHeader(layout.layoutImpl.pHandle);
         endif;

         return header;

      /END-FREE
      *
     P Layout_getHeader...
     P                 E
      *
      *=========================================================================
      *  Returns the footer of the layout. (optional layout procedure)
      *=========================================================================
      *  Parameters:
      *   i_pLayout     - Handle of the layout returned by Layout_new().
      *
      *  Returns:
      *   footer        - Returns the footer of the layout.
      *=========================================================================
     P Layout_getFooter...
     P                 B                   export
      *
     D Layout_getFooter...
     D                 PI                         like(LOG4RPG_footer_t       )
     D  i_pLayout                          const  like(LOG4RPG_pLayout_t      )
      *
      *  Return value
     D footer          S                   like(LOG4RPG_footer_t  ) inz
      *
      *  Layout handle
     D layout          DS                  likeds(handle_t    )
     D                                     based(i_pLayout)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         g_pLayout_getFooter = layout.layoutImpl.procGetFooter.procptr;

         if g_pLayout_getFooter <> *NULL;
            footer = SrvPgmLayout_getFooter(layout.layoutImpl.pHandle);
         endif;

         return footer;

      /END-FREE
      *
     P Layout_getFooter...
     P                 E
      *
      *=========================================================================
      *  Returns the new-line character.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   newLine       - The new line charcater of the system.
      *=========================================================================
     P Layout_newLine...
     P                 B                   export
      *
     D Layout_newLine...
     D                 PI             2A          varying
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return '\n';

      /END-FREE
      *
     P Layout_newLine...
     P                 E
      *
      *=========================================================================
      *  Sets the properties of the specified layout.
      *=========================================================================
      *  Parameters:
      *   i_pLayout     - Handle of the layout returned by Layout_new().
      *   i_pPropList   - Handle of the properties list.
      *   i_prefix      - Prefix of the relevant property keys.
      *
      *  Returns:
      *   void
      *=========================================================================
     P Layout_setProperties...
     P                 B                   export
      *
     D Layout_setProperties...
     D                 PI
     D  i_pLayout                          const  like(LOG4RPG_pLayout_t       )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Layout handle
     D layout          DS                  likeds(handle_t    )
     D                                     based(i_pLayout)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         g_pLayout_setProperties =
               layout.layoutImpl.procSetProperties.procptr;
         SrvPgmLayout_setProperties(layout.layoutImpl.pHandle
                                    : i_pPropList
                                    : i_prefix);

         return;

      /END-FREE
      *
     P Layout_setProperties...
     P                 E
      *
      *=========================================================================
      *  Deletes the specified layout.
      *=========================================================================
      *  Parameters:
      *   io_pLayout    - Handle of the layout returned by Layout_new().
      *
      *  Returns:
      *   isDeleted     - Returns TRUE on success, else FALSE.
      *=========================================================================
     P Layout_delete...
     P                 B                   export
      *
     D Layout_delete...
     D                 PI              N
     D  io_pLayout                                like(LOG4RPG_pLayout_t      )
      *
      *  Return value
     D isDeleted       S               N   inz(cFalse)
      *
      *  Layout handle
     D layout          DS                  likeds(handle_t    )
     D                                     based(io_pLayout)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         LogLog_verbose('Deleting layout ...');

         // Delete layout
         g_pLayout_delete = layout.layoutImpl.procDelete.procptr;
         isDeleted = SrvPgmLayout_delete(layout.layoutImpl.pHandle);

         dealloc(N) io_pLayout;
         io_pLayout = Layout_null();

         LogLog_verbose('- Free memory of layout.');

         return isDeleted;

      /END-FREE
      *
     P Layout_delete...
     P                 E
      *
      *=========================================================================
      *  Tests, whether the specified property is known by the
      *  super Layout.
      *=========================================================================
      *  Parameters:
      *   i_parameter   - Parameter that is tested.
      *
      *  Returns:
      *   isKnown       - Returns TRUE if the property is known by the super
      *                   Layout "class", else FALSE.
      *=========================================================================
     P Layout_knowsProperty...
     P                 B                   export
      *
     D Layout_knowsProperty...
     D                 PI              N
     D  i_parameter                        const  like(LOG4RPG_Property_key_t  )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         select;
         other;
            return cFalse;
         endsl;

      /END-FREE
      *
     P Layout_knowsProperty...
     P                 E
      *
      *=========================================================================
      *  Tests the specified layout for a NULL value.
      *=========================================================================
      *  Parameters:
      *   i_pLayout     - Handle of the property list returned by
      *                   Layout_new().
      *
      *  Returns:
      *   isNull        - Returns TRUE if the handle of the layout is a
      *                   NULL handle.
      *=========================================================================
     P Layout_isNull...
     P                 B                   export
      *
     D Layout_isNull...
     D                 PI              N
     D  i_pLayout                          const  like(LOG4RPG_pLayout_t       )
      *
      *  Return value
     D isNull          S               N   inz(cFalse)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if i_pLayout = Layout_null();
            isNull = cTrue;
         else;
            isNull = cFalse;
         endif;

         return isNull;

      /END-FREE
      *
     P Layout_isNull...
     P                 E
      *
      *=========================================================================
      *  Returns a NULL layout.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   pLayout       - Layout NULL handle.
      *=========================================================================
     P Layout_null...
     P                 B                   export
      *
     D Layout_null...
     D                 PI                         like(LOG4RPG_pLayout_t       )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return *NULL;

      /END-FREE
      *
     P Layout_null...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG12  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG12 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: ClassLoader             "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: ClassLoader                              *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  13.06.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *  18.10.2006  Th.Raddatz    Introduced Filter to Log4rpg.            *
      *                                                                     *
      *  14.11.2006  Th.Raddatz    Changed call to f_getProcPtrByName()     *
      *                            to omit message parameter to avoid       *
      *                            program crash on error.                  *
      *                            Now using LogLog_verbose() to log        *
      *                            errors when Layout_getHeader() or        *
      *                            Layout_getFooter() could not be resolved.*
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG12
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QBASICS1,PBASICS1                      Basic RPG Extensions
      *
      /COPY QLOG4RPG,PLOG4RPG10                    LogLog
      /COPY QLOG4RPG,PLOG4RPG99                    Helpers
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
      *  Appender:
     D cAPPENDER_NEW...
     D                 C                   const('_new')
     D cAPPENDER_DOAPPEND...
     D                 C                   const('_doAppend')
     D cAPPENDER_REQUIRES_LAYOUT...
     D                 C                   const('_requiresLayout')
     D cAPPENDER_SET_PROPERTIES...
     D                 C                   const('_setProperties')
     D cAPPENDER_DELETE...
     D                 C                   const('_delete')
      *
      *  Layout:
     D cLAYOUT_NEW...
     D                 C                   const('_new')
     D cLAYOUT_FORMAT...
     D                 C                   const('_format')
     D cLAYOUT_SET_PROPERTIES...
     D                 C                   const('_setProperties')
     D cLAYOUT_DELETE...
     D                 C                   const('_delete')
     D cLAYOUT_GET_HEADER...
     D                 C                   const('_getHeader')
     D cLAYOUT_GET_FOOTER...
     D                 C                   const('_getFooter')
      *
      *  Filter:
     D cFILTER_NEW...
     D                 C                   const('_new')
     D cFILTER_DECIDE...
     D                 C                   const('_decide')
     D cFILTER_SET_PROPERTIES...
     D                 C                   const('_setProperties')
     D cFILTER_DELETE...
     D                 C                   const('_delete')
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Program status data structure
      * -----------------------------------------
      /DEFINE SDS_EXTENDED
      /COPY QLOG4RPG,SDS
      /UNDEFINE SDS_EXTENDED
      *
      *=========================================================================
      *  Resolves the service program that provides the implementation
      *  of an appender.
      *=========================================================================
      *  Parameters:
      *   i_appendImpl  - A string that specifies the appender implementation
      *                   object.
      *   o_classAppender - The "class" that implements the appender.
      *
      *  Returns:
      *   isResolved    - Returns TRUE on success, else FALSE.
      *=========================================================================
     P ClassLoader_resolveAppender...
     P                 B                   export
      *
     D ClassLoader_resolveAppender...
     D                 PI              N
     D  i_appendImpl                       const like(LOG4RPG_Property_value_t )
     D  o_classAppender...
     D                                           likeds(LOG4RPG_classAppender_t)
      *
      *  Return value
     D isResolved      S               N   inz(cFalse)
      *
      *  Helper fields
     D srvPgm          DS                  likeds(qObj_t                 ) inz
     D proc            S                   like(LOG4RPG_procedure_t      ) inz
     D tempClassAppender...
     D                 DS                  likeds(LOG4RPG_classAppender_t) inz
     D msg             DS                  likeds(msg_t                  ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         clear o_classAppender;
         clear tempClassAppender;

         srvPgm = getSrvPgm(i_appendImpl);
         proc   = getProcedure(i_appendImpl);

         tempClassAppender.pHandle = *NULL;
         tempClassAppender.srvPgm  = f_activateSrvPgm(srvPgm.name
                                                      : srvPgm.lib
                                                      : msg);
         if msg.ID <> cMSG_ID_OK;
            LogLog_warning('Can not activate service program [' +
                            i_appendImpl + ']');
            return isResolved;
         endif;

         tempClassAppender.proc = proc;

         tempClassAppender.procNew            =
                       f_getProcPtrByName(proc + cAPPENDER_NEW
                                          : tempClassAppender.srvPgm: *omit);
         if tempClassAppender.procNew.procptr = *NULL;
            LogLog_error('Could not resolve procedure: ' +
                          proc + cAPPENDER_NEW);
            return isResolved;
         endif;

         tempClassAppender.procRequiresLayout =
                       f_getProcPtrByName(proc + cAPPENDER_REQUIRES_LAYOUT
                                          : tempClassAppender.srvPgm: *omit);
         if tempClassAppender.procRequiresLayout.procptr = *NULL;
            LogLog_error('Could not resolve procedure: ' +
                          proc + cAPPENDER_REQUIRES_LAYOUT);
            return isResolved;
         endif;

         tempClassAppender.procDoAppend       =
                       f_getProcPtrByName(proc + cAPPENDER_DOAPPEND
                                          : tempClassAppender.srvPgm: *omit);
         if tempClassAppender.procDoAppend.procptr = *NULL;
            LogLog_error('Could not resolve procedure: ' +
                          proc + cAPPENDER_DOAPPEND);
            return isResolved;
         endif;

         tempClassAppender.procSetProperties  =
                       f_getProcPtrByName(proc + cAPPENDER_SET_PROPERTIES
                                          : tempClassAppender.srvPgm: *omit);
         if tempClassAppender.procSetProperties.procptr = *NULL;
            LogLog_error('Could not resolve procedure: ' +
                          proc + cAPPENDER_SET_PROPERTIES);
            return isResolved;
         endif;

         tempClassAppender.procDelete         =
                       f_getProcPtrByName(proc + cAPPENDER_DELETE
                                          : tempClassAppender.srvPgm: *omit);
         if tempClassAppender.procDelete.procptr = *NULL;
            LogLog_error('Could not resolve procedure: ' +
                          proc + cAPPENDER_DELETE);
            return isResolved;
         endif;

         o_classAppender = tempClassAppender;

         isResolved = cTrue;

         return isResolved;

      /END-FREE
      *
     P ClassLoader_resolveAppender...
     P                 E
      *
      *=========================================================================
      *  Resolves the service program that provides the implementation
      *  of a layout.
      *=========================================================================
      *  Parameters:
      *   i_layoutImpl  - A string that specifies the layout implementation
      *                   object.
      *   o_classLayout - The "class" that implements the layout.
      *
      *  Returns:
      *   isResolved    - Returns TRUE on success, else FALSE.
      *=========================================================================
     P ClassLoader_resolveLayout...
     P                 B                   export
      *
     D ClassLoader_resolveLayout...
     D                 PI              N
     D  i_layoutImpl                       const like(LOG4RPG_Property_value_t )
     D  o_classLayout                            likeds(LOG4RPG_classLayout_t  )
      *
      *  Return value
     D isResolved      S               N   inz(cFalse)
      *
      *  Helper fields
     D srvPgm          DS                  likeds(qObj_t                 ) inz
     D proc            S                   like(LOG4RPG_procedure_t      ) inz
     D tempClassLayout...
     D                 DS                  likeds(LOG4RPG_classLayout_t  ) inz
     D msg             DS                  likeds(msg_t                  ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         clear o_classLayout;
         clear tempClassLayout;

         srvPgm = getSrvPgm(i_layoutImpl);
         proc   = getProcedure(i_layoutImpl);

         tempClassLayout.pHandle = *NULL;
         tempClassLayout.srvPgm  = f_activateSrvPgm(srvPgm.name
                                                    : srvPgm.lib
                                                    : msg);
         if msg.ID <> cMSG_ID_OK;
            LogLog_warning('Can not activate service program [' +
                            i_layoutImpl + ']');
            return isResolved;
         endif;

         tempClassLayout.proc = proc;

         tempClassLayout.procNew            =
                       f_getProcPtrByName(proc + cLAYOUT_NEW
                                          : tempClassLayout.srvPgm: *omit);
         if tempClassLayout.procNew.procptr = *NULL;
            LogLog_error('Could not resolve procedure: ' +
                          proc + cLAYOUT_NEW);
            return isResolved;
         endif;

         tempClassLayout.procFormat         =
                       f_getProcPtrByName(proc + cLAYOUT_FORMAT
                                          : tempClassLayout.srvPgm: *omit);
         if tempClassLayout.procFormat.procptr = *NULL;
            LogLog_error('Could not resolve procedure: ' +
                          proc + cLAYOUT_NEW);
            return isResolved;
         endif;

         tempClassLayout.procSetProperties  =
                       f_getProcPtrByName(proc + cLAYOUT_SET_PROPERTIES
                                          : tempClassLayout.srvPgm: *omit);
         if tempClassLayout.procSetProperties.procptr = *NULL;
            LogLog_error('Could not resolve procedure: ' +
                          proc + cLAYOUT_NEW);
            return isResolved;
         endif;

         tempClassLayout.procDelete         =
                       f_getProcPtrByName(proc + cLAYOUT_DELETE
                                          : tempClassLayout.srvPgm: *omit);
         if tempClassLayout.procDelete.procptr = *NULL;
            LogLog_error('Could not resolve procedure: ' +
                          proc + cLAYOUT_NEW);
            return isResolved;
         endif;

         // Resolve optional procedures
         tempClassLayout.procGetHeader      =
                       f_getProcPtrByName(proc + cLAYOUT_GET_HEADER
                                          : tempClassLayout.srvPgm: *omit);
         if tempClassLayout.procGetHeader.procptr = *NULL;
            LogLog_verbose('Could not resolve procedure: ' +
                            proc + cLAYOUT_GET_HEADER);
         endif;

         tempClassLayout.procGetFooter      =
                       f_getProcPtrByName(proc + cLAYOUT_GET_FOOTER
                                          : tempClassLayout.srvPgm: *omit);
         if tempClassLayout.procGetFooter.procptr = *NULL;
            LogLog_verbose('Could not resolve procedure: ' +
                            proc + cLAYOUT_GET_FOOTER);
         endif;

         o_classLayout = tempClassLayout;

         isResolved = cTrue;

         return isResolved;

      /END-FREE
      *
     P ClassLoader_resolveLayout...
     P                 E
      *
      *=========================================================================
      *  Resolves the service program that provides the implementation
      *  of a filter.
      *=========================================================================
      *  Parameters:
      *   i_filterImpl  - A string that specifies the filter implementation
      *                   object.
      *   o_classFilter - The "class" that implements the filter.
      *
      *  Returns:
      *   isResolved    - Returns TRUE on success, else FALSE.
      *=========================================================================
     P ClassLoader_resolveFilter...
     P                 B                   export
      *
     D ClassLoader_resolveFilter...
     D                 PI              N
     D  i_filterImpl                       const like(LOG4RPG_Property_value_t )
     D  o_classFilter                            likeds(LOG4RPG_classFilter_t  )
      *
      *  Return value
     D isResolved      S               N   inz(cFalse)
      *
      *  Helper fields
     D srvPgm          DS                  likeds(qObj_t                 ) inz
     D proc            S                   like(LOG4RPG_procedure_t      ) inz
     D tempClassFilter...
     D                 DS                  likeds(LOG4RPG_classFilter_t  ) inz
     D msg             DS                  likeds(msg_t                  ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         clear o_classFilter;
         clear tempClassFilter;

         srvPgm = getSrvPgm(i_filterImpl);
         proc   = getProcedure(i_filterImpl);

         tempClassFilter.pHandle = *NULL;
         tempClassFilter.srvPgm  = f_activateSrvPgm(srvPgm.name
                                                    : srvPgm.lib
                                                    : msg);
         if msg.ID <> cMSG_ID_OK;
            LogLog_warning('Can not activate service program [' +
                            i_filterImpl + ']');
            return isResolved;
         endif;

         tempClassFilter.proc = proc;

         tempClassFilter.procNew            =
                       f_getProcPtrByName(proc + cFILTER_NEW
                                          : tempClassFilter.srvPgm: *omit);
         if tempClassFilter.procNew.procptr = *NULL;
            LogLog_error('Could not resolve procedure: ' +
                          proc + cFILTER_NEW);
            return isResolved;
         endif;

         tempClassFilter.procDecide         =
                       f_getProcPtrByName(proc + cFILTER_DECIDE
                                          : tempClassFilter.srvPgm: *omit);
         if tempClassFilter.procDecide.procptr = *NULL;
            LogLog_error('Could not resolve procedure: ' +
                          proc + cFILTER_DECIDE);
            return isResolved;
         endif;

         tempClassFilter.procSetProperties  =
                       f_getProcPtrByName(proc + cFILTER_SET_PROPERTIES
                                          : tempClassFilter.srvPgm: *omit);
         if tempClassFilter.procSetProperties.procptr = *NULL;
            LogLog_error('Could not resolve procedure: ' +
                          proc + cFILTER_SET_PROPERTIES);
            return isResolved;
         endif;

         tempClassFilter.procDelete         =
                       f_getProcPtrByName(proc + cFILTER_DELETE
                                          : tempClassFilter.srvPgm: *omit);
         if tempClassFilter.procDelete.procptr = *NULL;
            LogLog_error('Could not resolve procedure: ' +
                          proc + cFILTER_DELETE);
            return isResolved;
         endif;

         o_classFilter = tempClassFilter;

         isResolved = cTrue;

         return isResolved;

      /END-FREE
      *
     P ClassLoader_resolveFilter...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG13  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG13 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: Repository              "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Repository                                       *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  13.06.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *  25.10.2006  Th.Raddatz    Introduced Filter to Log4rpg.            *
      *                                                                     *
      *  27.10.2006  Th.Raddatz    Added isShutdown flag to repository.     *
      *                                                                     *
      *  20.06.2008  Th.Raddatz    Made separate procedures for clearing    *
      *                            filters and appenders.                   *
      *                            Added Repository_prepareReload().        *
      *                                                                     *
      *  14.02.2014  Th.Raddatz    Fixed problem, that the logger hierachy  *
      *                            was not propper managed for certain      *
      *                            cases.                                   *
      *                            Added Repository_dumpHierarchy() for     *
      *                            debugging purposes.                      *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG13
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PTYPES                        Private type definitions
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QLOG4RPG,CEELIB                        CEE-Procedures
      /COPY QBASICS1,PBASICS1                      Basic RPG Extensions
      *
      /COPY QLOG4RPG,PLOG4RPG01                    Logger
      /COPY QLOG4RPG,PLOG4RPG02                    LoggerList
      /COPY QLOG4RPG,PLOG4RPG10                    LogLog
      /COPY QLOG4RPG,PLOG4RPG18                    FilterList
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      *  Delete "forgotten" handles on termination of activation group.
     D PRIVATE_onActivationGroupEnd...
     D                 PR                  extproc('LOG4RPG13_PRIVATE_+
     D                                     onActivationGroupEnd')
     D  i_ag_mark                    10U 0 const
     D  i_reason                     10U 0 const
     D  io_result_code...
     D                               10U 0
     D  io_user_rc                   10U 0
      *
      *  Updates the parents of a given logger.
     D updateParents...
     D                 PR
     D  i_pLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  Dumps the tree of children of a given logger.
     D dumpHierarchy...
     D                 PR
     D  i_pLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_level                      10I 0 const
      *
      *  Initializes this module.
     D initializeModule...
     D                 PR
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
     D g_isInit        S               N   inz(cFalse)
     D g_isShutdown    S               N   inz(cFalse)
      *
     D g_loggerRepos   S                   like(LOG4RPG_pLoggerList_t   ) inz
     D g_appendRepos   S                   like(LOG4RPG_pAppenderList_t ) inz
     D g_filterRepos   S                   like(LOG4RPG_pFilterList_t   ) inz
      *
      * -----------------------------------------
      *  Program status data structure
      * -----------------------------------------
      /DEFINE SDS_EXTENDED
      /COPY QLOG4RPG,SDS
      /UNDEFINE SDS_EXTENDED
      *
      *=========================================================================
      *  Adds a logger to the repository.
      *=========================================================================
      *  Parameters:
      *   i_pLogger     - Handle of the logger as it was returned by
      *                   Logger_getLogger() or Logger_getRootLogger().
      *
      *  Returns:
      *   index         - Returns the index of the logger on success, else -1.
      *=========================================================================
     P Repository_addLogger...
     P                 B                   export
      *
     D Repository_addLogger...
     D                 PI            10I 0
     D  i_pLogger                          const  like(LOG4RPG_hLogger_t )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return LoggerList_put(g_loggerRepos: i_pLogger);

      /END-FREE
      *
     P Repository_addLogger...
     P                 E
      *
      *=========================================================================
      *  Removes a logger from the logger list of the repository.
      *=========================================================================
      *  Parameters:
      *   i_logName     - Name of the logger.
      *
      *  Returns:
      *   rc            - Returns 0 on success, else -1.
      *=========================================================================
     P Repository_removeLogger...
     P                 B                   export
      *
     D Repository_removeLogger...
     D                 PI            10I 0
     D  i_logName                          const  like(LOG4RPG_loggerName_t)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return LoggerList_remove(g_loggerRepos: i_logName);

      /END-FREE
      *
     P Repository_removeLogger...
     P                 E
      *
      *=========================================================================
      *  Tests, whether the specified logger exists.
      *=========================================================================
      *  Parameters:
      *   i_logName     - Name of the logger.
      *
      *  Returns:
      *   exist         - Returns TRUE if the logger exists, else FALSE.
      *=========================================================================
     P Repository_existLogger...
     P                 B                   export
      *
     D Repository_existLogger...
     D                 PI              N
     D  i_logName                          const  like(LOG4RPG_loggerName_t)
      *
     D hLogger         S                   like(LOG4RPG_hLogger_t)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (not LoggerList_exist(g_loggerRepos: i_logName));
            return cFalse;
         endif;

         return cTrue;

      /END-FREE
      *
     P Repository_existLogger...
     P                 E
      *
      *=========================================================================
      *  Searches the logger list for the specified logger.
      *=========================================================================
      *  Parameters:
      *   i_logName     - Name of the logger.
      *
      *  Returns:
      *   pLogger       - Returns the handle of the logger on success, else
      *                   a NULL handle.
      *=========================================================================
     P Repository_getLogger...
     P                 B                   export
      *
     D Repository_getLogger...
     D                 PI                         like(LOG4RPG_hLogger_t   )
     D  i_logName                          const  like(LOG4RPG_loggerName_t)
      *
      *  Return value
     D logger          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(pLogger)
      *
      *  Helper fields
     D c               S             10I 0 inz
      *
      *  Logger handle
     D node            DS                  likeds(LOG4RPG_logger_t)
     D                                     based(pNode)
     D parent          DS                  likeds(LOG4RPG_logger_t)
     D                                     based(pParent)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         LogLog_verbose('Retrieving logger [' + i_logName + ']');

         pLogger = Logger_null();

         pNode = LoggerList_get(g_loggerRepos: i_logName);

         select;
         when pNode = *NULL;
            pLogger = Logger_new(i_logName);
            Repository_addLogger(pLogger);
            updateParents(pLogger);
            return pLogger;
         when Node_isLoggerNode(pNode);
            pLogger = pNode;
            return pLogger;
         when Node_isProvisionNode(pNode);

            // Remove provision node from repositiory
            Repository_removeLogger(node.name);

            // Disconnect provision node from parent
            pParent = ProvisionNode_getParent(pNode);
            c = Node_findChild(pParent: pNode);
            Node_removeChild(pParent: c);

            // Create a logger node and move children to the logger.
            pLogger = Logger_new(node.name);
            ProvisionNode_moveChildren(pNode: pLogger);
            ProvisionNode_free(pNode);

            // Add logger node to parent.
            Node_addChild(pParent: pLogger);

            // Add the new logger node to the repositiory
            Repository_addLogger(pLogger);
            return pLogger;
         endsl;

         return Logger_null();

      /END-FREE
      *
     P Repository_getLogger...
     P                 E
      *
      *=========================================================================
      *  Adds an appender to the repository.
      *=========================================================================
      *  Parameters:
      *   i_pAppender   - Handle of the appender as it was returned by
      *                   Appender_new().
      *
      *  Returns:
      *   index         - Returns 0 on success, else -1.
      *=========================================================================
     P Repository_addAppender...
     P                 B                   export
      *
     D Repository_addAppender...
     D                 PI            10I 0
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return AppenderList_put(g_appendRepos: i_pAppender);

      /END-FREE
      *
     P Repository_addAppender...
     P                 E
      *
      *=========================================================================
      *  Removes an appender from the appender list of the repository.
      *=========================================================================
      *  Parameters:
      *   i_appName     - Name of the appender.
      *
      *  Returns:
      *   rc            - Returns 0 on success, else -1.
      *=========================================================================
     P Repository_removeAppender...
     P                 B                   export
      *
     D Repository_removeAppender...
     D                 PI            10I 0
     D  i_appName                          const  like(LOG4RPG_appenderName_t  )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return AppenderList_remove(g_appendRepos: i_appName);

      /END-FREE
      *
     P Repository_removeAppender...
     P                 E
      *
      *=========================================================================
      *  Tests, whether the specified appender exists.
      *=========================================================================
      *  Parameters:
      *   i_appName     - Name of the appender.
      *
      *  Returns:
      *   exist         - Returns TRUE if the logger exists, else FALSE.
      *=========================================================================
     P Repository_existAppender...
     P                 B                   export
      *
     D Repository_existAppender...
     D                 PI              N
     D  i_appName                          const  like(LOG4RPG_appenderName_t  )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return AppenderList_exist(g_appendRepos: i_appName);

      /END-FREE
      *
     P Repository_existAppender...
     P                 E
      *
      *=========================================================================
      *  Searches the appender list for the specified appender.
      *=========================================================================
      *  Parameters:
      *   i_appName     - Name of the appender.
      *
      *  Returns:
      *   pAppender     - Returns the handle of the appender on success, else
      *                   a NULL handle.
      *=========================================================================
     P Repository_getAppender...
     P                 B                   export
      *
     D Repository_getAppender...
     D                 PI                         like(LOG4RPG_pAppender_t    )
     D  i_appName                          const  like(LOG4RPG_appenderName_t )
      *
      *  Return value
     D pAppender       S                   like(LOG4RPG_pAppender_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         LogLog_verbose('Retrieving appender [' + i_appName + ']');

         pAppender = AppenderList_get(g_appendRepos: i_appName);
         if Appender_isNull(pAppender);
            return Appender_null();
         else;
            return pAppender;
         endif;

      /END-FREE
      *
     P Repository_getAppender...
     P                 E
      *
      *=========================================================================
      *  Adds a filter to the repository.
      *=========================================================================
      *  Parameters:
      *   i_pFilter     - Handle of the filter as it was returned by
      *                   Filter_new().
      *
      *  Returns:
      *   index         - Returns 0 on success, else -1.
      *=========================================================================
     P Repository_addFilter...
     P                 B                   export
      *
     D Repository_addFilter...
     D                 PI            10I 0
     D  i_pFilter                          const  like(LOG4RPG_pFilter_t)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return FilterList_put(g_filterRepos: i_pFilter);

      /END-FREE
      *
     P Repository_addFilter...
     P                 E
      *
      *=========================================================================
      *  Removes a filter from the filter list of the repository.
      *=========================================================================
      *  Parameters:
      *   i_fltName     - Name of the filter.
      *
      *  Returns:
      *   rc            - Returns 0 on success, else -1.
      *=========================================================================
     P Repository_removeFilter...
     P                 B                   export
      *
     D Repository_removeFilter...
     D                 PI            10I 0
     D  i_fltName                          const  like(LOG4RPG_filterName_t  )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return FilterList_remove(g_filterRepos: i_fltName);

      /END-FREE
      *
     P Repository_removeFilter...
     P                 E
      *
      *=========================================================================
      *  Tests, whether the specified filter exists.
      *=========================================================================
      *  Parameters:
      *   i_fltName     - Name of the filter.
      *
      *  Returns:
      *   exist         - Returns TRUE if the logger exists, else FALSE.
      *=========================================================================
     P Repository_existFilter...
     P                 B                   export
      *
     D Repository_existFilter...
     D                 PI              N
     D  i_fltName                          const  like(LOG4RPG_filterName_t  )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return FilterList_exist(g_filterRepos: i_fltName);

      /END-FREE
      *
     P Repository_existFilter...
     P                 E
      *
      *=========================================================================
      *  Searches the filter list for the specified filter.
      *=========================================================================
      *  Parameters:
      *   i_fltName     - Name of the filter.
      *
      *  Returns:
      *   pFilter       - Returns the handle of the filter on success, else
      *                   a NULL handle.
      *=========================================================================
     P Repository_getFilter...
     P                 B                   export
      *
     D Repository_getFilter...
     D                 PI                         like(LOG4RPG_pFilter_t    )
     D  i_fltName                          const  like(LOG4RPG_filterName_t )
      *
      *  Return value
     D pFilter         S                   like(LOG4RPG_pFilter_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         LogLog_verbose('Retrieving filter [' + i_fltName + ']');

         pFilter = FilterList_get(g_filterRepos: i_fltName);
         if Filter_isNull(pFilter);
            return Filter_null();
         else;
            return pFilter;
         endif;

      /END-FREE
      *
     P Repository_getFilter...
     P                 E
      *
      *=========================================================================
      *  Sets the SHUTDOWN-Flag if the repository.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   void
      *=========================================================================
     P Repository_setShutdown...
     P                 B                   export
      *
     D Repository_setShutdown...
     D                 PI
     D  i_isShutdown                   N   const
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         g_isShutdown = i_isShutdown;

         if g_isShutdown;
            LogLog_verbose('Repository SHUTDOWN mode set to ON');
         else;
            LogLog_verbose('Repository SHUTDOWN mode set to OFF');
         endif;

         return;

      /END-FREE
      *
     P Repository_setShutdown...
     P                 E
      *
      *=========================================================================
      *  Tests, if the repository is in SHUTDOWN mode.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   void
      *=========================================================================
     P Repository_isShutdown...
     P                 B                   export
      *
     D Repository_isShutdown...
     D                 PI              N
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return g_isShutdown;

      /END-FREE
      *
     P Repository_isShutdown...
     P                 E
      *
      *=========================================================================
      *  Initializes the logger repository.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   void
      *=========================================================================
     P Repository_initialize...
     P                 B                   export
      *
     D Repository_initialize...
     D                 PI
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         initializeModule();

         return;

      /END-FREE
      *
     P Repository_initialize...
     P                 E
      *
      *=========================================================================
      *  Prepare repository for re-loading configuration data.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   void
      *=========================================================================
     P Repository_prepareReload...
     P                 B                   export
      *
     D Repository_prepareReload...
     D                 PI
      *
      *  Helper fields
     D x               S             10I 0 inz
     D pNode           S                   like(LOG4RPG_hLogger_t       ) inz
     D nodeIter        DS                  likeds(LOG4RPG_Logger...
     D                                                    ListIterator_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // -------------------------------------------- //
         //   Reset loggers                              //
         // -------------------------------------------- //
         LogLog_verbose('Preparing repository to +
                        reload configuration data ...');

         if not LoggerList_isNull(g_loggerRepos);
            nodeIter = LoggerList_getIterator(g_loggerRepos);

            pNode = LoggerList_getFirst(nodeIter);
            dow (pNode <> *NULL);
               if Node_isLoggerNode(pNode);
                  LogLog_verbose('... resetting logger ' +
                                 Logger_getName(pNode) + ' ...');
                  Logger_removeAllAppenders(pNode);
                  Logger_resetLevel(pNode);
                  LogLog_verbose('... reset logger ' +
                                 Logger_getName(pNode) + '.');
               endif;
               pNode = LoggerList_getNext(nodeIter);
            enddo;

         endif;

         // -------------------------------------------- //
         //   Delete filter                              //
         // -------------------------------------------- //
         Repository_clearFilters();

         // -------------------------------------------- //
         //   Delete appender                            //
         // -------------------------------------------- //
         Repository_clearAppenders();

         return;

      /END-FREE
      *
     P Repository_prepareReload...
     P                 E
      *
      *===============================================================*
      *  Dumps the tree of children of a given logger.
      *===============================================================*
     P Repository_dumpHierarchy...
     P                 B                   export
     D                 PI
     D  i_pLogger                          const  like(LOG4RPG_hLogger_t )
     D                                            options(*nopass)
      *
      *  Parameter positions
     D p_pLogger       C                   1
      *
      *  Optional parameter fields
     D pLogger         S                   like(i_pLogger) inz
      *
      *  Helper fields
     D x               S             10I 0 inz
     D numChildren     S             10I 0 inz
     D logger          DS                  likeds(LOG4RPG_logger_t  )
     D                                     based(pLogger)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (LogLog_getInternalDebugMode() <> cLOG4RPG_DEBUG_VERBOSE);
            return;
         endif;

         if (%parms() >= p_pLogger and %addr(i_pLogger) <> *NULL);
            pLogger = i_pLogger;
         else;
            pLogger = Repository_getLogger(cROOT_LOGGER);
         endif;

         if (Node_getNumChildren(pLogger) <= 0);
            return;
         endif;

         LogLog_verbose('');
         LogLog_verbose('Logger Hierarchy:');
         LogLog_verbose('----------------');

         LogLog_verbose(f_space(0) + Node_toString(pLogger));

         dumpHierarchy(pLogger: 1);

         LogLog_verbose('----------------');

      /END-FREE
     P                 E
      *
      *===============================================================*
      *  *** Private ***
      *  Dumps the tree of children of a given logger.
      *===============================================================*
     P dumpHierarchy...
     P                 B
     D                 PI
     D  i_pLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_level                      10I 0 const
      *
      *  Helper fields
     D x               S             10I 0 inz
     D numChildren     S             10I 0 inz
     D logger          DS                  likeds(LOG4RPG_logger_t  )
     D                                     based(pLogger)
     D child           DS                  likeds(LOG4RPG_logger_t  )
     D                                     based(pChild)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         pLogger = i_pLogger;

         numChildren = Node_getNumChildren(i_pLogger);
         if (numChildren <= 0);
            return;
         endif;

         for x = 1 to numChildren;
            pChild = Node_getChild(i_pLogger: x);

            LogLog_verbose(f_space(i_level) + Node_toString(pChild));

            p_assert(child.pParent = i_pLogger
                     : 'Child''s parent does not match the actual parent');

            dumpHierarchy(pChild: i_level + 1);
         endfor;

      /END-FREE
     P                 E
      *
      *=========================================================================
      *  Clears the repository.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   void
      *=========================================================================
     P Repository_clear...
     P                 B                   export
      *
     D Repository_clear...
     D                 PI
      *
      *  Helper fields
     D x               S             10I 0 inz
     D pNode           S                   like(LOG4RPG_hLogger_t       ) inz
     D nodeIter        DS                  likeds(LOG4RPG_Logger...
     D                                                    ListIterator_t) inz
     D pAppender       S                   like(LOG4RPG_pAppender_t     ) inz
     D appIter         DS                  likeds(LOG4RPG_Appender...
     D                                                    ListIterator_t) inz
     D pFilter         S                   like(LOG4RPG_pFilter_t       ) inz
     D fltIter         DS                  likeds(LOG4RPG_Filter...
     D                                                    ListIterator_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Set repository SHUTDOWN-mode
         Repository_setShutdown(cTrue);

         // -------------------------------------------- //
         //   Delete logger                              //
         // -------------------------------------------- //
         LogLog_verbose('Deleting loggers ...');

         if not LoggerList_isNull(g_loggerRepos);
            nodeIter = LoggerList_getIterator(g_loggerRepos);

            x = LoggerList_getNumE(g_loggerRepos);
            dow (x > 0);
               pNode = LoggerList_getFirst(nodeIter);
               Repository_removeLogger(Node_getName(pNode));
               if Node_isProvisionNode(pNode);
                 ProvisionNode_free(pNode);   // Also removes the node from the repository
               else;
                 Logger_delete(pNode);   // Also removes the logger from the repository
               endif;
               x = LoggerList_getNumE(g_loggerRepos);
            enddo;

         endif;

         // -------------------------------------------- //
         //   Delete filter                              //
         // -------------------------------------------- //
         Repository_clearFilters();

         // -------------------------------------------- //
         //   Delete appender                            //
         // -------------------------------------------- //
         Repository_clearAppenders();

         return;

      /END-FREE
      *
     P Repository_clear...
     P                 E
      *
      *=========================================================================
      *  Clears all filters in the repository.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   void
      *=========================================================================
     P Repository_clearFilters...
     P                 B                   export
      *
     D Repository_clearFilters...
     D                 PI
      *
      *  Helper fields
     D x               S             10I 0 inz
     D pFilter         S                   like(LOG4RPG_pFilter_t       ) inz
     D fltIter         DS                  likeds(LOG4RPG_Filter...
     D                                                    ListIterator_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // -------------------------------------------- //
         //   Delete filter                              //
         // -------------------------------------------- //
         LogLog_verbose('Deleting filters ...');

         if not FilterList_isNull(g_filterRepos);
            fltIter = FilterList_getIterator(g_filterRepos);

            x = FilterList_getNumE(g_filterRepos);
            dow (x > 0);
               pFilter = FilterList_getFirst(fltIter);
               Filter_delete(pFilter); // Also removes the filter from the repository
               x = FilterList_getNumE(g_filterRepos);
            enddo;

         endif;

         return;

      /END-FREE
      *
     P Repository_clearFilters...
     P                 E
      *
      *=========================================================================
      *  Clears all appenders in the repository.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   void
      *=========================================================================
     P Repository_clearAppenders...
     P                 B                   export
      *
     D Repository_clearAppenders...
     D                 PI
      *
      *  Helper fields
     D x               S             10I 0 inz
     D pAppender       S                   like(LOG4RPG_pAppender_t     ) inz
     D appIter         DS                  likeds(LOG4RPG_Appender...
     D                                                    ListIterator_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // -------------------------------------------- //
         //   Delete appender                            //
         // -------------------------------------------- //
         LogLog_verbose('Deleting appenders ...');

         if not AppenderList_isNull(g_appendRepos);
            appIter = AppenderList_getIterator(g_appendRepos);

            x = AppenderList_getNumE(g_appendRepos);
            dow (x > 0);
               pAppender = AppenderList_getFirst(appIter);
               Appender_delete(pAppender); // Also removes the appender from the repository
               x = AppenderList_getNumE(g_appendRepos);
            enddo;

         endif;

         return;

      /END-FREE
      *
     P Repository_clearAppenders...
     P                 E
      *
      *===============================================================*
    R *  *** PRIVATE ***
      *  Free resources  on termination of activation group.
      *===============================================================*
      *  ag_mark (input)
      *      The activation group mark that uniquely identifies the activation
      *      group within the job.
      *  reason (input)
      *      The reason for the activation group being ended.  See Figure 2-1 for a
      *      description of the reason codes.
      *  result_code (I/O)
      *      The value passed as input is the action to be taken as specified by a
      *      previous exit procedure.  The value passed to the first exit procedure
      *      is 0.  The output value can specify an action to be taken.  If the
      *      result code does not match any of the following actions, the output
      *      value is ignored and the previous action remains unchanged.
      *
      *      No action
      *         0           Do not change the action.
      *
      *      Recover
      *         10          Do not perform any pending error requests.  This is
      *                             used if a previous exit procedure specified a result
      *                             code of 20 and a subsequent procedure recovers from
      *                             the error.  The message CEE9901, indicating an
      *                             application error, is not sent.
      *      Failure
      *
      *         20          Send message CEE9901 to the caller of the control
      *                     boundary after the remaining exit procedures are
      *                     called.
      *         21          Send message CEE9901 to the caller of the control
      *                     boundary.  The remaining exit procedures registered by
      *                     the CEE4RAGE API are not called.  This is used if an
      *                     unrecoverable error occurs in the exit procedure
      *                     requesting this action.
      *
      *  user_rc (I/O)
      *      The value passed as input is the user_rc returned as output from the
      *      previous exit procedure.  The value passed to the first exit procedure
      *      is 0.
      *
      *===============================================================*
     P PRIVATE_onActivationGroupEnd...
     P                 B                   export
      *
     D PRIVATE_onActivationGroupEnd...
     D                 PI
     D  i_ag_mark                    10U 0 const
     D  i_reason                     10U 0 const
     D  io_result_code...
     D                               10U 0
     D  io_user_rc                   10U 0
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         LogLog_debug('=== Starting clean up for repository ===');

         // -------------------------------------------- //
         //   Clear configuration data                   //
         // -------------------------------------------- //
         Repository_clear();

         // -------------------------------------------- //
         //   Delete logger list                         //
         // -------------------------------------------- //
         p_assert(LoggerList_getNumE(g_loggerRepos) = 0
                  : 'Loggers should have been deleted.');

         if LoggerList_delete(g_loggerRepos);
            LogLog_verbose('- Deleted logger list of repository.');
         else;
            LogLog_error('Failed to delete logger list of repository.');
         endif;

         // -------------------------------------------- //
         //   Delete filter list                         //
         // -------------------------------------------- //
         p_assert(FilterList_getNumE(g_filterRepos) = 0
                  : 'Filters should have been deleted.');

         if FilterList_delete(g_filterRepos);
            LogLog_verbose('- Deleted filter list of repository.');
         else;
            LogLog_error('Failed to delete filter list of repository.');
         endif;

         // -------------------------------------------- //
         //   Delete appender list                       //
         // -------------------------------------------- //
         p_assert(AppenderList_getNumE(g_appendRepos) = 0
                  : 'Appenders should have been deleted.');

         if AppenderList_delete(g_appendRepos);
            LogLog_verbose('- Deleted appender list of repository.');
         else;
            LogLog_error('Failed to delete appender list of repository.');
         endif;

         LogLog_verbose('- Freed repository.');

         return;

      /END-FREE
      *
     P PRIVATE_onActivationGroupEnd...
     P                 E
      *
      *===============================================================*
    R *  *** Private ***
      *  Updates the parents of a given logger.
      *===============================================================*
     P updateParents...
     P                 B
      *
     D updateParents...
     D                 PI
     D  i_pLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  Helper fields
     D x               S             10I 0 inz
     D logName         S                   like(LOG4RPG_loggerName_t) inz
     D substr          S                   like(logName             ) inz
     D parent          DS                  likeds(LOG4RPG_logger_t  )
     D                                     based(pParent)
     D child           DS                  likeds(LOG4RPG_logger_t  )
     D                                     based(pChild)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         logName = Logger_getName(i_pLogger);
         if logName = cROOT_LOGGER;
            Logger_setParent(i_pLogger: Logger_null());
            return;
         endif;

         pChild = i_pLogger;
         pParent = Logger_null();

         x = f_scanR('.': logName: %len(logName));
         dow x > 1;
            substr = f_left(logName: x-1);

            pParent = LoggerList_get(g_loggerRepos: substr);

            select;
            when pParent = *NULL;
               pParent = ProvisionNode_makeProvisionNode(substr: pChild);
               Repository_addLogger(pParent);
            when Node_isLoggerNode(pParent);
               if (Node_getParent(pChild) = Node_null());
                  Logger_addChild(pParent: pChild);
               endif;
            when Node_isProvisionNode(pParent);
               if (ProvisionNode_getParent(pChild) = ProvisionNode_null());
                  ProvisionNode_addChild(pParent: pChild);
               endif;
            endsl;

            p_assert(Node_getParent(pChild) = pParent
                     : 'Parent node must match the child''s parent');

            x = f_scanR('.': logName: x-1);
            pChild = pParent;
         enddo;
 B01
         if (Node_getParent(pChild) = Node_null());
            logName = Logger_getName(pChild);
            LogLog_debug('Parent not found. Set parent of node [' + logName                 //RADDAT
                          + '] to ''root''.');
            Node_addChild(Repository_getLogger(cROOT_LOGGER): pChild);
         endif;

      /END-FREE
      *
     P updateParents...
     P                 E
      *
      *=========================================================================
    R *  *** private ***
      *  Initializes this module.
      *=========================================================================
     P initializeModule...
     P                 B
      *
     D initializeModule...
     D                 PI
      *
      *  Return value
      *
      *  Helper fields
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if g_isInit;
            return;
         endif;

         Loglog_verbose('Initializing module ' + sds.modContProc + '...');

         // Disable Repository SHUTDOWN-mode
         Repository_setShutdown(cFalse);

         // Register activation group exit procedure
         CEE4RAGE(%paddr('LOG4RPG13_PRIVATE_onActivationGroupEnd'): *OMIT);

         // Create logger 'repository'
         g_loggerRepos = LoggerList_null();
         g_loggerRepos = LoggerList_new();
         if not LoggerList_isNull(g_loggerRepos);
            LogLog_verbose('+ Created logger list of repository.');
         else;
            LogLog_error('+ Failed to create logger list of repository.');
         endif;

         // Create filter 'repository'
         g_filterRepos = FilterList_null();
         g_filterRepos = FilterList_new();
         if not FilterList_isNull(g_filterRepos);
            LogLog_verbose('+ Created filter list of repository.');
         else;
            LogLog_error('+ Failed to create filter list of repository.');
         endif;

         // Create appender 'repository'
         g_appendRepos = AppenderList_null();
         g_appendRepos = AppenderList_new();
         if not AppenderList_isNull(g_appendRepos);
            LogLog_verbose('+ Created appender list of repository.');
         else;
            LogLog_error('+ Failed to create appender list of repository.');
         endif;

         LogLog_verbose('+ Initialized repository.');

         // Ready!
         g_isInit = cTrue;

         return;

      /END-FREE
      *
     P initializeModule...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG14  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG14 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: DebugMode               "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: DebugMode                                *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  13.06.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG14
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG                      Public interface & type definitions
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QBASICS1,PBASICS1                      Basic RPG Extensions
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      *=========================================================================
      *  Converts the string passed as argument to an integer debug mode.
      *=========================================================================
      *  Parameters:
      *   i_debugMode   - Debug mode as string.
      *
      *  Returns:
      *   debugMode     - Debug mode, converted to an integer value.
      *=========================================================================
     P DebugMode_toInt...
     P                 B                   export
      *
     D DebugMode_toInt...
     D                 PI             5I 0
     D  i_debugMode                        const  like(LOG4RPG_debugMode_t  )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         select;
         when i_debugMode = cLOG4RPG_DEBUG_QUIET;
            return cLOG4RPG_INT_DEBUG_QUIET;
         when i_debugMode = cLOG4RPG_DEBUG_OFF;
            return cLOG4RPG_INT_DEBUG_OFF;
         when i_debugMode = cLOG4RPG_DEBUG_ON;
            return cLOG4RPG_INT_DEBUG_ON;
         when i_debugMode = cLOG4RPG_DEBUG_VERBOSE;
            return cLOG4RPG_INT_DEBUG_VERBOSE;
         other;
            return cLOG4RPG_INT_DEBUG_OFF;
         endsl;

      /END-FREE
      *
     P DebugMode_toInt...
     P                 E
      *
      *=========================================================================
      *  Converts the integer passed as argument to a string debug mode.
      *=========================================================================
      *  Parameters:
      *   i_debugMode   - Debug mode as integer.
      *
      *  Returns:
      *   debugMode     - Debug mode, converted to a string value.
      *=========================================================================
     P DebugMode_toString...
     P                 B                   export
      *
     D DebugMode_toString...
     D                 PI                         like(LOG4RPG_debugMode_t  )
     D  i_debugMode                   5I 0 const
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         select;
         when i_debugMode = cLOG4RPG_INT_DEBUG_QUIET;
            return cLOG4RPG_DEBUG_QUIET;
         when i_debugMode = cLOG4RPG_INT_DEBUG_OFF;
            return cLOG4RPG_DEBUG_OFF;
         when i_debugMode = cLOG4RPG_INT_DEBUG_ON;
            return cLOG4RPG_DEBUG_ON;
         when i_debugMode = cLOG4RPG_INT_DEBUG_VERBOSE;
            return cLOG4RPG_DEBUG_VERBOSE;
         other;
            return '';
         endsl;

      /END-FREE
      *
     P DebugMode_toString...
     P                 E
      *
      *=========================================================================
      *  Tests, if the specified debug mode is valid (well known).
      *=========================================================================
      *  Parameters:
      *   i_debugMode   - Debug mode as string.
      *
      *  Returns:
      *   isValid       - Returns TRUE if the debug mode is known, else FALSE.
      *=========================================================================
     P DebugMode_isValid...
     P                 B                   export
      *
     D DebugMode_isValid...
     D                 PI              N
     D  i_debugMode                        const  like(LOG4RPG_debugMode_t  )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (i_debugMode = cLOG4RPG_DEBUG_QUIET) or
 B01        (i_debugMode = cLOG4RPG_DEBUG_OFF  ) or
            (i_debugMode = cLOG4RPG_DEBUG_ON   ) or
            (i_debugMode = cLOG4RPG_DEBUG_VERBOSE);
            return cTrue;
         else;
            return cFalse;
         endif;

      /END-FREE
      *
     P DebugMode_isValid...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG15  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG15 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: DebugOutput             "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: DebugOutput                              *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  13.06.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG15
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG                      Public interface & type definitions
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QBASICS1,PBASICS1                      Basic RPG Extensions
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      *=========================================================================
      *  Converts the string passed as argument to an integer debug output.
      *=========================================================================
      *  Parameters:
      *   i_debugOutput - Debug output as string.
      *
      *  Returns:
      *   debugOutput   - Debug output, converted to an integer value.
      *=========================================================================
     P DebugOutput_toInt...
     P                 B                   export
      *
     D DebugOutput_toInt...
     D                 PI             5I 0
     D  i_debugOutput                      const  like(LOG4RPG_debugOutput_t)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         select;
         when i_debugOutput = cLOG4RPG_DEBUG_OUTPUT_PRINTER;
            return cLOG4RPG_INT_DEBUG_OUTPUT_PRINTER;
         when i_debugOutput = cLOG4RPG_DEBUG_OUTPUT_STDOUT;
            return cLOG4RPG_INT_DEBUG_OUTPUT_STDOUT;
         other;
            return cLOG4RPG_INT_DEBUG_OUTPUT_PRINTER;
         endsl;

      /END-FREE
      *
     P DebugOutput_toInt...
     P                 E
      *
      *=========================================================================
      *  Converts the integer passed as argument to a string debug output.
      *=========================================================================
      *  Parameters:
      *   i_debugOutput - Debug output as integer.
      *
      *  Returns:
      *   debugOutput   - Debug output, converted to a string value.
      *=========================================================================
     P DebugOutput_toString...
     P                 B                   export
      *
     D DebugOutput_toString...
     D                 PI                         like(LOG4RPG_debugOutput_t)
     D  i_debugOutput                 5I 0 const
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         select;
         when i_debugOutput = cLOG4RPG_INT_DEBUG_OUTPUT_PRINTER;
            return cLOG4RPG_DEBUG_OUTPUT_PRINTER;
         when i_debugOutput = cLOG4RPG_INT_DEBUG_OUTPUT_STDOUT;
            return cLOG4RPG_DEBUG_OUTPUT_STDOUT;
         other;
            return '';
         endsl;

      /END-FREE
      *
     P DebugOutput_toString...
     P                 E
      *
      *=========================================================================
      *  Tests, if the specified debug output is valid (well known).
      *=========================================================================
      *  Parameters:
      *   i_debugOutput - Debug output as string.
      *
      *  Returns:
      *   isValid       - Returns TRUE if the debug output is known, else FALSE.
      *=========================================================================
     P DebugOutput_isValid...
     P                 B                   export
      *
     D DebugOutput_isValid...
     D                 PI              N
     D  i_debugOutput                      const  like(LOG4RPG_debugOutput_t)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (i_debugOutput = cLOG4RPG_DEBUG_OUTPUT_PRINTER) or
            (i_debugOutput = cLOG4RPG_DEBUG_OUTPUT_STDOUT);
            return cTrue;
         else;
            return cFalse;
         endif;

      /END-FREE
      *
     P DebugOutput_isValid...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG16  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG16 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: LogEvent                "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: LogEvent                                 *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  18.10.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *  13.06.2008  Th.Raddatz    Changed Log4rpg to log empty messages.   *
      *                                                                     *
      *  09.06.2008  Th.Raddatz    Added optional parameter i_width to      *
      *                            LogEvent_getFirstLineOfText() and        *
      *                            LogEvent_getNextLineOfText().            *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG16
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
 CPY  *COPY QLOG4RPG,PLOG4RPG                      Public interface & type definitions
      *
     D handle_t...
     D                 DS                  qualified               based(pDummy)
     D  logName                            like(LOG4RPG_loggerName_t   )
     D  time                           Z
     D  priority                           like(LOG4RPG_priority_t     )
     D  caller                             likeds(LOG4RPG_caller_t     )
     D  hPropList                          like(LOG4RPG_pPropertyList_t)
     D  startPos                     10U 0
     D  text                               like(LOG4RPG_formattedText_t)
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QLOG4RPG,CLIB                          C-Library
      /COPY QLOG4RPG,CEELIB                        CEE-Procedures
      /COPY QBASICS1,PBASICS1                      Basic RPG Extensions
      *
      /COPY QLOG4RPG,PLOG4RPG07                    PropertyList
      /COPY QLOG4RPG,PLOG4RPG09                    Level
      /COPY QLOG4RPG,PLOG4RPG10                    LogLog
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      *=========================================================================
      *  Produces a new log event.
      *=========================================================================
      *  Parameters:
      *   i_name        -
      *   i_priority    -
      *   i_text        -
      *   i_caller      -
      *
      *  Returns:
      *   logEvent
      *=========================================================================
     P LogEvent_new...
     P                 B                   export
      *
     D LogEvent_new...
     D                 PI                         like(LOG4RPG_pLogEvent_t)
     D  i_logName                          const  like(LOG4RPG_loggerName_t    )
     D  i_priority                         const  like(LOG4RPG_priority_t      )
     D  i_text                             const  like(LOG4RPG_formattedText_t )
     D                                            options(*varsize)
     D  i_caller                           const  likeds(LOG4RPG_caller_t      )
      *
      *  Return value
     D logEvent        DS                  likeds(handle_t)
     D                                     based(pLogEvent)
      *
      *  Helper fields
     D tmpLogEvent     DS                  likeds(handle_t              ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         LogLog_verbose('Creating log event for logger [' +
                        i_logName + '] ...');

         pLogEvent = LogEvent_null();

         // Initialize log event
         clear tmpLogEvent;
         tmpLogEvent.logName     = i_logName;
         tmpLogEvent.time        = %timestamp();
         tmpLogEvent.priority    = i_priority;
         if %len(i_text) > 0;
            tmpLogEvent.text = %subst(i_text: 1: %len(i_text));
         else;
            tmpLogEvent.text = '';
         endif;
         tmpLogEvent.caller      = i_caller;
         tmpLogEvent.hPropList   = PropertyList_new();

         // Return layout to caller
         pLogEvent = %alloc(%size(handle_t));
         logEvent = tmpLogEvent;

         return pLogEvent;

      /END-FREE
      *
     P LogEvent_new...
     P                 E
      *
      *=========================================================================
      *  Returns the property list of the log event.
      *=========================================================================
      *  Parameters:
      *   i_logEvent    - Log event.
      *
      *  Returns:
      *   pPropList     - Handle of the property list.
      *=========================================================================
     P LogEvent_getPropertyList...
     P                 B                   export
      *
     D LogEvent_getPropertyList...
     D                 PI                         like(LOG4RPG_pPropertyList_t)
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t    )
      *
      *  LogEvent handle
     D logEvent        DS                  likeds(handle_t)
     D                                     based(i_pLogEvent)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return logEvent.hPropList;

      /END-FREE
      *
     P LogEvent_getPropertyList...
     P                 E
      *
      *=========================================================================
      *  Sets the text of the log event.
      *=========================================================================
      *  Parameters:
      *   i_pLogEvent   - Handle of the Log event returned by LogEvent_new().
      *   i_text        - Text.
      *
      *  Returns:
      *   void
      *=========================================================================
     P LogEvent_setText...
     P                 B                   export
      *
     D LogEvent_setText...
     D                 PI
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
     D  i_text                             const  like(LOG4RPG_formattedText_t )
     D                                            options(*varsize)
      *
      *  LogEvent handle
     D logEvent        DS                  likeds(handle_t)
     D                                     based(i_pLogEvent)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (%len(i_text) > 0);
            logEvent.text = %subst(i_text: 1: %len(i_text));
         else;
            logEvent.text = '';
         endif;

         return;

      /END-FREE
      *
     P LogEvent_setText...
     P                 E
      *
      *=========================================================================
      *  Appends the text of the log event.
      *=========================================================================
      *  Parameters:
      *   i_pLogEvent   - Handle of the Log event returned by LogEvent_new().
      *   i_text        - Text.
      *
      *  Returns:
      *   void
      *=========================================================================
     P LogEvent_appendText...
     P                 B                   export
      *
     D LogEvent_appendText...
     D                 PI
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
     D  i_text                             const  like(LOG4RPG_formattedText_t )
     D                                            options(*varsize)
      *
      *  LogEvent handle
     D logEvent        DS                  likeds(handle_t)
     D                                     based(i_pLogEvent)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         logEvent.text = logEvent.text + %subst(i_text: 1: %len(i_text));

         return;

      /END-FREE
      *
     P LogEvent_appendText...
     P                 E
      *
      *=========================================================================
      *  Returns the name of the logger that produced the specified log event.
      *=========================================================================
      *  Parameters:
      *   i_logEvent    - Log event.
      *
      *  Returns:
      *   logName       - Name of the logger.
      *=========================================================================
     P LogEvent_getLoggerName...
     P                 B                   export
      *
     D LogEvent_getLoggerName...
     D                 PI                         like(LOG4RPG_loggerName_t    )
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  LogEvent handle
     D logEvent        DS                  likeds(handle_t)
     D                                     based(i_pLogEvent)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return logEvent.logName;

      /END-FREE
      *
     P LogEvent_getLoggerName...
     P                 E
      *
      *=========================================================================
      *  Returns the priority of the log event.
      *=========================================================================
      *  Parameters:
      *   i_logEvent    - Log event.
      *
      *  Returns:
      *   priority      - Priority of the log event.
      *=========================================================================
     P LogEvent_getPriority...
     P                 B                   export
      *
     D LogEvent_getPriority...
     D                 PI                         like(LOG4RPG_priority_t      )
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  LogEvent handle
     D logEvent        DS                  likeds(handle_t)
     D                                     based(i_pLogEvent)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return logEvent.priority;

      /END-FREE
      *
     P LogEvent_getPriority...
     P                 E
      *
      *=========================================================================
      *  Returns the level of the log event.
      *=========================================================================
      *  Parameters:
      *   i_logEvent    - Log event.
      *
      *  Returns:
      *   level         - Level of the log event.
      *=========================================================================
     P LogEvent_getLevel...
     P                 B                   export
      *
     D LogEvent_getLevel...
     D                 PI                         like(LOG4RPG_level_t         )
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  LogEvent handle
     D logEvent        DS                  likeds(handle_t)
     D                                     based(i_pLogEvent)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return Level_toString(logEvent.priority);

      /END-FREE
      *
     P LogEvent_getLevel...
     P                 E
      *
      *=========================================================================
      *  Returns the time at which the log event was produced.
      *=========================================================================
      *  Parameters:
      *   i_logEvent    - Log event.
      *
      *  Returns:
      *   time          - Time, the log event was produced.
      *=========================================================================
     P LogEvent_getTime...
     P                 B                   export
      *
     D LogEvent_getTime...
     D                 PI              Z
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  LogEvent handle
     D logEvent        DS                  likeds(handle_t)
     D                                     based(i_pLogEvent)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return logEvent.time;

      /END-FREE
      *
     P LogEvent_getTime...
     P                 E
      *
      *=========================================================================
      *  Returns the qualified name of the procedure that called Log4rpg.
      *=========================================================================
      *  Parameters:
      *   i_logEvent    - Log event.
      *
      *  Returns:
      *   caller        - Procedure that called Log4rpg.
      *=========================================================================
     P LogEvent_getCaller...
     P                 B                   export
      *
     D LogEvent_getCaller...
     D                 PI                         likeds(LOG4RPG_caller_t      )
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  LogEvent handle
     D logEvent        DS                  likeds(handle_t)
     D                                     based(i_pLogEvent)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return logEvent.caller;

      /END-FREE
      *
     P LogEvent_getCaller...
     P                 E
      *
      *=========================================================================
      *  Resolves the name of the library of the program that called Log4rpg.
      *=========================================================================
      *  Parameters:
      *   i_logEvent    - Log event.
      *
      *  Returns:
      *   library       - Name of the library.
      *=========================================================================
     P LogEvent_resolveCallerPgmLibrary...
     P                 B                   export
      *
     D LogEvent_resolveCallerPgmLibrary...
     D                 PI            10A
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  LogEvent handle
     D logEvent        DS                  likeds(handle_t)
     D                                     based(i_pLogEvent)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if logEvent.caller.pgm.lib = '';
            logEvent.caller = getCallingProcedure();
         endif;

         return logEvent.caller.pgm.lib;

      /END-FREE
      *
     P LogEvent_resolveCallerPgmLibrary...
     P                 E
      *
      *=========================================================================
      *  Returns the log event text.
      *=========================================================================
      *  Parameters:
      *   i_logEvent    - Log event.
      *
      *  Returns:
      *   text          - Text of the log event.
      *=========================================================================
     P LogEvent_getText...
     P                 B                   export
      *
     D LogEvent_getText...
     D                 PI                         like(LOG4RPG_formattedText_t )
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  LogEvent handle
     D logEvent        DS                  likeds(handle_t)
     D                                     based(i_pLogEvent)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return logEvent.text;

      /END-FREE
      *
     P LogEvent_getText...
     P                 E
      *
      *=========================================================================
      *  Returns a pointer to the log event text.
      *=========================================================================
      *  Parameters:
      *   i_logEvent    - Log event.
      *
      *  Returns:
      *   *             - NULL-terminated text string.
      *                   Info: Memory must be freed by calling procedure!)
      *=========================================================================
     P LogEvent_getTextPointer...
     P                 B                   export
      *
     D LogEvent_getTextPointer...
     D                 PI              *
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  Return value
     D pText           S               *   inz
      *
      *  helper fields
     D size            S             10I 0 inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         size = LogEvent_textLength(i_pLogEvent) + 1;

         pText = %alloc(size);

         %str(pText: size) = LogEvent_getText(i_pLogEvent);

         return pText;

      /END-FREE
      *
     P LogEvent_getTextPointer...
     P                 E
      *
      *=========================================================================
      *  Returns the length of the log event text.
      *=========================================================================
      *  Parameters:
      *   i_logEvent    - Log event.
      *
      *  Returns:
      *   length        - Length of the log event text.
      *=========================================================================
     P LogEvent_textLength...
     P                 B                   export
      *
     D LogEvent_textLength...
     D                 PI            10I 0
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  LogEvent handle
     D logEvent        DS                  likeds(handle_t)
     D                                     based(i_pLogEvent)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return %len(logEvent.text);

      /END-FREE
      *
     P LogEvent_textLength...
     P                 E
      *
      *=========================================================================
      *  Returns the first line of text.
      *=========================================================================
      *  Parameters:
      *   i_pLogEvent   - Handle of the Log event returned by LogEvent_new().
      *
      *  Returns:
      *   text          - Text line.
      *=========================================================================
     P LogEvent_getFirstLineOfText...
     P                 B                   export
      *
     D LogEvent_getFirstLineOfText...
     D                 PI                         like(LOG4RPG_formattedText_t )
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
     D  o_isText                       N
     D  i_width                      10U 0 const  options(*nopass)
      *
      *  Parameter positions
     D p_width         C                   3
      *
      *  LogEvent handle
     D logEvent        DS                  likeds(handle_t)
     D                                     based(i_pLogEvent)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         logEvent.startPos = 1;

         if (%parms() >= p_width);
            return LogEvent_getNextLineOfText(i_pLogEvent: o_isText: i_width);
         else;
            return LogEvent_getNextLineOfText(i_pLogEvent: o_isText);
         endif;


      /END-FREE
      *
     P LogEvent_getFirstLineOfText...
     P                 E
      *
      *=========================================================================
      *  Returns the next line of text.
      *=========================================================================
      *  Parameters:
      *   i_pLogEvent   - Handle of the Log event returned by LogEvent_new().
      *
      *  Returns:
      *   text          - Text line.
      *=========================================================================
     P LogEvent_getNextLineOfText...
     P                 B                   export
      *
     D LogEvent_getNextLineOfText...
     D                 PI                         like(LOG4RPG_formattedText_t )
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
     D  o_isText                       N
     D  i_width                      10U 0 const  options(*nopass)
      *
      *  Parameter positions
     D p_width         C                   3
      *
      *  Fields for optional parameters
     D width           S                   like(i_width   ) inz
      *
      *  Return value
     D text            S                   like(LOG4RPG_formattedText_t ) inz
      *
      *  LogEvent handle
     D logEvent        DS                  likeds(handle_t)
     D                                     based(i_pLogEvent)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (%parms() >= p_width);
            width = i_width;
         else;
            width = cLOG4RPG_MAX_TEXT_LENGTH;
         endif;

         if logEvent.startPos > 0;
            o_isText = cTrue;
            return f_wordWrap(logEvent.text
                              : i_width
                              : logEvent.startPos
                              : cWORDWRAP_PARAGRAPH_TEXT +
                                cWORDWRAP_PARAGRAPH_TRIMR);
         endif;

         o_isText = cFalse;

         return '';

      /END-FREE
      *
     P LogEvent_getNextLineOfText...
     P                 E
      *
      *=========================================================================
      *  Deletes a given log event.
      *=========================================================================
      *  Parameters:
      *   io_pLogEvent  - Handle of the Log event returned by LogEvent_new().
      *
      *  Returns:
      *   void
      *=========================================================================
     P LogEvent_delete...
     P                 B                   export
      *
     D LogEvent_delete...
     D                 PI
     D  io_pLogEvent                              like(LOG4RPG_pLogEvent_t     )
      *
      *  LogEvent handle
     D logEvent        DS                  likeds(handle_t)
     D                                     based(io_pLogEvent)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         LogLog_verbose('Deleting log event of logger [' +
                         logEvent.logName + '] ...');

         if not PropertyList_isNull(logEvent.hPropList);
            PropertyList_delete(logEvent.hPropList);
         endif;

         clear logEvent;

         dealloc(N) io_pLogEvent;

         io_pLogEvent = LogEvent_null();

         return;

      /END-FREE
      *
     P LogEvent_delete...
     P                 E
      *
      *=========================================================================
      *  Tests a given log event for a NULL value.
      *=========================================================================
      *  Parameters:
      *   i_pLogEvent   - Handle of the log event returned by LogEvent_new().
      *
      *  Returns:
      *   isNull        - Returns TRUE if the handle of the log event is a
      *                   NULL handle.
      *=========================================================================
     P LogEvent_isNull...
     P                 B                   export
      *
     D LogEvent_isNull...
     D                 PI              N
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  Return value
     D isNull          S               N   inz(cFalse)
      *
      *  LogEvent handle
     D logEvent        DS                  likeds(handle_t)
     D                                     based(i_pLogEvent)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if i_pLogEvent = LogEvent_null();
            isNull = cTrue;
         else;
            isNull = cFalse;
         endif;

         return isNull;

      /END-FREE
      *
     P LogEvent_isNull...
     P                 E
      *
      *=========================================================================
      *  Returns a NULL log event.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   pLogEvent     - LogEvent NULL handle.
      *=========================================================================
     P LogEvent_null...
     P                 B                   export
      *
     D LogEvent_null...
     D                 PI                         like(LOG4RPG_pLogEvent_t     )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return *NULL;

      /END-FREE
      *
     P LogEvent_null...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG17  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG17 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: Filter                  "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: Filter                                   *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  18.10.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG17
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
     D handle_t...
     D                 DS                  qualified               based(pDummy)
     D  name                               like(LOG4RPG_filterName_t      )
     D  filterImpl                         likeds(LOG4RPG_classFilter_t   )
     D  pNextFilter                        like(LOG4RPG_pFilter_t         )
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QLOG4RPG,CEELIB                        CEE-Procedures
      /COPY QBASICS1,PBASICS1                      Basic RPG Extensions
      *
      /COPY QLOG4RPG,PLOG4RPG07                    PropertyList
      /COPY QLOG4RPG,PLOG4RPG10                    LogLog
      /COPY QLOG4RPG,PLOG4RPG12                    ClassLoader
      /COPY QLOG4RPG,PLOG4RPG13                    Repository
      /COPY QLOG4RPG,PLOG4RPG16                    LogEvent
      *
      /DEFINE DEFINE_PROCPTR
      /COPY QLOG4RPG,PFILTER                       Filter implementation
      /UNDEFINE DEFINE_PROCPTR
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      *  Initializes this module.
     D initializeModule...
     D                 PR
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
     D cPARAMETER_NEXT_FILTER...
     D                 C                          const('nextfilter')
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
     D g_isInit        S               N   inz(cFalse)
      *
      * -----------------------------------------
      *  Program status data structure
      * -----------------------------------------
      /DEFINE SDS_EXTENDED
      /COPY QLOG4RPG,SDS
      /UNDEFINE SDS_EXTENDED
      *
      *=========================================================================
      *  Creates a new filter.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   pFilter       - Returns a handle to the filter on success, else
      *                   a NULL handle.
      *=========================================================================
     P Filter_new...
     P                 B                   export
      *
     D Filter_new...
     D                 PI                         like(LOG4RPG_pFilter_t       )
     D  i_fltName                          const  like(LOG4RPG_filterName_t    )
     D  i_fltImpl                          const  like(LOG4RPG_implClass_t     )
     D  i_pPropString                  *   const  options(*nopass:
     D                                                    *omit  : *string)
      *
      *  Return value
     D filter          DS                  likeds(handle_t             )
     D                                     based(pFilter  )
      *
      *  Paremeter positions
     D p_pPropString   C                   const(3)
      *
      *  Fields for optional parameters
     D pPropString     S                   like(i_pPropString  ) inz
      *
      *  Helper fields
     D isPresent       S             10I 0 inz
     D pPropList       S                   like(LOG4RPG_pPropertyList_t ) inz
     D tempFilter      DS                  likeds(handle_t              ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         initializeModule();

         LogLog_debug('Creating filter [' + i_fltName + '] ...');

         pFilter = Filter_null();

         // Get optional parameters ...
         // ... property string
         if %parms() >= p_pPropString;
            CEETSTA(isPresent: p_pPropString: *omit);
         else;
            isPresent = 0;
         endif;

         if isPresent = 1;
            pPropString = i_pPropString;
         else;
            pPropString = *NULL;
         endif;

         // Initialize filter
         tempFilter.name    = i_fltName;
         if not ClassLoader_resolveFilter(i_fltImpl: tempFilter.filterImpl);
            return pFilter;
         endif;
         tempFilter.pNextFilter = Filter_null();

         // Create properties list
         if pPropString <> *NULL;
            pPropList = PropertyList_new(pPropString);
         else;
            pPropList = PropertyList_null();
         endif;

         // Create filter handle
         pFilter  = %alloc(%size(handle_t));
         filter   = tempFilter;

         // Instanciate filter implementation object
         g_pFilter_new = filter.filterImpl.procNew.procptr;
         SrvPgmFilter_new(pFilter
                          : filter.filterImpl.pHandle
                          : pPropList
                          : '');

         // Destroy properties list
         if not PropertyList_isNull(pPropList);
            PropertyList_delete(pPropList);
         endif;

         // Add filter to the repository
         Repository_addFilter(pFilter);

         LogLog_verbose('+ Allocated memory for filter [' +
                           filter.name + '].');

         return pFilter;

      /END-FREE
      *
     P Filter_new...
     P                 E
      *
      *=========================================================================
      *  Decides what to do with the log event.
      *=========================================================================
      *  Parameters:
      *   i_pLogEvent   - Handle of the Log event.
      *
      *  Returns:
      *   decision      - The decison of the filter how to treat the log event.
      *                   Valid values are:   cFILTER_ACCEPT
      *                                       cFILTER_DENY
      *                                       cFILTER_NEUTRAL
      *=========================================================================
     P Filter_decide...
     P                 B                   export
      *
     D Filter_decide...
     D                 PI            10I 0
     D  i_pFilter                          const  like(LOG4RPG_pFilter_t       )
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  Return value
     D decision        S             10I 0 inz
      *
      *  Helper fields
      *
      *  Filter handle
     D filter          DS                  likeds(handle_t)
     D                                     based(i_pFilter  )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         LogLog_verbose('-> Filtering log event of logger [' +
                            LogEvent_getLoggerName(i_pLogEvent) + ']...');

         g_pFilter_decide = filter.filterImpl.procDecide.procptr;
         decision = SrvPgmFilter_decide(filter.filterImpl.pHandle
                                        : i_pLogEvent);

         LogLog_verbose('-> Decision: ' + %char(decision));

         return decision;

      /END-FREE
      *
     P Filter_decide...
     P                 E
      *
      *=========================================================================
      *  Returns the name of the filter.
      *=========================================================================
      *  Parameters:
      *   i_pFilter     - Handle of the filter returned by Filter_new().
      *
      *  Returns:
      *   name          - Name of the specidfied filter.
      *=========================================================================
     P Filter_getName...
     P                 B                   export
      *
     D Filter_getName...
     D                 PI                         like(LOG4RPG_filterName_t  )
     D  i_pFilter                          const  like(LOG4RPG_pFilter_t     )
      *
      *  Filter handle
     D filter          DS                  likeds(handle_t)
     D                                     based(i_pFilter)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return filter.name;

      /END-FREE
      *
     P Filter_getName...
     P                 E
      *
      *=========================================================================
      *  Returns the next filter.
      *=========================================================================
      *  Parameters:
      *   i_pFilter     - Handle of the filter returned by Filter_new().
      *
      *  Returns:
      *   pFilter       - Next filter of filter chain.
      *=========================================================================
     P Filter_getNext...
     P                 B                   export
      *
     D Filter_getNext...
     D                 PI                         like(LOG4RPG_pFilter_t     )
     D  i_pFilter                          const  like(LOG4RPG_pFilter_t     )
      *
      *  Filter handle
     D filter          DS                  likeds(handle_t)
     D                                     based(i_pFilter)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return filter.pNextFilter;

      /END-FREE
      *
     P Filter_getNext...
     P                 E
      *
      *=========================================================================
      *  Sets the next filter of the filter chain.
      *=========================================================================
      *  Parameters:
      *   i_pFilter     - Handle of the filter returned by Filter_new().
      *   i_pNextFilter - Next filter of filter chain.
      *
      *  Returns:
      *   void
      *=========================================================================
     P Filter_setNext...
     P                 B                   export
      *
     D Filter_setNext...
     D                 PI
     D  i_pFilter                          const  like(LOG4RPG_pFilter_t     )
     D  i_pNextFilter                      const  like(LOG4RPG_pFilter_t     )
      *
      *  Filter handle
     D filter          DS                  likeds(handle_t)
     D                                     based(i_pFilter)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         filter.pNextFilter = i_pNextFilter;

         return;

      /END-FREE
      *
     P Filter_setNext...
     P                 E
      *
      *=========================================================================
      *  Sets the properties of the specified filter.
      *=========================================================================
      *  Parameters:
      *   i_pFilter     - Handle of the filter returned by Filter_new().
      *   i_pPropList   - Handle of the properties list.
      *   i_prefix      - Prefix of the relevant property keys.
      *
      *  Returns:
      *   void
      *=========================================================================
     P Filter_setProperties...
     P                 B                   export
      *
     D Filter_setProperties...
     D                 PI
     D  i_pFilter                          const  like(LOG4RPG_pFilter_t       )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Filter handle
     D filter          DS                  likeds(handle_t    )
     D                                     based(i_pFilter  )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         g_pFilter_setProperties =
               filter.filterImpl.procSetProperties.procptr;
         SrvPgmFilter_setProperties(filter.filterImpl.pHandle
                                    : i_pPropList
                                    : i_prefix);

         return;

      /END-FREE
      *
     P Filter_setProperties...
     P                 E
      *
      *=========================================================================
      *  Deletes a given filter.
      *=========================================================================
      *  Parameters:
      *   io_pFilter    - Handle of the filter returned by Filter_new().
      *
      *  Returns:
      *   isDeleted     - Returns TRUE on success, else FALSE.
      *=========================================================================
      *
     P Filter_delete...
     P                 B                   export
      *
     D Filter_delete...
     D                 PI              N
     D  io_pFilter                                like(LOG4RPG_pFilter_t       )
      *
      *  Return value
     D isDeleted       S               N   inz(cFalse)
      *
      *  Helper fields
     D name            S                   like(filter.name  ) inz
      *
      *  Filter handle
     D filter          DS                  likeds(handle_t)
     D                                     based(io_pFilter  )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         initializeModule();

         if not Repository_existFilter(filter.name);
            io_pFilter = Filter_null();
            return cTrue;
         endif;

         LogLog_verbose('Deleting filter [' + filter.name + '] ...');

         name = filter.name;

         // Remove filter from repository
         Repository_removeFilter(filter.name);

         // Delete filter
         g_pFilter_delete = filter.filterImpl.procDelete.procptr;
         isDeleted = SrvPgmFilter_delete(filter.filterImpl.pHandle);

         dealloc(N) io_pFilter;
         io_pFilter = Filter_null();

         LogLog_verbose('- Freed memory of filter [' + name + '].');

         return isDeleted;

      /END-FREE
      *
     P Filter_delete...
     P                 E
      *
      *=========================================================================
      *  Tests, whether the specified property is known by the
      *  super filter.
      *=========================================================================
      *  Parameters:
      *   i_parameter   - Parameter that is tested.
      *
      *  Returns:
      *   isKnown       - Returns TRUE if the property is known by the super
      *                   Filter "class", else FALSE.
      *=========================================================================
     P Filter_knowsProperty...
     P                 B                   export
      *
     D Filter_knowsProperty...
     D                 PI              N
     D  i_parameter                        const  like(LOG4RPG_Property_key_t  )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         select;
         when i_parameter = cPARAMETER_NEXT_FILTER or
              f_startsWith(cPARAMETER_NEXT_FILTER + '.': i_parameter);
            return cTrue;
         other;
            return cFalse;
         endsl;

      /END-FREE
      *
     P Filter_knowsProperty...
     P                 E
      *
      *=========================================================================
      *  Tests a given filter for a NULL value.
      *=========================================================================
      *  Parameters:
      *   i_pFilter     - Handle of the filter returned by Filter_new().
      *
      *  Returns:
      *   isNull        - Returns TRUE if the handle of the filter is a
      *                   NULL handle.
      *=========================================================================
     P Filter_isNull...
     P                 B                   export
      *
     D Filter_isNull...
     D                 PI              N
     D  i_pFilter                          const  like(LOG4RPG_pFilter_t       )
      *
      *  Return value
     D isNull          S               N   inz(cFalse)
      *
      *  Filter handle
     D filter          DS                  likeds(handle_t)
     D                                     based(i_pFilter  )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if i_pFilter = Filter_null();
            isNull = cTrue;
         else;
            isNull = cFalse;
         endif;

         return isNull;

      /END-FREE
      *
     P Filter_isNull...
     P                 E
      *
      *=========================================================================
      *  Returns a NULL filter.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   pFilter       - Filter NULL handle.
      *=========================================================================
     P Filter_null...
     P                 B                   export
      *
     D Filter_null...
     D                 PI                         like(LOG4RPG_pFilter_t       )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return *NULL;

      /END-FREE
      *
     P Filter_null...
     P                 E
      *
      *=========================================================================
    R *  *** private ***
      *  Initializes this module.
      *=========================================================================
     P initializeModule...
     P                 B
      *
     D initializeModule...
     D                 PI
      *
      *  Return value
      *
      *  Helper fields
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if g_isInit;
            return;
         endif;

         Loglog_verbose('Initializing module ' + sds.modContProc + '...');

         Repository_initialize();

         g_isInit = cTrue;

         return;

      /END-FREE
      *
     P initializeModule...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG18  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG18 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: FilterList              "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: FilterList                               *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  25.10.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG18
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PTYPES                        Private type definitions
      *
     D handle_t...
     D                 DS                  qualified               based(pDummy)
     D  pMap                               like(BasicMap_handle_t )
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QBASICS1,PBASICS1                      Basic RPG Extensions
      /COPY QIFS,PIFS                              IFS Stream file support
      *
      /COPY QLOG4RPG,PLOG4RPG10                    LogLog
      /COPY QLOG4RPG,PLOG4RPG99                    Helpers
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      *=========================================================================
      *  Creates a new filter list.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   pFltList      - Returns a handle to the filter list on success, else
      *                   a NULL handle.
      *=========================================================================
     P FilterList_new...
     P                 B                   export
      *
     D FilterList_new...
     D                 PI                         like(LOG4RPG_pFilterList_t )
      *
      *  Return value
     D fltList         DS                  likeds(handle_t       )
     D                                     based(pFltList)
      *
      *  Helper fields
     D tempFltList     DS                  likeds(handle_t       ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         LogLog_verbose('Creating filter list ...');

         pFltList = FilterList_null();

         // Initialize filter list handle
         clear tempFltList;
         tempFltList.pMap = BasicMap_new();

         // Return properties list to caller
         pFltList = %alloc(%size(handle_t));
         fltList = tempFltList;

         LogLog_verbose('+ Allocated memory for filter list.');

         return pFltList;

      /END-FREE
      *
     P FilterList_new...
     P                 E
      *
      *=========================================================================
      *  Returns the number of entries in the specified filter list.
      *=========================================================================
      *  Parameters:
      *   i_pFltList    - Filter list returned by FilterList_new().
      *
      *  Returns:
      *   numE          - Returns the number of filters in this
      *                   filter list on success, else -1.
      *=========================================================================
     P FilterList_getNumE...
     P                 B                   export
      *
     D FilterList_getNumE...
     D                 PI            10I 0
     D  i_pFltList                         const  like(LOG4RPG_pFilterList_t )
      *
      *  Filter list handle
     D fltList         DS                  likeds(handle_t    )
     D                                     based(i_pFltList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return BasicMap_getNumE(fltList.pMap);

      /END-FREE
      *
     P FilterList_getNumE...
     P                 E
      *
      *=========================================================================
      *  Adds a filter to the specified filter list.
      *=========================================================================
      *  Parameters:
      *   i_pFltList    - Filter list returned by FilterList_new().
      *   i_pFilter     - Filter that is added to this filter list.
      *
      *  Returns:
      *   index         - Returns 0 on success, else -1.
      *=========================================================================
     P FilterList_put...
     P                 B                   export
      *
     D FilterList_put...
     D                 PI            10I 0
     D  i_pFltList                         const  like(LOG4RPG_pFilterList_t )
     D  i_pFilter                          const  like(LOG4RPG_pFilter_t     )
      *
      *  Helper fields
     D pFilter         S                   like(i_pFilter              )
      *
      *  Filter list handle
     D fltList         DS                  likeds(handle_t    )
     D                                     based(i_pFltList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         pFilter = i_pFilter;

         return BasicMap_put(fltList.pMap: Filter_getName(pFilter)
                                         : %addr(pFilter)
                                         : %len(pFilter ));

      /END-FREE
      *
     P FilterList_put...
     P                 E
      *
      *=========================================================================
      *  Removes the specified filter from the given filter list.
      *=========================================================================
      *  Parameters:
      *   i_pFltList    - Filter list returned by FilterList_new().
      *   i_fltName     - Name of the filter that is removed from
      *                   this filter list.
      *
      *  Returns:
      *   rc            - Returns 0 on success, else -1.
      *=========================================================================
     P FilterList_remove...
     P                 B                   export
      *
     D FilterList_remove...
     D                 PI            10I 0
     D  i_pFltList                         const  like(LOG4RPG_pFilterList_t )
     D  i_fltName                          const  like(LOG4RPG_filterName_t  )
      *
      *  Filter list handle
     D fltList         DS                  likeds(handle_t    )
     D                                     based(i_pFltList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return BasicMap_remove(fltList.pMap: i_fltName);

      /END-FREE
      *
     P FilterList_remove...
     P                 E
      *
      *=========================================================================
      *  Returns the filter assigned to the specified key.
      *=========================================================================
      *  Parameters:
      *   i_pFltList    - Filter list returned by FilterrList_new().
      *   i_fltName     - Name of the filter that is returned.
      *
      *  Returns:
      *   pFilter       - Returns the associated filter on ssuccess, else NULL.
      *=========================================================================
     P FilterList_get...
     P                 B                   export
      *
     D FilterList_get...
     D                 PI                         like(LOG4RPG_pFilter_t     )
     D  i_pFltList                         const  like(LOG4RPG_pFilterList_t )
     D  i_fltName                          const  like(LOG4RPG_filterName_t  )
      *
      *  Return value
     D pFilter         S                   like(LOG4RPG_pFilter_t     ) inz
      *
      *  Filter list handle
     D fltList         DS                  likeds(handle_t    )
     D                                     based(i_pFltList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         BasicMap_get(fltList.pMap: i_fltName: %addr(pFilter)
                                             : %size(pFilter));

         return pFilter;

      /END-FREE
      *
     P FilterList_get...
     P                 E
      *
      *=========================================================================
      *  Tests, if the filter list contains the specified filter.
      *=========================================================================
      *  Parameters:
      *   i_pFltList    - Filter list returned by FilterList_new().
      *   i_fltName     - Name of the filter.
      *
      *  Returns:
      *   exist         - Returns TRUE if the filter exists, else FALSE.
      *=========================================================================
     P FilterList_exist...
     P                 B                   export
      *
     D FilterList_exist...
     D                 PI              N
     D  i_pFltList                         const  like(LOG4RPG_pFilterList_t )
     D  i_fltName                          const  like(LOG4RPG_filterName_t  )
      *
      *  Filter list handle
     D fltList         DS                  likeds(handle_t    )
     D                                     based(i_pFltList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return BasicMap_containsKey(fltList.pMap: i_fltName);

      /END-FREE
      *
     P FilterList_exist...
     P                 E
      *
      *=========================================================================
      *  Returns an iterator for the specified filter list.
      *=========================================================================
      *  Parameters:
      *   i_pFltList    - Filter list returned by FilterList_new().
      *
      *  Returns:
      *   fltIter       - Iterator for the filter list.
      *=========================================================================
     P FilterList_getIterator...
     P                 B                   export
      *
     D FilterList_getIterator...
     D                 PI                        likeds(LOG4RPG_Filter...
     D                                                          ListIterator_t )
     D  i_pFltList                         const  like(LOG4RPG_pFilterList_t )
      *
      *  Return value
     D fltIter         DS                  likeds(LOG4RPG_Filter...
     D                                                    ListIterator_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         clear fltIter;
         fltIter.pFltList = i_pFltList;
         fltIter.lastFlt  = 0;

         return fltIter;

      /END-FREE
      *
     P FilterList_getIterator...
     P                 E
      *
      *=========================================================================
      *  Returns the first filter of the specified filter list.
      *=========================================================================
      *  Parameters:
      *   io_fltIter    - Iteratur returned by FilterList_getIterator().
      *
      *  Returns:
      *   pFilter       - Returns the first filter in the specified
      *                   filter list on success, else a NULL handle.
      *=========================================================================
     P FilterList_getFirst...
     P                 B                   export
      *
     D FilterList_getFirst...
     D                 PI                         like(LOG4RPG_pFilter_t     )
     D  io_fltIter                                likeds(LOG4RPG_Filter...
     D                                                           ListIterator_t)
      *
      *  Return value
     D pFilter         S                   like(LOG4RPG_pFilter_t     ) inz
      *
      *  Helper fields
     D fltName         S                   like(LOG4RPG_filterName_t ) inz
      *
      *  Filter list handle
     D fltList         DS                  likeds(handle_t    )
     D                                     based(io_fltIter.pFltList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         pFilter = Filter_null();

         if FilterList_getNumE(io_fltIter.pFltList) = 0;
            return pFilter;
         endif;

         io_fltIter.lastFlt = 1;

         fltName = BasicMap_getKeyByIndex(fltList.pMap
                                          : io_fltIter.lastFlt);
         pFilter = FilterList_get(io_fltIter.pFltList: fltName);

         return pFilter;

      /END-FREE
      *
     P FilterList_getFirst...
     P                 E
      *
      *=========================================================================
      *  Returns the next filter of the specified filter list.
      *=========================================================================
      *  Parameters:
      *   io_fltIter    - Iteratur returned by FilterList_getIterator().
      *
      *  Returns:
      *   pFilter       - Returns the next filter in the specified
      *                   filter list on success, else a NULL handle.
      *=========================================================================
     P FilterList_getNext...
     P                 B                   export
      *
     D FilterList_getNext...
     D                 PI                         like(LOG4RPG_pFilter_t     )
     D  io_fltIter                                likeds(LOG4RPG_Filter...
     D                                                           ListIterator_t)
      *
      *  Return value
     D pFilter         S                   like(LOG4RPG_pFilter_t     ) inz
      *
      *  Helper fields
     D fltName         S                   like(LOG4RPG_filterName_t ) inz
      *
      *  Filter list handle
     D fltList         DS                  likeds(handle_t    )
     D                                     based(io_fltIter.pFltList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         pFilter = Filter_null();

         if FilterList_getNumE(io_fltIter.pFltList) <= io_fltIter.lastFlt;
            return pFilter;
         endif;

         io_fltIter.lastFlt = io_fltIter.lastFlt + 1;

         fltName = BasicMap_getKeyByIndex(fltList.pMap
                                          : io_fltIter.lastFlt);
         pFilter = FilterList_get(io_fltIter.pFltList: fltName);

         return pFilter;

      /END-FREE
      *
     P FilterList_getNext...
     P                 E
      *
      *=========================================================================
      *  Deletes the specified filter list.
      *=========================================================================
      *  Parameters:
      *   io_pFltList   - Filter list returned by FilterList_new().
      *
      *  Returns:
      *   isDeleted     - Returns TRUE on success, else FALSE.
      *=========================================================================
     P FilterList_delete...
     P                 B                   export
      *
     D FilterList_delete...
     D                 PI              N
     D  io_pFltList                               like(LOG4RPG_pFilterList_t )
      *
      *  Return value
     D isDeleted       S               N   inz(cFalse)
      *
      *  Helper fields
     D name            S                   like(LOG4RPG_filterName_t  ) inz
     D fltIter         DS                  likeds(LOG4RPG_Filter...
     D                                            ListIterator_t      ) inz
     D pFilter         S                   like(LOG4RPG_pFilter_t     ) inz
      *
      *  Filter list handle
     D fltList         DS                  likeds(handle_t    )
     D                                     based(io_pFltList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if BasicMap_isNull(fltList.pMap);
            return cTrue;
         endif;

         LogLog_verbose('Deleting filter list ...');

         p_assert(FilterList_getNumE(io_pFltList) = 0
                  : 'All filters should have been removed from this +
                     filter list by the logger or the repository.');

         fltIter = FilterList_getIterator(io_pFltList);

         dow FilterList_getNumE(io_pFltList) > 0;
            pFilter = FilterList_getFirst(fltIter);
            name = Filter_getName(pFilter);
            FilterList_remove(io_pFltList: name);
            Filter_delete(pFilter);
         enddo;

         if BasicMap_delete(fltList.pMap) = 0;
            isDeleted = cTrue;
         else;
            isDeleted = cFalse;
         endif;

         clear fltList;
         dealloc(N) io_pFltList;

         io_pFltList = FilterList_null();

         LogLog_verbose('- Freed memory of filter list.');

         return isDeleted;

      /END-FREE
      *
     P FilterList_delete...
     P                 E
      *
      *=========================================================================
      *  Test the specified filter list for a NULL value.
      *=========================================================================
      *  Parameters:
      *   i_fltList     - Filter list returned by FilterList_new().
      *
      *  Returns:
      *   isNull        - Returns TRUE if the handle of the filter list is a
      *                   NULL handle.
      *=========================================================================
     P FilterList_isNull...
     P                 B                   export
      *
     D FilterList_isNull...
     D                 PI              N
     D  i_pFltList                         const  like(LOG4RPG_pFilterList_t )
      *
      *  Filter list handle
     D fltList         DS                  likeds(handle_t    )
     D                                     based(i_pFltList)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if i_pFltList = FilterList_null();
            return cTrue;
         else;
            return BasicMap_isNull(fltList.pMap);
         endif;

      /END-FREE
      *
     P FilterList_isNull...
     P                 E
      *
      *=========================================================================
      *  Returns a NULL filter list.
      *=========================================================================
      *  Parameters:
      *   void
      *
      *  Returns:
      *   pFltList      - Filter list NULL handle.
      *=========================================================================
     P FilterList_null...
     P                 B                   export
      *
     D FilterList_null...
     D                 PI                         like(LOG4RPG_pFilterList_t )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return BasicMap_null();

      /END-FREE
      *
     P FilterList_null...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG50  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG50 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: DailyRollingFileAppender"
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: DailyRollingFileAppender                 *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  13.06.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *  25.10.2006  Th.Raddatz    Replaced data structure logEvent with    *
      *                            object LogEvent.                         *
      *                                                                     *
      *  26.10.2006  Th.Raddatz    Moved wordWrap processing to Appender    *
      *                            implementation objects.                  *
      *                                                                     *
      *  27.10.2006  Th.Raddatz    Fixed problem that properties were not   *
      *                            found because auf case mismatch.         *
      *                                                                     *
      *  16.11.2006  Th.Raddatz    Added properties 'writeHeader' and       *
      *                            'writeFooter' that control whether a     *
      *                            header or footer is appended to the      *
      *                            log.                                     *
      *                                                                     *
      *  19.12.2006  Th.Raddatz    Fixed problem that Log4rpg crashed,      *
      *                            when the appender could not be opened.   *
      *                            (error on 'f_left(i_handle.dateValue: 1)'*
      *                            due to missing dateValue)                *
      *                                                                     *
      *  16.05.2007  Th.Raddatz    Added property 'share' to specify        *
      *                            whether to share the log file with       *
      *                            jobs or not.                             *
      *                                                                     *
      *  05.06.2007  Th.Raddatz    Fixed problem that the log file could    *
      *                            be renamed because 'getArchivePath'      *
      *                            returned a path instead of a file name.  *
      *                                                                     *
      *  22.04.2008  Th.Raddatz    Now usinng the OptionConverter to        *
      *                            convert properties.                      *
      *                                                                     *
      *  09.09.2008  Th.Raddatz    Improved performance when calling        *
      *                            f_writeLineIfsFile().                    *
      *                                                                     *
      *  07.11.2008  Th.Raddatz    Fixed synchronisation problems, when     *
      *                            sharing the log file with other jobs.    *
      *                            Added properties:  syncObj               *
      *                                               syncLogMode           *
      *                                               syncText              *
      *                                                                     *
      *  20.11.2010  Th.Raddatz    Added parameter 'ccsid' to enable the    *
      *                            user to specify the ccsid of the log     *
      *                            file.                                    *
      *                                                                     *
      *  09.05.2015  Th.Raddatz    Changed *_doAppend() to better handle    *
      *                            unexpected errors when renaming the      *
      *                            log file.                                *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG50
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG                     Public interface & type definitions
      *
     D handle_t...
     D                 DS                  qualified           based(pDummy)
     D  pSuper                             like(LOG4RPG_pAppender_t)
     D  isOpen                         N
     D  hFile                              like(ifs_hFile_t     )
     D  path                               like(LOG4RPG_path_t  )
     D  datePattern                  32A   varying
     D  dateValue                    32A   varying
     D  writeHeader                    N
     D  writeFooter                    N
     D  share                          N
     D  fileID                             likeds(ifs_fileID_t  )
     D  qSyncObj                           likeds(qObj_t )
     D  isSyncLogMode                  N
     D  syncText                     50A   varying
     D  ccsid                        10U 0
     D  lastRnmErr                     Z
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QIFS,PIFS                             IFS Stream File Support
      *
      /COPY QLOG4RPG,PLOG4RPG07                   PropertyList
      /COPY QLOG4RPG,PLOG4RPG10                   LogLog
      /COPY QLOG4RPG,PLOG4RPG97                   Synchronisation
      /COPY QLOG4RPG,PLOG4RPG98                   OptionConverter
      /COPY QLOG4RPG,PLOG4RPG99                   Helper
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      *  Opens a DailyRollingFileAppender for output.
     D openAppender...
     D                 PR              N
     D  i_pHandle                      *   const
      *
      *  Closes a DailyRollingFileAppender.
     D closeAppender...
     D                 PR              N
     D  i_pHandle                      *   const
      *
      *  Appends the header.
     D appendHeader...
     D                 PR
     D  i_pHandle                      *   const
      *
      *  Appends the footer.
     D appendFooter...
     D                 PR
     D  i_pHandle                      *   const
      *
      *  Writes text.
     D append...
     D                 PR
     D  i_pHandle                      *   const
     D  i_text                             const  like(LOG4RPG_formattedText_t )
      *
      *  Check if a new file must be started.
     D isNewFileCondition...
     D                 PR              N
     D  i_handle                           const  likeds(handle_t )
      *
      *  Replace variables.
     D replaceVariables...
     D                 PR                         like(handle_t.datePattern )
     D  i_string                           const  like(handle_t.datePattern )
     D  i_time                         Z   const
      *
      *  Returns cTrue if there is a rename error. Resets the error after
      *  a reasonable amount of time.
     D checkAndHandleRenameError...
     D                 PR              N
     D  i_pHandle                      *   const
      *
      *  Sets the date and time of an error during renaming the output file.
     D setRenameError...
     D                 PR
     D  i_pHandle                      *   const
      *
      *  Clears the date and time of an error during renaming the output file.
     D clearRenameError...
     D                 PR
     D  i_pHandle                      *   const
      *
      *  Loads the configuration parameters from the specified property list.
     D loadConfiguration...
     D                 PR
     D  io_handle                                 likeds(handle_t              )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Returns the name of the archive for the current log file.
     D getArchivePath...
     D                 PR                         like(LOG4RPG_path_t    )
     D  i_handle                           const  likeds(handle_t        )
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
     D cTHIS_CLASS...
     D                 C                          const(
     D                                            'DailyRollingFileAppender')
      *
     D cDEFAULT_WRITE_HEADER...
     D                 C                          const('1')
     D cDEFAULT_WRITE_FOOTER...
     D                 C                          const('1')
     D cDEFAULT_SHARE...
     D                 C                          const('0')
     D cDEFAULT_SYNC_OBJ_NAME...
     D                 C                          const('LOG4RPG50')
     D cDEFAULT_SYNC_OBJ_LIB...
     D                 C                          const('QGPL')
     D cDEFAULT_SYNC_LOG_MODE...
     D                 C                          const('0')
     D cDEFAULT_SYNC_TEXT...
     D                 C                          const('Log4rpg +
     D                                            DailyRollingFileAppender +
     D                                            Sync. Object')
     D cDEFAULT_CCSID...
     D                 C                          const(850)
      *
     D cPARAMETER_PATH...
     D                 C                          const('path')
     D cPARAMETER_DATE_PATTERN...
     D                 C                          const('datepattern')
     D cPARAMETER_WRITE_HEADER...
     D                 C                          const('writeheader')
     D cPARAMETER_WRITE_FOOTER...
     D                 C                          const('writefooter')
     D cPARAMETER_SHARE...
     D                 C                          const('share')
     D cPARAMETER_SYNC_OBJ...
     D                 C                          const('syncobj')
     D cPARAMETER_SYNC_LOG_MODE...
     D                 C                          const('synclogmode')
     D cPARAMETER_SYNC_TEXT...
     D                 C                          const('synctext')
     D cPARAMETER_CCSID...
     D                 C                          const('ccsid')
      *
     D cDATE_PATTERN_DAYS...
     D                 C                          const('dd')
     D cDATE_PATTERN_MONTHS...
     D                 C                          const('MM')
     D cDATE_PATTERN_YEARS...
     D                 C                          const('yyyy')
     D cDATE_PATTERN_MINUTES...
     D                 C                          const('mm')
     D cDATE_PATTERN_HOURS...
     D                 C                          const('HH')
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      *=====================================================================*
      *  Creates a new DailyRollingFileAppender.
      *=====================================================================*
      *  Parameters:
      *   io_pHandle    - Handle that is passed around the various calls to
      *                   this DailyRollingFileAppender.
      *   i_pPropsList  - Handle of the property list that contains the
      *                   properties for the appender.
      *   i_prefix      - Prefix of the relevant property keys.
      *
      *  Returns:
      *   isDone        - Returns TRUE on success, else FALSE.
      *=====================================================================*
     P DailyRollingFileAppender_new...
     P                 B                   export
      *
     D DailyRollingFileAppender_new...
     D                 PI              N
     D  i_pSuper                           const  like(LOG4RPG_pAppender_t     )
     D  io_pHandle                     *
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Helper fields
     D tempHandle      DS                  likeds(handle_t          ) inz
     D emptyFileID     DS                  likeds(ifs_fileID_t      ) inz
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(io_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         clear tempHandle;

         // Initialize handle
         tempHandle.pSuper          = i_pSuper;   // Handle of the super class 'Appender'
         tempHandle.isOpen          = cFalse;
         tempHandle.hFile           = 0;
         tempHandle.path            = 'log4rpg.log';
         tempHandle.datePattern     = '.yyyy-MM-dd';
         tempHandle.dateValue       = '';
         tempHandle.writeHeader     = cDEFAULT_WRITE_HEADER;
         tempHandle.writeFooter     = cDEFAULT_WRITE_FOOTER;
         tempHandle.share           = cDEFAULT_SHARE;
         tempHandle.fileID          = emptyFileID;
         tempHandle.qSyncObj.name   = cDEFAULT_SYNC_OBJ_NAME;
         tempHandle.qSyncObj.lib    = cDEFAULT_SYNC_OBJ_LIB;
         tempHandle.isSyncLogMode   = cDEFAULT_SYNC_LOG_MODE;
         tempHandle.syncText        = cDEFAULT_SYNC_TEXT;
         tempHandle.ccsid           = cDEFAULT_CCSID;
         tempHandle.lastRnmErr      = *LOVAL;

         // Initialize handle from configuration properties
         if (i_pPropList <> *NULL) and not PropertyList_isNull(i_pPropList);
            loadConfiguration(tempHandle: i_pPropList: i_prefix);
         endif;

         io_pHandle = %alloc(%size(tempHandle));
         handle = tempHandle;

         LogLog_debug('Loaded instance of [' + cTHIS_CLASS + '].');

         return isDone;

      /END-FREE
      *
     P DailyRollingFileAppender_new...
     P                 E
      *
      *=====================================================================*
      *  Returns TRUE if the appender requires a layout.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this DailyRollingFileAppender.
      *
      *  Returns:
      *   isDone        - Returns TRUE if the appender requires a layout,
      *                   else FALSE.
      *=====================================================================*
     P DailyRollingFileAppender_requiresLayout...
     P                 B                   export
      *
     D DailyRollingFileAppender_requiresLayout...
     D                 PI              N
     D  i_pHandle                      *   const
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(io_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return cTrue;

      /END-FREE
      *
     P DailyRollingFileAppender_requiresLayout...
     P                 E
      *
      *=====================================================================*
      *  Appends a message to the DailyRollingFileAppender.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this DailyRollingFileAppender.
      *   i_pLogEvent   - Handle of the Log event.
      *
      *  Returns:
      *   isDone        - Returns TRUE on success, else FALSE.
      *=====================================================================*
     P DailyRollingFileAppender_doAppend...
     P                 B                   export
      *
     D DailyRollingFileAppender_doAppend...
     D                 PI              N
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const like(LOG4RPG_pLogEvent_t )
      *
      *  Return value
     D isDone          S               N   inz(cFalse)
      *
      *  Helper fields
     D archive         S                   like(LOG4RPG_path_t)           inz
     D bufLength       S             10I 0                                inz
     D lineLength      S             10I 0                                inz
     D text            S                   like(LOG4RPG_formattedText_t ) inz
     D isText          S               N                                  inz
     D isNewFile       S               N                                  inz
     D isRenameError   S               N                                  inz
     D ticket          DS                  likeds(LOG4RPG_syncTicket_t  ) inz
     D msg             DS                  likeds(msg_t       )           inz
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return if there is no text
         if LogEvent_textLength(i_pLogEvent) = 0;
            return cTrue;
         endif;

         // Open the appender for output is it is not yet open
         if not handle.isOpen;
            if not openAppender(i_pHandle);
               return cFalse;
            endif;
         endif;

         // Check if a new file must be started.
         if (not checkAndHandleRenameError(i_pHandle) and
             isNewFileCondition(handle));

            dou '1';

               isRenameError = cFalse;

               // Start synchronisation with concurrent jobs
               if (handle.share);
                  if (not Synchronisation_start(handle.qSyncObj.name
                                                : handle.qSyncObj.lib
                                                : ticket: msg));
                     LogLog_errorMsg(msg);
                     isRenameError = cTrue;
                     leave;
                  endif;
               endif;

               // Determine, whether this job has to create a new file or not.
               // If a new file has been created by anther job, this job only
               // has to switch to the new file.
               if (not handle.share or
                   f_getIfsFileID(handle.path) = handle.fileID);
                  isNewFile = cTrue;
               else;
                  isNewFile = cFalse;
               endif;

               if handle.isOpen;
                  if (isNewFile);
                     appendFooter(i_pHandle);
                  endif;
                  closeAppender(i_pHandle);
               endif;

               if (isNewFile and f_isIfsFile(handle.path: *omit));
                  archive =%trimR(f_rtvIfsFileFromPath(getArchivePath(handle)));
                  if (f_renameIfsFile(handle.path: archive: msg) <> 0);
                     LogLog_errorMsg(msg);
                     isRenameError = cTrue;
                  endif;
               endif;

               openAppender(i_pHandle);

               // End synchronisation
               if (handle.share);
                  Synchronisation_end(ticket);
               endif;

            enddo;

            if (isRenameError);
               setRenameError(i_pHandle);
            else;
               clearRenameError(i_pHandle);
            endif;

            if (not handle.isOpen);
               return cFalse;
            endif;

         endif;

         // Write to file. Asking the LogEvent to do wordWrap.
         lineLength = cLOG4RPG_MAX_TEXT_LENGTH - %len(cIFS_EOL_CRLF);
         text = LogEvent_getFirstLineOfText(i_pLogEvent: isText: lineLength);
         dow isText;
            text = text + cIFS_EOL_CRLF;
            bufLength = %len(text);
            if f_writeLineIfsFile(handle.hFile: %addr(text)+2
                                              : bufLength
                                              : ''
                                              : msg            ) <> bufLength;
               LogLog_error('Failed to write logEevent to file [' +
                            handle.path + ']');
               LogLog_errorMsg(msg);
               isDone = cFalse;
            else;
               isDone = cTrue;
            endif;
            text = LogEvent_getNextLineOfText(i_pLogEvent: isText: lineLength);
         enddo;

         return isDone;

      /END-FREE
      *
     P DailyRollingFileAppender_doAppend...
     P                 E
      *
      *=====================================================================*
      *  Used to set the properties of the appender.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this DailyRollingFileAppender.
      *   i_pPropsList  - Handle of the property list that contains the
      *                   properties for the appender.
      *   i_prefix      - Prefix of the relevant property keys.
      *
      *  Returns:
      *   void
      *=====================================================================*
     P DailyRollingFileAppender_setProperties...
     P                 B                   export
      *
     D DailyRollingFileAppender_setProperties...
     D                 PI
     D  i_pHandle                      *   const
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  DailyRollingFileAppender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         loadConfiguration(handle: i_pPropList: i_prefix);

         return;

      /END-FREE
      *
     P DailyRollingFileAppender_setProperties...
     P                 E
      *
      *=====================================================================*
      *  Deletes a given DailyRollingFileAppender.
      *=====================================================================*
      *  Parameters:
      *   io_pHandle    - Handle that is passed around the various calls to
      *                   this DailyRollingFileAppender.
      *
      *  Returns:
      *   void
      *=====================================================================*
     P DailyRollingFileAppender_delete...
     P                 B                   export
      *
     D DailyRollingFileAppender_delete...
     D                 PI              N
     D  io_pHandle                     *
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(io_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Close file if it is left open
         if handle.isOpen;
            closeAppender(io_pHandle);
         endif;

         // Clear handle data
         clear handle;

         // Free handle memory
         dealloc(N) io_pHandle;

         LogLog_verbose('Deleted instance of [' + cTHIS_CLASS + '].');

         isDone = cTrue;

         return isDone;

      /END-FREE
      *
     P DailyRollingFileAppender_delete...
     P                 E
      *
      *=====================================================================*
    R *  *** Private ***
      *  Opens a DailyRollingFileAppender for output.
      *=====================================================================*
     P openAppender...
     P                 B
      *
     D openAppender...
     D                 PI              N
     D  i_pHandle                      *   const
      *
      *  Helper fields
     D isNewFile       S               N   inz(cFalse)
     D crtTime         S               Z   inz
     D SHARE_MODE      S             10I 0 inz
     D msg             DS                  likeds(msg_t          ) inz
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Set sync logging mode. Enables or disables the
         // logging of the sync lock holder.
         Synchronisation_setLogMode(handle.isSyncLogMode);
         Synchronisation_setObjectDesc(handle.syncText);

         // Check, whether the  file already exists
         isNewFile = not f_isIfsFile(handle.path: *omit);

         // Open new instance of file
         if not handle.share;
            SHARE_MODE = O_SHARE_RDONLY;
         else;
            SHARE_MODE = O_SHARE_RDWR;
         endif;

         handle.hFile = f_openIfsFile(handle.path: O_CREAT + O_APPEND
                                                           + O_TEXTDATA
                                                           + SHARE_MODE
                                                           + O_WRONLY
                                                           + O_CCSID
                                                 : handle.ccsid
                                                 : *omit: msg);
         if handle.hFile = cIFS_ERROR;
            LogLog_errorMsg(msg);
            return cFalse;
         endif;

         // Set end of livetime of file
         crtTime = f_getIfsFileCrtTime(handle.path: *omit);
         handle.dateValue = replaceVariables(handle.datePattern: crtTime);

         // Mark file as "open"
         handle.isOpen = cTrue;

         // Remember the unique file ID
         handle.fileID = f_getIfsFileIDH(handle.hFile);

         // Write header to file
         if isNewFile;
            appendHeader(i_pHandle);
         endif;

         return cTrue;

      /END-FREE
      *
     P openAppender...
     P                 E
      *
      *=====================================================================*
    R *  *** Private ***
      *  Closes a DailyRollingFileAppender.
      *=====================================================================*
     P closeAppender...
     P                 B
      *
     D closeAppender...
     D                 PI              N
     D  i_pHandle                      *   const
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if f_closeIfsFile(handle.hFile) = 0;
            handle.isOpen = cFalse;
            handle.hFile  = 0;
            isDone = cTrue;
         else;
            isDone = cFalse;
         endif;

         return isDone;

      /END-FREE
      *
     P closeAppender...
     P                 E
      *
      *=====================================================================*
    R *  *** Private ***
      *  Appends the header.
      *=====================================================================*
     P appendHeader...
     P                 B
      *
     D appendHeader...
     D                 PI
     D  i_pHandle                      *   const
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Helper fields
     D header          S                   like(LOG4RPG_header_t ) inz
     D pLayout         S                   like(LOG4RPG_pLayout_t) inz
     D msg             DS                  likeds(msg_t          ) inz
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if not handle.writeHeader;
            return;
         endif;

         // Get layout to write footer string of layout
         pLayout = Appender_getLayout(handle.pSuper);

         if not Layout_isNull(pLayout);
            header = Layout_getHeader(pLayout);
            append(i_pHandle: header);
         endif;

         return;

      /END-FREE
      *
     P appendHeader...
     P                 E
      *
      *=====================================================================*
    R *  *** Private ***
      *  Appends the footer.
      *=====================================================================*
     P appendFooter...
     P                 B
      *
     D appendFooter...
     D                 PI
     D  i_pHandle                      *   const
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Helper fields
     D footer          S                   like(LOG4RPG_footer_t ) inz
     D pLayout         S                   like(LOG4RPG_pLayout_t) inz
     D msg             DS                  likeds(msg_t          ) inz
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if not handle.writeFooter;
            return;
         endif;

         // Get layout to write footer string of layout
         pLayout = Appender_getLayout(handle.pSuper);

         if not Layout_isNull(pLayout);
            footer = Layout_getFooter(pLayout);
            append(i_pHandle: footer);
         endif;

         return;

      /END-FREE
      *
     P appendFooter...
     P                 E
      *
      *=====================================================================*
    R *  *** Private ***
      *  Writes text.
      *=====================================================================*
     P append...
     P                 B
      *
     D append...
     D                 PI
     D  i_pHandle                      *   const
     D  i_text                             const  like(LOG4RPG_formattedText_t )
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Helper fields
     D text            S                   like(i_text           ) inz
     D bufLength       S             10I 0                         inz
     D startPos        S             10U 0                         inz
     D pLayout         S                   like(LOG4RPG_pLayout_t) inz
     D msg             DS                  likeds(msg_t          ) inz
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if i_text = '';
            return;
         endif;

         startPos = 1;
         dow startPos > 0;
            text = f_wordWrap(i_text
                              : %len(i_text)
                              : startPos
                              : cWORDWRAP_PARAGRAPH_TEXT +
                                cWORDWRAP_PARAGRAPH_TRIMR);
            bufLength = %len(text);
            if f_writeLineIfsFile(handle.hFile: text
                                              : bufLength
                                              : cIFS_EOL_CRLF
                                              : msg) <> bufLength;
               LogLog_error('Failed to write text to file [' +
                             handle.path + ']');
               LogLog_errorMsg(msg);
            endif;
         enddo;

         return;

      /END-FREE
      *
     P append...
     P                 E
      *
      *=====================================================================*
    R *  *** private ***
      *  Check overflow condition.
      *=====================================================================*
     P isNewFileCondition...
     P                 B
      *
     D isNewFileCondition...
     D                 PI              N
     D  i_handle                           const  likeds(handle_t )
      *
      *  Return value
     D isNewFile       S               N   inz(cFalse)
      *
      *  Helper fields
     D cmpDateValue    S                   like(i_handle.dateValue  ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         cmpDateValue = replaceVariables(i_handle.datePattern: %timestamp());

         if i_handle.dateValue <> cmpDateValue or
            not f_isIfsFile(i_handle.path: *omit);
            isNewFile = cTrue;
         else;
            isNewFile = cFalse;
         endif;

         return isNewFile;

      /END-FREE
      *
     P isNewFileCondition...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Replace variables.
      *=========================================================================
     P replaceVariables...
     P                 B
      *
     D replaceVariables...
     D                 PI                         like(handle_t.datePattern )
     D  i_string                           const  like(handle_t.datePattern )
     D  i_time                         Z   const
      *
      *  Return value
     D string          S                   like(handle_t.datePattern ) inz
      *
      *  Helper fields
     D timestamp       S               Z   inz
     D days            S              2S 0 inz
     D months          S              2S 0 inz
     D years           S              4S 0 inz
     D minutes         S              2S 0 inz
     D hours           S              2S 0 inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         timestamp = i_time;
         days    = %subdt(timestamp: *DAYS    );
         months  = %subdt(timestamp: *MONTHS  );
         years   = %subdt(timestamp: *YEARS   );
         minutes = %subdt(timestamp: *MINUTES );
         hours   = %subdt(timestamp: *HOURS   );

         string = i_string;

         string = f_replace(cDATE_PATTERN_DAYS
                            : %editc(days   : 'X'): string);
         string = f_replace(cDATE_PATTERN_MONTHS
                            : %editc(months : 'X'): string);
         string = f_replace(cDATE_PATTERN_YEARS
                            : %editc(years  : 'X'): string);
         string = f_replace(cDATE_PATTERN_MINUTES
                            : %editc(minutes: 'X'): string);
         string = f_replace(cDATE_PATTERN_HOURS
                            : %editc(hours  : 'X'): string);

         return string;

      /END-FREE
      *
     P replaceVariables...
     P                 E
      *
      *=====================================================================*
    R *  *** Private ***
      *  Returns cTrue if there is a rename error. Resets the error after
      *  a reasonable amount of time.
      *=====================================================================*
     P checkAndHandleRenameError...
     P                 B
     D                 PI              N
     D  i_pHandle                      *   const
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (handle.lastRnmErr = *LOVAL);
            return cFalse;
         endif;

         if (%diff(%timestamp(): handle.lastRnmErr: *DAYS) > 1 or
             %diff(%timestamp(): handle.lastRnmErr: *SECONDS) > 600);
            // try again
            clearRenameError(i_pHandle);
            return cFalse;
         endif;

         return cTrue;

      /END-FREE
     P                 E
      *
      *=====================================================================*
    R *  *** Private ***
      *  Sets the date and time of an error during renaming the output file.
      *=====================================================================*
     P setRenameError...
     P                 B
     D                 PI
     D  i_pHandle                      *   const
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (handle.lastRnmErr = *LOVAL);
            handle.lastRnmErr = %timestamp();
         endif;

      /END-FREE
     P                 E
      *
      *=====================================================================*
    R *  *** Private ***
      *  Clears the date and time of an error during renaming the output file.
      *=====================================================================*
     P clearRenameError...
     P                 B
     D                 PI
     D  i_pHandle                      *   const
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         handle.lastRnmErr = *LOVAL;

      /END-FREE
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Loads the configuration parameters from the specified property list.
      *=========================================================================
     P loadConfiguration...
     P                 B
      *
     D loadConfiguration...
     D                 PI
     D  io_handle                                 likeds(handle_t              )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Local fields
     D parameter       S                   like(property.key        ) inz
     D prefix          S                   like(i_prefix            ) inz
     D property        DS                  likeds(LOG4RPG_property_t) inz
     D propIter        DS                  likeds(LOG4RPG_Property...
     D                                                    ListIterator_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         prefix = f_lcase(i_prefix);

         propIter = PropertyList_getIterator(i_pPropList);

         property = PropertyList_getFirst(propIter);

         dow property.key <> '';

            if (prefix = '') or (f_startsWith(prefix: property.key) and
                                 %len(property.key) > %len(prefix));

               parameter = f_lcase(%subst(property.key: %len(prefix) + 1));

               select;
               when parameter = cPARAMETER_PATH;
                  io_handle.path = property.value;
               when parameter = cPARAMETER_DATE_PATTERN;
                  io_handle.datePattern = property.value;
               when parameter = cPARAMETER_WRITE_HEADER;
                  io_handle.writeHeader =
                     OptionConverter_toBoolean(
                        property.value: cDEFAULT_WRITE_HEADER);
               when parameter = cPARAMETER_WRITE_FOOTER;
                  io_handle.writeFooter =
                     OptionConverter_toBoolean(
                        property.value: cDEFAULT_WRITE_FOOTER);
               when parameter = cPARAMETER_SHARE;
                  io_handle.share =
                     OptionConverter_toBoolean(
                        property.value: cDEFAULT_SHARE);
               when parameter = cPARAMETER_SYNC_OBJ;
                  io_handle.qSyncObj = getObject(property.value);
               when parameter = cPARAMETER_SYNC_LOG_MODE;
                  io_handle.isSyncLogMode =
                     OptionConverter_toBoolean(
                        property.value: cDEFAULT_SYNC_LOG_MODE);
               when parameter = cPARAMETER_SYNC_TEXT;
                  io_handle.syncText = property.value;
               when parameter = cPARAMETER_CCSID;
                  io_handle.ccsid =
                     OptionConverter_toInt(
                        property.value: cDEFAULT_CCSID);
               when Appender_knowsProperty(parameter);
                  // Ignore all parameters known by super Appender class
               other;
                  LogLog_warning('No such property ['     +
                                  property.key            +
                                 '] in [' + cTHIS_CLASS + ']');
               endsl;

            endif;

            property = PropertyList_getNext(propIter);
         enddo;

         return;

      /END-FREE
      *
     P loadConfiguration...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Returns the name of the archive for the current log file.
      *=========================================================================
     P getArchivePath...
     P                 B
      *
     D getArchivePath...
     D                 PI                         like(LOG4RPG_path_t    )
     D  i_handle                           const  likeds(handle_t        )
      *
      *  Return value
     D archive         S                   like(LOG4RPG_path_t   ) inz
      *
      *  Local fields
     D start           S             10I 0 inz
     D dir             S                   like(LOG4RPG_path_t   ) inz
     D file            S                   like(LOG4RPG_path_t   ) inz
     D extension       S             10I 0                         inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         dou not f_isIfsFile(archive);

            dir  = %trimR(f_rtvIfsDirFromPath(i_handle.path));
            file = %trimR(f_rtvIfsFileFromPath(i_handle.path));

            select;

            // Append date pattern to file name.
            when f_left(i_handle.dateValue: 1) = '.';
               file = file + i_handle.dateValue;

            // Insert date pattern before '.' of file name
            when f_right(i_handle.dateValue: 1) = '.';
               start = f_scanR('.': file);
               if start > 0;
                  file = %replace(i_handle.dateValue: file: start: 1);
               else;
                  // Append date pattern if the is no '.' in file name
                  file = file + i_handle.dateValue;
               endif;

            // Append date pattern to file name
            other;
               file = file + i_handle.dateValue;
            endsl;

            if extension = 0;
               archive = dir + file;
            else;
               archive = dir + file + '(' + %char(extension) + ')';
            endif;
            extension = extension + 1;
         enddo;

         return archive;

      /END-FREE
      *
     P getArchivePath...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG51  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG51 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: DailyRollingPrintAppende"
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: DailyRollingPrintAppender                *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  13.06.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *  25.10.2006  Th.Raddatz    Replaced data structure logEvent with    *
      *                            object LogEvent.                         *
      *                                                                     *
      *  26.10.2006  Th.Raddatz    Moved wordWrap processing to Appender    *
      *                            implementation objects.                  *
      *                                                                     *
      *  27.10.2006  Th.Raddatz    Fixed problem that properties were not   *
      *                            found because auf case mismatch.         *
      *                                                                     *
      *  22.04.2008  Th.Raddatz    Now usinng the OptionConverter to        *
      *                            convert properties.                      *
      *                                                                     *
      *  09.09.2008  Th.Raddatz    Change doAppend() procedure to call      *
      *                            LogEvent_getFirstLineOfText() and        *
      *                            LogEvent_getNextLineOfText() instead     *
      *                            utilizing f_wordwrap().                  *
      *                            Improving performance by passing a       *
      *                            pointer instead of a field to Rwrite().  *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG51
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG                     Public interface & type definitions
      /COPY QLOG4RPG,PLOG4RPG12                   ClassLoader
      *
     D handle_t...
     D                 DS                  qualified           based(pDummy)
     D  pSuper                             like(LOG4RPG_pAppender_t)
     D  isOpen                         N
     D  hFile                          *
     D  outQ                               like(LOG4RPG_path_t  )
     D  splfname                     10A
     D  usrDta                       10A
     D  length                       10I 0
     D  width                        10I 0
     D  lpi                          10I 0
     D  cpi                          10I 0
     D  ovrflw                       10I 0
     D  leftMargin                   10I 0
     D  rightMargin                  10I 0
     D  datePattern                  32A   varying
     D  dateValue                    32A   varying
     D  layoutImpl                         likeds(LOG4RPG_classLayout_t)
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QLOG4RPG,CLIB                         C-Library
      /COPY QLOG4RPG,CLIB2                        C-Library 2 (Record IO)
      *
      /COPY QLOG4RPG,PLOG4RPG07                   PropertyList
      /COPY QLOG4RPG,PLOG4RPG10                   LogLog
      /COPY QLOG4RPG,PLOG4RPG98                   OptionConverter
      /COPY QLOG4RPG,PLOG4RPG99                   Helper
      *
      *  Execute Command (QCMDEXC) API
     D QCMDEXC...
     D                 PR                  extpgm('QCMDEXC')
     D  i_cmd                     32702A   const  options(*varsize)
     D  i_length                     15P 5 const
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      *  Opens a DailyRollingPrintAppender for output.
     D openAppender...
     D                 PR              N
     D  i_pHandle                      *   const
      *
      *  Closes a DailyRollingPrintAppender.
     D closeAppender...
     D                 PR              N
     D  i_pHandle                      *   const
      *
      *  Check if a new file must be started.
     D isNewFileCondition...
     D                 PR              N
     D  i_handle                           const  likeds(handle_t )
      *
      *  Replace variables.
     D replaceVariables...
     D                 PR                         like(handle_t.datePattern )
     D  i_string                           const  like(handle_t.datePattern )
      *
      *  Returns the overwrite command for the printer file.
     D getOverwriteCmd...
     D                 PR           512A          varying
     D  i_handle                           const  likeds(handle_t      )
      *
      *  Returns the output queue from handle.outQ.
     D getOutQ...
     D                 PR                         like(qObj_t          )
     D  i_path                             const  like(LOG4RPG_path_t  )
      *
      *  Loads the configuration parameters from the specified property list.
     D loadConfiguration...
     D                 PR
     D  io_handle                                 likeds(handle_t              )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
     D cTHIS_CLASS...
     D                 C                          const(
     D                                            'DailyRollingPrintAppender')
      *
     D cDEFAULT_LENGTH...
     D                 C                          const(70)
     D cDEFAULT_WIDTH...
     D                 C                          const(132)
     D cDEFAULT_LPI...
     D                 C                          const(6)
     D cDEFAULT_CPI...
     D                 C                          const(10)
     D cDEFAULT_OVRFLW...
     D                 C                          const(60)
     D cDEFAULT_LEFT_MARGIN...
     D                 C                          const(10)
     D cDEFAULT_RIGHT_MARGIN...
     D                 C                          const(10)
      *
     D cPARAMETER_OUTQ...
     D                 C                          const('outq')
     D cPARAMETER_SPLFNAME...
     D                 C                          const('splfname')
     D cPARAMETER_USRDTA...
     D                 C                          const('usrdta')
     D cPARAMETER_PAGE_LENGTH...
     D                 C                          const('length')
     D cPARAMETER_PAGE_WIDTH...
     D                 C                          const('width')
     D cPARAMETER_LPI...
     D                 C                          const('lpi')
     D cPARAMETER_CPI...
     D                 C                          const('cpi')
     D cPARAMETER_OVERFLOW...
     D                 C                          const('ovrflw')
     D cPARAMETER_LEFT_MARGIN...
     D                 C                          const('leftmargin')
     D cPARAMETER_RIGHT_MARGIN...
     D                 C                          const('rightmargin')
     D cPARAMETER_DATE_PATTERN...
     D                 C                          const('datepattern')
      *
     D cDATE_PATTERN_DAYS...
     D                 C                          const('dd')
     D cDATE_PATTERN_MONTHS...
     D                 C                          const('MM')
     D cDATE_PATTERN_YEARS...
     D                 C                          const('yyyy')
     D cDATE_PATTERN_MINUTES...
     D                 C                          const('mm')
     D cDATE_PATTERN_HOURS...
     D                 C                          const('HH')
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      *=====================================================================*
      *  Creates a new DailyRollingPrintAppender.
      *=====================================================================*
      *  Parameters:
      *   io_pHandle    - Handle that is passed around the various calls to
      *                   this DailyRollingPrintAppender.
      *   i_pPropsList  - Handle of the property list that contains the
      *                   properties for the appender.
      *   i_prefix      - Prefix of the relevant property keys.
      *
      *  Returns:
      *   isDone        - Returns TRUE on success, else FALSE.
      *=====================================================================*
     P DailyRollingPrintAppender_new...
     P                 B                   export
      *
     D DailyRollingPrintAppender_new...
     D                 PI              N
     D  i_pSuper                           const  like(LOG4RPG_pAppender_t     )
     D  io_pHandle                     *
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Helper fields
     D tempHandle      DS                  likeds(handle_t          ) inz
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(io_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         clear tempHandle;

         // Initialize handle
         tempHandle.pSuper          = i_pSuper;
         tempHandle.isOpen          = cFalse;
         tempHandle.hFile           = *NULL;
         tempHandle.outQ            = '*N/LOG4RPG';
         tempHandle.splfname        = 'LOG4RPG';
         tempHandle.usrdta          = 'LOG';
         tempHandle.length          = cDEFAULT_LENGTH;
         tempHandle.width           = cDEFAULT_WIDTH;
         tempHandle.lpi             = cDEFAULT_LPI;
         tempHandle.cpi             = cDEFAULT_CPI;
         tempHandle.ovrflw          = cDEFAULT_OVRFLW;
         tempHandle.leftMargin      = cDEFAULT_LEFT_MARGIN;
         tempHandle.rightMargin     = cDEFAULT_RIGHT_MARGIN;
         tempHandle.datePattern     = 'yyyy-MM-dd';
         tempHandle.dateValue       = '';

         // Initialize handle from configuration properties
         if (i_pPropList <> *NULL) and not PropertyList_isNull(i_pPropList);
            loadConfiguration(tempHandle: i_pPropList: i_prefix);
         endif;

         io_pHandle = %alloc(%size(tempHandle));
         handle = tempHandle;

         LogLog_debug('Loaded instance of [' + cTHIS_CLASS + '].');

         return isDone;

      /END-FREE
      *
     P DailyRollingPrintAppender_new...
     P                 E
      *
      *=====================================================================*
      *  Returns TRUE if the appender requires a layout.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this DailyRollingPrintAppender.
      *
      *  Returns:
      *   isDone        - Returns TRUE if the appender requires a layout,
      *                   else FALSE.
      *=====================================================================*
     P DailyRollingPrintAppender_requiresLayout...
     P                 B                   export
      *
     D DailyRollingPrintAppender_requiresLayout...
     D                 PI              N
     D  i_pHandle                      *   const
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return cTrue;

      /END-FREE
      *
     P DailyRollingPrintAppender_requiresLayout...
     P                 E
      *
      *=====================================================================*
      *  Appends a message to the PrinterAppender.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this DailyRollingPrintAppender.
      *   i_pLogEvent   - Handle of the Log event returned by LogEvent_new().
      *
      *  Returns:
      *   isDone        - Returns TRUE on success, else FALSE.
      *=====================================================================*
     P DailyRollingPrintAppender_doAppend...
     P                 B                   export
      *
     D DailyRollingPrintAppender_doAppend...
     D                 PI              N
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const like(LOG4RPG_pLogEvent_t )
      *
      *  Return value
     D isDone          S               N   inz(cFalse)
      *
      *  Helper fields
     D isText          S               N   inz
     D pageWidth       S             10U 0 inz
     D text            S                   like(LOG4RPG_formattedText_t) inz
     D msg             DS                  likeds(msg_t          ) inz
     D RIOFB           DS                  likeds(RIOFB_t        ) based(pRIOFB)
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return if there is no text
         if LogEvent_textLength(i_pLogEvent) = 0;
            return cTrue;
         endif;

         // Open the appender for output is it is not yet open
         if not handle.isOpen;
            openAppender(i_pHandle);
         endif;

         // Check if a new file must be started.
         if isNewFileCondition(handle);
            if handle.isOpen;
               closeAppender(i_pHandle);
            endif;
            openAppender(i_pHandle);
         endif;

         // Write to file
         f_clrErrno();

         pageWidth = handle.width - handle.leftMargin - handle.rightMargin;
         text = LogEvent_getFirstLineOfText(i_pLogEvent: isText: pageWidth);
         dow isText;

            if handle.leftMargin > 0;
               text = f_space(handle.leftMargin) + text;
            endif;

            %len(text) = handle.width;   // Add trailing blanks to clear
                                         // print line of QSYSPRT

            monitor;
               text = text;
               pRIOFB = Rwrite(handle.hFile: %addr(text)+2: %len(text));
               if RIOFB.numByt = 0;
                  isDone = cFalse;
               else;
                  isDone = cTrue;
               endif;
            on-error;
               p_rmvPgmMsg(cMsg_Rmv_All: *omit: cMsg_Same: cMsg_ToMyself);
               isDone = cFalse;
            endmon;

            text = LogEvent_getNextLineOfText(i_pLogEvent: isText: pageWidth);
         enddo;

         if not isDone;
            LogLog_error('Failed to write logEevent to file [' +
                          handle.outQ + ']');
            if f_errno() <> 0;
               LogLog_errorMsg(f_cvtErrnoToMsg(f_errno));
            endif;
         endif;

         return isDone;

      /END-FREE
      *
     P DailyRollingPrintAppender_doAppend...
     P                 E
      *
      *=====================================================================*
      *  Used to set the properties of the appender.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this DailyRollingFileAppender.
      *   i_pPropsList  - Handle of the property list that contains the
      *                   properties for the appender.
      *   i_prefix      - Prefix of the relevant property keys.
      *
      *  Returns:
      *   void
      *=====================================================================*
     P DailyRollingPrintAppender_setProperties...
     P                 B                   export
      *
     D DailyRollingPrintAppender_setProperties...
     D                 PI
     D  i_pHandle                      *   const
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  DailyRollingPrintAppender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         loadConfiguration(handle: i_pPropList: i_prefix);

         return;

      /END-FREE
      *
     P DailyRollingPrintAppender_setProperties...
     P                 E
      *
      *=====================================================================*
      *  Deletes a given DailyRollingPrintAppender.
      *=====================================================================*
      *  Parameters:
      *   io_pHandle    - Handle that is passed around the various calls to
      *                   this DailyRollingPrintAppender.
      *
      *  Returns:
      *   void
      *=====================================================================*
     P DailyRollingPrintAppender_delete...
     P                 B                   export
      *
     D DailyRollingPrintAppender_delete...
     D                 PI              N
     D  io_pHandle                     *
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(io_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Close file if it is left open
         if handle.isOpen;
            closeAppender(io_pHandle);
         endif;

         // Clear handle data
         clear handle;

         // Free handle memory
         dealloc(N) io_pHandle;

         LogLog_verbose('Deleted instance of [' + cTHIS_CLASS + '].');

         isDone = cTrue;

         return isDone;

      /END-FREE
      *
     P DailyRollingPrintAppender_delete...
     P                 E
      *
      *=====================================================================*
    R *  *** Private ***
      *  Opens a DailyRollingPrintAppender for output.
      *=====================================================================*
     P openAppender...
     P                 B
      *
     D openAppender...
     D                 PI              N
     D  i_pHandle                      *   const
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      *
      *  Helper fields
     D cmd             S            512A   inz varying
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Set end of livetime of file
         handle.dateValue = replaceVariables(handle.datePattern);

         // Open new instance of file
         if handle.hFile = *NULL;
            cmd   = getOverwriteCmd(handle);

            monitor;
               p_rmvPgmMsg(cMsg_Rmv_All: *omit: cMsg_Same: cMsg_ToMyself);
               qcmdexc(cmd: %len(cmd));
            on-error;
               p_rmvPgmMsg(cMsg_Rmv_All: *omit: cMsg_Same: cMsg_ToMyself);
               LogLog_error('Error on OVRPRTF with command ' + cmd);
            endmon;

            handle.hFile = Ropen('*LIBL/QSYSPRT': 'wr');

            if handle.hFile = *NULL;
               isDone = cFalse;
            else;
               isDone = cTrue;
               handle.isOpen = cTrue;
            endif;

         endif;

         return isDone;

      /END-FREE
      *
     P openAppender...
     P                 E
      *
      *=====================================================================*
    R *  *** Private ***
      *  Closes a DailyRollingPrintAppender.
      *=====================================================================*
     P closeAppender...
     P                 B
      *
     D closeAppender...
     D                 PI              N
     D  i_pHandle                      *   const
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if Rclose(handle.hFile) = 0;
            handle.isOpen = cFalse;
            handle.hFile  = *NULL;
            isDone = cTrue;
         else;
            isDone = cFalse;
         endif;

         return isDone;

      /END-FREE
      *
     P closeAppender...
     P                 E
      *
      *=====================================================================*
    R *  *** private ***
      *  Check overflow condition.
      *=====================================================================*
     P isNewFileCondition...
     P                 B
      *
     D isNewFileCondition...
     D                 PI              N
     D  i_handle                           const  likeds(handle_t )
      *
      *  Return value
     D isNewFile       S               N   inz(cFalse)
      *
      *  Helper fields
     D cmpDateValue    S                   like(i_handle.dateValue  ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         cmpdateValue = replaceVariables(i_handle.datePattern);

         if i_handle.dateValue <> cmpDateValue;
            isNewFile = cTrue;
         else;
            isNewFile = cFalse;
         endif;

         return isNewFile;

      /END-FREE
      *
     P isNewFileCondition...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Replace variables.
      *=========================================================================
     P replaceVariables...
     P                 B
      *
     D replaceVariables...
     D                 PI                         like(handle_t.datePattern )
     D  i_string                           const  like(handle_t.datePattern )
      *
      *  Return value
     D string          S                   like(handle_t.datePattern ) inz
      *
      *  Helper fields
     D timestamp       S               Z   inz
     D days            S              2S 0 inz
     D months          S              2S 0 inz
     D years           S              4S 0 inz
     D minutes         S              2S 0 inz
     D hours           S              2S 0 inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         timestamp = %timestamp();
         days    = %subdt(timestamp: *DAYS    );
         months  = %subdt(timestamp: *MONTHS  );
         years   = %subdt(timestamp: *YEARS   );
         minutes = %subdt(timestamp: *MINUTES );
         hours   = %subdt(timestamp: *HOURS   );

         string = i_string;

         string = f_replace(cDATE_PATTERN_DAYS
                            : %editc(days   : 'X'): string);
         string = f_replace(cDATE_PATTERN_MONTHS
                            : %editc(months : 'X'): string);
         string = f_replace(cDATE_PATTERN_YEARS
                            : %editc(years  : 'X'): string);
         string = f_replace(cDATE_PATTERN_MINUTES
                            : %editc(minutes: 'X'): string);
         string = f_replace(cDATE_PATTERN_HOURS
                            : %editc(hours  : 'X'): string);

         return string;

      /END-FREE
      *
     P replaceVariables...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Returns the overwrite command for the printer file.
      *=========================================================================
     P getOverwriteCmd...
     P                 B
      *
     D getOverwriteCmd...
     D                 PI           512A          varying
     D  i_handle                           const  likeds(handle_t      )
      *
      *  Return value
     D cmd             S            512A   inz  varying
      *
      *  Helper fields
     D qOutq           DS                  likeds(qObj_t   ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         qOutQ = getOutQ(i_handle.outQ);

         cmd = 'OVRPRTF ' +
                  'FILE(QSYSPRT) ' +
                  'TOFILE(*FILE) ' +
                  'PAGESIZE('   + %char(i_handle.length)  + ' ' +
                                  %char(i_handle.width )  + ') ' +
                  'LPI('        + %char(i_handle.lpi)     + ') ' +
                  'CPI('        + %char(i_handle.cpi)     + ') ' +
                  'OVRFLW('     + %char(i_handle.ovrflw)  + ') ' +
                  'OUTQ('       + %trim(qOutQ.lib)  + '/' +
                                  %trim(qOutQ.name)       + ') ' +
                  'USRDTA('''   + i_handle.usrDta         + ''') ' +
                  'SPLFNAME('   + i_handle.splfname       + ') ' +
                  'OVRSCOPE(*CALLLVL)';

         return cmd;

      /END-FREE
      *
     P getOverwriteCmd...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Returns the output queue from handle.outQ.
      *=========================================================================
     P getOutQ...
     P                 B
      *
     D getOutQ...
     D                 PI                         like(qObj_t          )
     D  i_outQ                             const  like(LOG4RPG_path_t  )
      *
      *  Return value
     D qOutQ           DS                  likeds(qObj_t   ) inz
      *
      *  Local fields
     D x               S             10I 0 inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

            if i_outQ = '';
               qOutQ.name = '*N';
               qOutQ.lib  = '*N';
               return qOutQ;
            endif;

            x = %scan('/': i_outQ);

            if (x > 1) and (x < %len(i_outQ));
               qOutQ.name = %subst(i_outQ: x+1);
               qOutQ.lib  = f_left(i_outQ: x-1);
            else;
               qOutQ.name = i_outQ;
               qOutQ.lib  = '*N';
            endif;

         return qOutQ;

      /END-FREE
      *
     P getOutQ...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Loads the configuration parameters from the specified property list.
      *=========================================================================
     P loadConfiguration...
     P                 B
      *
     D loadConfiguration...
     D                 PI
     D  io_handle                                 likeds(handle_t              )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Local fields
     D parameter       S                   like(property.key        ) inz
     D prefix          S                   like(i_prefix            ) inz
     D property        DS                  likeds(LOG4RPG_property_t) inz
     D propIter        DS                  likeds(LOG4RPG_Property...
     D                                                    ListIterator_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         prefix = f_lcase(i_prefix);

         propIter = PropertyList_getIterator(i_pPropList);

         property = PropertyList_getFirst(propIter);

         dow property.key <> '';

            if (prefix = '') or (f_startsWith(prefix: property.key) and
 B03                             %len(property.key) > %len(prefix));

               parameter = f_lcase(%subst(property.key: %len(prefix) + 1));

               select;
               when parameter = cPARAMETER_OUTQ;
                  io_handle.outQ        = property.value;
               when parameter = cPARAMETER_SPLFNAME;
                  io_handle.splfname    = property.value;
               when parameter = cPARAMETER_USRDTA;
                  io_handle.usrdta      = property.value;
               when parameter = cPARAMETER_PAGE_LENGTH;
                  io_handle.length =
                     OptionConverter_toInt(
                        property.value: cDEFAULT_LENGTH);
               when parameter = cPARAMETER_PAGE_WIDTH;
                  io_handle.width =
                     OptionConverter_toInt(
                        property.value: cDEFAULT_WIDTH);
               when parameter = cPARAMETER_LPI;
                  io_handle.lpi =
                     OptionConverter_toInt(
                        property.value: cDEFAULT_LPI);
               when parameter = cPARAMETER_CPI;
                  io_handle.cpi =
                     OptionConverter_toInt(
                        property.value: cDEFAULT_CPI);
               when parameter = cPARAMETER_OVERFLOW;
                  io_handle.ovrflw =
                     OptionConverter_toInt(
                        property.value: cDEFAULT_OVRFLW);
               when parameter = cPARAMETER_LEFT_MARGIN;
                  io_handle.leftMargin =
                     OptionConverter_toInt(
                        property.value: cDEFAULT_LEFT_MARGIN);
               when parameter = cPARAMETER_RIGHT_MARGIN;
                  io_handle.rightMargin =
                     OptionConverter_toInt(
                        property.value: cDEFAULT_RIGHT_MARGIN);
               when parameter = cPARAMETER_DATE_PATTERN;
                  io_handle.datePattern = property.value;
               when Appender_knowsProperty(parameter);
 B03              // Ignore all parameters known by super Appender class
               other;
                  LogLog_warning('No such property ['     +
                                  property.key            +
                                 '] in [' + cTHIS_CLASS + ']');
               endsl;

            endif;

            property = PropertyList_getNext(propIter);
         enddo;

         return;

      /END-FREE
      *
     P loadConfiguration...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG52  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG52 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: NullAppender            "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: NullAppender                             *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  13.06.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *  25.10.2006  Th.Raddatz    Replaced data structure logEvent with    *
      *                            object LogEvent.                         *
      *                                                                     *
      *  26.10.2006  Th.Raddatz    Moved wordWrap processing to Appender    *
      *                            implementation objects.                  *
      *                                                                     *
      *  27.10.2006  Th.Raddatz    Fixed problem that properties were not   *
      *                            found because auf case mismatch.         *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG52
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG                     Public interface & type definitions
      *
     D handle_t...
     D                 DS                  qualified           based(pDummy)
     D  pSuper                             like(LOG4RPG_pAppender_t)
     D  dummy                         1A
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG10                   LogLog
      /COPY QLOG4RPG,PLOG4RPG99                   Helper
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
     D cTHIS_CLASS...
     D                 C                          const(
     D                                            'NullAppender')
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      *=====================================================================*
      *  Creates a new NullAppender.
      *=====================================================================*
      *  Parameters:
      *   io_pHandle    - Handle that is passed around the various calls to
      *                   this NullAppender.
      *   i_pPropsList  - Handle of the property list that contains the
      *                   properties for the appender.
      *   i_prefix      - Prefix of the relevant property keys.
      *
      *  Returns:
      *   isDone        - Returns TRUE on success, else FALSE.
      *=====================================================================*
     P NullAppender_new...
     P                 B                   export
      *
     D NullAppender_new...
     D                 PI              N
     D  i_pSuper                           const  like(LOG4RPG_pAppender_t     )
     D  io_pHandle                     *
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(io_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         io_pHandle = *NULL;

         LogLog_debug('Loaded instance of [' + cTHIS_CLASS + '].');

         return isDone;

      /END-FREE
      *
     P NullAppender_new...
     P                 E
      *
      *=====================================================================*
      *  Returns TRUE if the appender requires a layout.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this NullAppender.
      *
      *  Returns:
      *   isDone        - Returns TRUE if the appender requires a layout,
      *                   else FALSE.
      *=====================================================================*
     P NullAppender_requiresLayout...
     P                 B                   export
      *
     D NullAppender_requiresLayout...
     D                 PI              N
     D  i_pHandle                      *   const
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return cFalse;

      /END-FREE
      *
     P NullAppender_requiresLayout...
     P                 E
      *
      *=====================================================================*
      *  Appends a message to the PrinterAppender.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this NullAppender.
      *   i_pLogEvent   - Handle of the Log event returned by LogEvent_new().
      *
      *  Returns:
      *   isDone        - Returns TRUE on success, else FALSE.
      *=====================================================================*
     P NullAppender_doAppend...
     P                 B                   export
      *
     D NullAppender_doAppend...
     D                 PI              N
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const like(LOG4RPG_pLogEvent_t )
      *
      *  Return value
     D isDone          S               N   inz(cFalse)
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         isDone = cTrue;

         return isDone;

      /END-FREE
      *
     P NullAppender_doAppend...
     P                 E
      *
      *=====================================================================*
      *  Used to set the properties of the appender.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this NullAppender.
      *   i_pPropsList  - Handle of the property list that contains the
      *                   properties for the appender.
      *   i_prefix      - Prefix of the relevant property keys.
      *
      *  Returns:
      *   void
      *=====================================================================*
     P NullAppender_setProperties...
     P                 B                   export
      *
     D NullAppender_setProperties...
     D                 PI
     D  i_pHandle                      *   const
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  NullAppender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return;

      /END-FREE
      *
     P NullAppender_setProperties...
     P                 E
      *
      *=====================================================================*
      *  Deletes a given NullAppender.
      *=====================================================================*
      *  Parameters:
      *   io_pHandle    - Handle that is passed around the various calls to
      *                   this NullAppender.
      *
      *  Returns:
      *   void
      *=====================================================================*
     P NullAppender_delete...
     P                 B                   export
      *
     D NullAppender_delete...
     D                 PI              N
     D  io_pHandle                     *
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(io_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         LogLog_verbose('Deleted instance of [' + cTHIS_CLASS + '].');

         isDone = cTrue;

         return isDone;

      /END-FREE
      *
     P NullAppender_delete...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG60  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG60 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: PatternLayout           "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: PatternLayout                            *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  13.06.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *  27.10.2006  Th.Raddatz    Replaced data structure logEvent with    *
      *                            object LogEvent.                         *
      *                            Removed return value from procedure      *
      *                            PatternLayout_format().                  *
      *                            Fixed problem that properties were not   *
      *                            found because auf case mismatch.         *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG60
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,FDQJOB
      /COPY QLOG4RPG,FDJOBI0600
      *
     D handle_t...
     D                 DS                  qualified           based(pDummy)
     D  pSuper                             like(LOG4RPG_pLayout_t  )
     D  pattern                     128A   varying
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QLOG4RPG,CLIB
      /COPY QLOG4RPG,PLOG4RPG07                    PropertyList
      /COPY QLOG4RPG,PLOG4RPG09                    Level
      /COPY QLOG4RPG,PLOG4RPG10                    LogLog
      /COPY QLOG4RPG,PLOG4RPG99                    Helper
      *
      *  Retrieve Job Information (QUSRJOBI) API
     D QUSRJOBI        PR                  extpgm('QUSRJOBI')
     D  o_rcvVar                  32767A          options(*varsize)
     D  i_lenRcvVar                  10I 0 const
     D  i_format                      8A   const
     D  i_qJob                       26A   const
     D  i_intJobID                   16A   const
     D  io_errCode                                like(errCode_t )
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      *  Loads the configuration parameters from the specified property list.
     D loadConfiguration...
     D                 PR
     D  io_handle                                 likeds(handle_t              )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Retrieves job information into format jobi0600.
     D rtvJobInf...
     D                 PR                         likeds(jobi0600_t  )
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
     D cTHIS_CLASS...
     D                 C                          const(
     D                                            'PatternLayout')
      *
     D cPARAMETER_CONVERSION_PATTERN...
     D                 C                          const('conversionpattern')
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Program status data structure
      * -----------------------------------------
      /DEFINE SDS_EXTENDED
      /COPY QLOG4RPG,SDS
      /UNDEFINE SDS_EXTENDED
      *
      *=========================================================================
      *  Creates a new PatternLayout.
      *=========================================================================
      *  Parameters:
      *   io_pHandle    - Handle that is passed around the various calls to
      *                   this PatternLayout.
      *   i_pPropsList  - Handle of the property list that contains the
      *                   properties for the appender.
      *   i_prefix      - Prefix of the relevant property keys.
      *
      *  Returns:
      *   isDone        - Returns TRUE on success, else FALSE.
      *=========================================================================
     P PatternLayout_new...
     P                 B                   export
      *
     D PatternLayout_new...
     D                 PI              N
     D  i_pSuper                           const  like(LOG4RPG_pLayout_t       )
     D  io_pHandle                     *
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Helper fields
     D tempHandle      DS                  likeds(handle_t ) inz
      *
      *  PatternLayout handle
     D handle          DS                  likeds(handle_t ) based(io_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         clear tempHandle;

         // Initialize handle
         tempHandle.pSuper  = i_pSuper;   // Handle of the super class 'Layout'
         tempHandle.pattern = '%z [%M.%F]  %-5p  %S - %m';

         // Initialize handle from configuration properties
         if (i_pPropList <> *NULL) and not PropertyList_isNull(i_pPropList);
            loadConfiguration(tempHandle: i_pPropList: i_prefix);
         endif;

         io_pHandle = %alloc(%size(tempHandle));
         handle = tempHandle;

         LogLog_debug('Loaded instance of [' + cTHIS_CLASS + '].');

         return isDone;

      /END-FREE
      *
     P PatternLayout_new...
     P                 E
      *
      *=========================================================================
      *  Formats a logging event and returns the result as a string.
      *=========================================================================
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this PatternLayout.
      *   i_pLogEvent   - Handle of the Log event returned by LogEvent_new().
      *                   text of the log event that is formated.
      *
      *  Returns:
      *   text          - Returns the formatted text of the log event.
      *=========================================================================
      *
      *  Pattern variables:
      *  ------------------
      *     %p      priority
      *     %t      time
      *     %d      date
      *     %z      timestamp
      *     %l      logger name
      *     %m      application supplied message text
      *     %n      new line
      *     %P      program name
      *     %L      program library name
      *     %M      module name
      *     %F      function/procedure name
      *     %S      statement
      *     %j      full qualified job name
      *     %u      user name
      *     %U      current user name
      *
      *  Sample pattern layout:
      *  ----------------------
      *
      *  Layout:
      *     '%z [%M.%F]  %-5p  %S - %m'
      *
      *  Result:
      *     2006-02-22-11.38.42.567000 [LOG4RPG_T1.P_MAIN]  debug  0000010500 - Hello World
      *
      *  Description:
      *     '%z' produces the current timestamp.
      *     '%M' and '%F' prints the module and procedure name the logger was called from.
      *     '%-5p' prints the logging priority, left adjusted in a 5 character space.
      *     '%S' prints the statement identifier the logger was called from.
      *     '%m' prints message text supplied by the application.
      *
      *=========================================================================
     P PatternLayout_format...
     P                 B                   export
      *
     D PatternLayout_format...
     D                 PI
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const like(LOG4RPG_pLogEvent_t )
      *
      *  Helper fields
     D x               S             10I 0         inz
     D y               S             10I 0         inz
     D lengthStr       S              5A   varying inz
     D length          S             10I 0         inz
     D pattern         S              1A           inz
     D tmpText         S                   like(LOG4RPG_formattedText_t) inz
     D string          S                   like(LOG4RPG_formattedText_t) inz
     D caller          DS                  likeds(LOG4RPG_caller_t  ) inz
     D jobi0600        DS                  likeds(jobi0600_t        ) inz
      *
      *  Constants
     D cTMPTEXTMAXLEN  C                   const(128)
      *
      *  PatternLayout handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Load return message text with pattern layout
         string = handle.pattern;

         // Search for patterns and replace them
         x = %scan('%': string: 1);
         dow x > 0 and x < %len(string);

            lengthStr = '';
            length    = 0;
            pattern   = '';

            // get length if specified
            y = x + 1;
            if (%subst(string: y: 1) = '-') and (y < %len(string));
               y = y + 1;
               dow (y <= %len(string) and
                   (%check('0123456789': %subst(string: y: 1)) = 0));
                  lengthStr = lengthStr + %subst(string: y: 1);
                  y = y + 1;
               enddo;
            endif;

            // get pattern
            pattern = %subst(string: y: 1);

            // get length
            length = atoi(lengthStr);

            // replace pattern
            select;
            when pattern = 'p';      // priority/level
               tmpText = Level_toString(LogEvent_getPriority(i_pLogEvent));
            when pattern = 't';      // Time
               tmpText = %char(%time(LogEvent_getTime(i_pLogEvent)): *jobrun);
            when pattern = 'd';      // Date
               tmpText = %char(%date(LogEvent_getTime(i_pLogEvent)): *jobrun);
            when pattern = 'z';      // Timestamp
               tmpText = %char(LogEvent_getTime(i_pLogEvent));
            when pattern = 'l';      // Logger Name
               tmpText = LogEvent_getLoggerName(i_pLogEvent);
            when pattern = 'm';      // application supplied message
               tmpText = LogEvent_getText(i_pLogEvent);
            when pattern = 'n';      // New Line
               tmpText = '\n';
            when pattern = 'P';      // Program Name
               caller  = LogEvent_getCaller(i_pLogEvent);
               tmpText = %trimR(caller.pgm.name);
            when pattern = 'L';      // Program Library Name
               tmpText = %trimR(LogEvent_resolveCallerPgmLibrary(i_pLogEvent));
            when pattern = 'M';      // Module Name
               caller  = LogEvent_getCaller(i_pLogEvent);
               tmpText = %trimR(caller.module.name);
            when pattern = 'F';      // Procedure/Function Name
               caller  = LogEvent_getCaller(i_pLogEvent);
               tmpText = %trimR(caller.procedure);
            when pattern = 'S';      // Statement ID
               caller  = LogEvent_getCaller(i_pLogEvent);
               tmpText = %trim(caller.stmtID);
            when pattern = 'j';      // full qualified job name
               tmpText = %editc(sds.nbr: 'X') + '/' + %trimR(sds.user)
                                              + '/' + %trimR(sds.job );
            when pattern = 'u';      // user name
               tmpText = %trimR(sds.user);
            when pattern = 'U';      // current user name
               jobi0600 = rtvJobInf();
               tmpText = jobi0600.curUser;
            other;
               tmpText = '';
            endsl;

            if pattern <> '';
               if (length > 0) and (length < cTMPTEXTMAXLEN);
                  %len(tmpText) = length;
               endif;

               string = %replace(tmpText: string: x: y-x+1);
            endif;

            if x < %len(string);
               x = %scan('%': string: y);
            else;
               x = 0;
            endif;

         enddo;

         LogEvent_setText(i_pLogEvent: string);

         return;

      /END-FREE
      *
     P PatternLayout_format...
     P                 E
      *
      *=====================================================================*
      *  Used to set the properties of the layout.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this PatternLayout.
      *   i_pPropsList  - Handle of the property list that contains the
      *                   properties for the appender.
      *   i_prefix      - Prefix of the relevant property keys.
      *
      *  Returns:
      *   isDone        - Returns TRUE on success, else FALSE.
      *=====================================================================*
     P PatternLayout_setProperties...
     P                 B                   export
      *
     D PatternLayout_setProperties...
     D                 PI
     D  i_pHandle                      *   const
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  PatternLayout handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         loadConfiguration(handle: i_pPropList: i_prefix);

         return;

      /END-FREE
      *
     P PatternLayout_setProperties...
     P                 E
      *
      *=====================================================================*
      *  Deletes a given PatternLayout.
      *=====================================================================*
      *  Parameters:
      *   io_pHandle    - Handle that is passed around the various calls to
      *                   this PatternLayout.
      *
      *  Returns:
      *   void
      *=====================================================================*
     P PatternLayout_delete...
     P                 B                   export
      *
     D PatternLayout_delete...
     D                 PI              N
     D  io_pHandle                     *
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  PatternLayout handle
     D handle          DS                  likeds(handle_t ) based(io_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Clear handle data
         clear handle;

         // Free handle memory
         dealloc(N) io_pHandle;

         LogLog_verbose('Deleted instance of [' + cTHIS_CLASS + '].');

         isDone = cTrue;

         return isDone;

      /END-FREE
      *
     P PatternLayout_delete...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Loads the configuration parameters from the specified property list.
      *=========================================================================
     P loadConfiguration...
     P                 B
      *
     D loadConfiguration...
     D                 PI
     D  io_handle                                 likeds(handle_t              )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Local fields
     D parameter       S                   like(property.key        ) inz
     D prefix          S                   like(i_prefix            ) inz
     D property        DS                  likeds(LOG4RPG_property_t) inz
     D propIter        DS                  likeds(LOG4RPG_Property...
     D                                                    ListIterator_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         prefix = f_lcase(i_prefix);

         propIter = PropertyList_getIterator(i_pPropList);

         property = PropertyList_getFirst(propIter);

         dow property.key <> '';

            if (prefix = '') or (f_startsWith(prefix: property.key) and
                                 %len(property.key) > %len(prefix));

               parameter = f_lcase(%subst(property.key: %len(prefix) + 1));

               select;
               when parameter = cPARAMETER_CONVERSION_PATTERN;
                  io_handle.pattern = property.value;
               when Layout_knowsProperty(parameter);
                  // Ignore all parameters known by super Layout class
               other;
                  LogLog_warning('No such property ['     +
                                  property.key            +
                                 '] in [' + cTHIS_CLASS + ']');
               endsl;

            endif;

            property = PropertyList_getNext(propIter);
         enddo;

         return;

      /END-FREE
      *
     P loadConfiguration...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Retrieves job information into format jobi0600.
      *=========================================================================
     P rtvJobInf...
     P                 B
      *
     D rtvJobInf...
     D                 PI                         likeds(jobi0600_t  )
      *
      *  Return value
     D jobi0600        DS                  likeds(jobi0600_t  ) inz
      *
      *  Local fields
     D qJob            DS                  likeds(qJob_t      ) inz
     D errCode         DS                  likeds(errCode_t   ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         qjob.name = '*';
         qjob.user = '';
         qjob.nbr  = '';
         errCode = f_newApiErrCode(cTrue);
         QUSRJOBI(jobi0600: %size(jobi0600): 'JOBI0600': qJob: '': errCode);

         return jobi0600;

      /END-FREE
      *
     P rtvJobInf...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG61  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG61 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: SimpleLayout            "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: SimpleLayout                             *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  13.06.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *  27.10.2006  Th.Raddatz    Replaced data structure logEvent with    *
      *                            object LogEvent.                         *
      *                            Removed return value from procedure      *
      *                            PatternLayout_format().                  *
      *                            Fixed problem that properties were not   *
      *                            found because auf case mismatch.         *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG61
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG09                    Level
      /COPY QLOG4RPG,PLOG4RPG10                    LogLog
      /COPY QLOG4RPG,PLOG4RPG99                    Helper
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
     D cTHIS_CLASS...
     D                 C                          const(
     D                                            'SimpleLayout')
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Output to printer
      * -----------------------------------------
      *
      *=========================================================================
      *  Creates a new SimpleLayout.
      *=========================================================================
      *  Parameters:
      *   io_pHandle    - Handle that is passed around the various calls to
      *                   this SimpleLayout.
      *   i_pPropsList  - Handle of the property list that contains the
      *                   properties for the appender.
      *   i_prefix      - Prefix of the relevant property keys.
      *
      *  Returns:
      *   isDone        - Returns TRUE on success, else FALSE.
      *=========================================================================
     P SimpleLayout_new...
     P                 B                   export
      *
     D SimpleLayout_new...
     D                 PI              N
     D  i_pSuper                           const  like(LOG4RPG_pLayout_t       )
     D  io_pHandle                     *
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         LogLog_debug('Loaded instance of [' + cTHIS_CLASS + '].');

         return isDone;

      /END-FREE
      *
     P SimpleLayout_new...
     P                 E
      *
      *=========================================================================
      *  Formats a logging event and returns the result as a string.
      *=========================================================================
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this SimpleLayout.
      *   i_pLogEvent   - Handle of the Log event returned by LogEvent_new().
      *                   text of the log event that is formated.
      *
      *  Returns:
      *   text          - Returns the formatted text of the log event.
      *=========================================================================
     P SimpleLayout_format...
     P                 B                   export
      *
     D SimpleLayout_format...
     D                 PI
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t )
      *
      *  Helper fields
     D string          S                   like(LOG4RPG_formattedText_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         string = Level_toString(LogEvent_getPriority(i_pLogEvent)) + ' - ' +
                                 LogEvent_getText(i_pLogEvent);

         LogEvent_setText(i_pLogEvent: string);

         return;

      /END-FREE
      *
     P SimpleLayout_format...
     P                 E
      *
      *=====================================================================*
      *  Used to set the properties of the layout.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this SimpleLayout.
      *   i_pPropsList  - Handle of the property list that contains the
      *                   properties for the appender.
      *   i_prefix      - Prefix of the relevant property keys.
      *
      *  Returns:
      *   isDone        - Returns TRUE on success, else FALSE.
      *=====================================================================*
     P SimpleLayout_setProperties...
     P                 B                   export
      *
     D SimpleLayout_setProperties...
     D                 PI
     D  i_pHandle                      *   const
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return;

      /END-FREE
      *
     P SimpleLayout_setProperties...
     P                 E
      *
      *=====================================================================*
      *  Deletes a given SimpleLayout.
      *=====================================================================*
      *  Parameters:
      *   io_pHandle    - Handle that is passed around the various calls to
      *                   this SimpleLayout.
      *
      *  Returns:
      *   void
      *=====================================================================*
     P SimpleLayout_delete...
     P                 B                   export
      *
     D SimpleLayout_delete...
     D                 PI              N
     D  io_pHandle                     *
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         LogLog_verbose('Deleted instance of [' + cTHIS_CLASS + '].');

         isDone = cTrue;

         return isDone;

      /END-FREE
      *
     P SimpleLayout_delete...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG62  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG62 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: XMLLayout               "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: XMLLayout                                *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  13.06.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *  27.10.2006  Th.Raddatz    Replaced data structure logEvent with    *
      *                            object LogEvent.                         *
      *                            Removed return value from procedure      *
      *                            PatternLayout_format().                  *
      *                            Fixed problem that properties were not   *
      *                            found because auf case mismatch.         *
      *                                                                     *
      *  25.04.2007  Th.Raddatz    The log event was not correctly produced *
      *                            when i_text contained ']]>'. Now ']]>'   *
      *                            is replaced with ']]&gt'.                *
      *                                                                     *
      *  03.04.2012  Th.Raddatz    Fixed problem that some special          *
      *                            charcaters were not properly translated  *
      *                            to job CCSID when producing the XML      *
      *                            message.                                 *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG62
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      *
     D handle_t...
     D                 DS                  qualified           based(pDummy)
     D  pSuper                             like(LOG4RPG_pLayout_t  )
     D  rplUnprtChars                  N
     D  substitutionChar...
     D                                1A   varying
     D  encoding                     32A   varying
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG07                    PropertyList
      /COPY QLOG4RPG,PLOG4RPG09                    Level
      /COPY QLOG4RPG,PLOG4RPG10                    LogLog
      /COPY QLOG4RPG,PLOG4RPG99                    Helper
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      *  Loads the configuration parameters from the specified property list.
     D loadConfiguration...
     D                 PR
     D                                            extproc('loadConfiguration')
     D  io_handle                                 likeds(handle_t              )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Ersetzt nicht darstellbare Zeichen
     D rplcUnprtChars...
     D                 PR                         like(LOG4RPG_formattedText_t)
     D                                            extproc('rplcUnprtChars')
     D  i_handle                           const  likeds(handle_t             )
     D  i_text                             const  like(LOG4RPG_formattedText_t)
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
     D cTHIS_CLASS...
     D                 C                          const(
     D                                            'XMLLayout')
      *
     D cPARAMETER_REPLACE_UNPRINTABLE_CHARACTERS...
     D                 C                          const('replace+
     D                                                   unprintablecharacters')
     D cPARAMETER_SUBSTITUTION_CHARACTER...
     D                 C                          const('substitutionCharacter')
     D cPARAMETER_ENCODING...
     D                 C                          const('encoding')
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Program status data structure
      * -----------------------------------------
      /DEFINE SDS_EXTENDED
      /COPY QLOG4RPG,SDS
      /UNDEFINE SDS_EXTENDED
      *
      *=========================================================================
      *  Creates a new XMLLayout.
      *=========================================================================
      *  Parameters:
      *   io_pHandle    - Handle that is passed around the various calls to
      *                   this XMLLayout.
      *   i_pPropsList  - Handle of the property list that contains the
      *                   properties for the appender.
      *   i_prefix      - Prefix of the relevant property keys.
      *
      *  Returns:
      *   isDone        - Returns TRUE on success, else FALSE.
      *=========================================================================
     P XMLLayout_new...
     P                 B                   export
      *
     D XMLLayout_new...
     D                 PI              N
     D  i_pSuper                           const  like(LOG4RPG_pLayout_t       )
     D  io_pHandle                     *
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Helper fields
     D tempHandle      DS                  likeds(handle_t          ) inz
      *
      *  XMLLayout handle
     D handle          DS                  likeds(handle_t ) based(io_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         clear tempHandle;

         // Initialize handle
         tempHandle.pSuper        = i_pSuper;   // Handle of the super class 'Layout'
         tempHandle.rplUnprtChars = cFalse;
         tempHandle.substitutionChar = '÷';
         tempHandle.encoding         = '';

         // Initialize handle from configuration properties
         if (i_pPropList <> *NULL) and not PropertyList_isNull(i_pPropList);
            loadConfiguration(tempHandle: i_pPropList: i_prefix);
         endif;

         io_pHandle = %alloc(%size(tempHandle));
         handle = tempHandle;

         LogLog_debug('Loaded instance of [' + cTHIS_CLASS + '].');

         return isDone;

      /END-FREE
      *
     P XMLLayout_new...
     P                 E
      *
      *=========================================================================
      *  Formats a logging event and returns the result as a string.
      *=========================================================================
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this XMLLayout.
      *   i_pLogEvent   - Handle of the Log event returned by LogEvent_new().
      *                   text of the log event that is formated.
      *
      *  Returns:
      *   text          - Returns the formatted text of the log event.
      *=========================================================================
     P XMLLayout_format...
     P                 B                   export
      *
     D XMLLayout_format...
     D                 PI
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t )
      *
      *  Helper fields
     D xmlString       S                   like(LOG4RPG_formattedText_t) inz
     D isStarted       S               N   inz(cFalse)
     D pPropList       S                   like(LOG4RPG_pPropertyList_t ) inz
     D caller          DS                  likeds(LOG4RPG_caller_t      ) inz
     D property        DS                  likeds(LOG4RPG_property_t    ) inz
     D propIter        DS                  likeds(LOG4RPG_Property...
     D                                                    ListIterator_t) inz
      *
      *  Convert RPG timestamp to Epoch time (mSeconds since January 1, 1970)
     D elapsedEpochTime...
     D                 S             20U 0 inz
     D mSeconds        S             20U 0 inz
     D logTime         S               Z   inz
      *
     D cBASE_TIME      C                          const(
     D                                            z'1970-01-01-00.00.00.000000')
      *
      *  Get Offset from Universal Time Coordinated to Local Time (CEEUTCO) API
     D hours           S             10I 0 inz
     D minutes         S             10I 0 inz
     D seconds         S              8F   inz
      *
     D CEEUTCO         PR                  opdesc
     D  Hours                        10I 0
     D  Minutes                      10I 0
     D  Seconds                       8F
      *
      *  XMLLayout handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      *
     D START_CDATA     S              9C   inz(u'003C0021005B00430044+
     D                                           004100540041005B')             <![CDATA[
     D END_CDATA       S              3C   inz(u'005D005D003E')                 ]]>
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Convert log timestamp to Epoch time since this is
         // what 'Chainsaw' expects:
         mSeconds = %subdt(LogEvent_getTime(i_pLogEvent): *MSECONDS);
         logTime  = LogEvent_getTime(i_pLogEvent) - %mseconds(mSeconds);
         elapsedEpochTime = %diff(logTime: cBASE_TIME: *SECONDS);
         CEEUTCO(hours: minutes: seconds);
         elapsedEpochTime = elapsedEpochTime - seconds;
         elapsedEpochTime = (elapsedEpochTime * 1000) + (mSeconds / 1000);

         // Start log event ...
         xmlString = '<log4j:event logger="'                  +
                        LogEvent_getLoggerName(i_pLogEvent)   + '" ' +
                     'timestamp="'                            +
                        %char(elapsedEpochTime)               + '" ' +
                     'level="'                                +
                        Level_toString(
                           LogEvent_getPriority(i_pLogEvent)) + '" ' +
                     'thread="'                               +
                        %editc(sds.nbr: 'X') + '/' +
                        %trimR(sds.user)     + '/' +
                        %trimR(sds.job )                      + '" ' +
                     '>';

         // ... append message text
         xmlString = xmlString +
                     '<log4j:message>' + %char(START_CDATA) +
                        rplcUnprtChars(handle
                                       : LogEvent_getText(i_pLogEvent)) +
                     %char(END_CDATA) +
                     '</log4j:message>';

         // ... append caller information
         caller = LogEvent_getCaller(i_pLogEvent);

         xmlString = xmlString +
                     '<log4j:locationInfo class="' +
                        %trimR(caller.pgm.name)    + '" ' +
                     'method="'                    +
                        %trimR(caller.procedure)   + '" ' +
                     'file="'                      +
                        %trimR(caller.module.name) + '" ' +
                     'line="'                      +
                        %trimR(caller.stmtID)      + '" ' +
                     '/>';

         // ... append properties
         pPropList = LogEvent_getPropertyList(i_pLogEvent);

         if not PropertyList_isNull(pPropList);

            propIter = PropertyList_getIterator(pPropList);

            isStarted = cFalse;
            property = PropertyList_getFirst(propIter);

            dow property.key <> '';

               if not isStarted;
                  xmlString = xmlString + '<log4j:properties>';
                  isStarted = cTrue;
               endif;

               xmlString = xmlString +
                           '<log4j:data name="' + property.key   +
                                    '" value="' + property.value + '"' +
                           '/>';

               property = PropertyList_getNext(propIter);
            enddo;

            if isStarted;
               xmlString = xmlString + '</log4j:properties>';
            endif;
         endif;

         // ... close.
         xmlString = xmlString + '</log4j:event>';

         LogEvent_setText(i_pLogEvent: xmlString);

         return;

      /END-FREE
      *
     P XMLLayout_format...
     P                 E
      *
      *=====================================================================*
      *  Returns the header of this layout.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle    - Handle that is passed around the various calls to
      *                  this XMLLayout.
      *
      *  Returns:
      *   header       - The header string of this layout.
      *=====================================================================*
     P XMLLayout_getHeader...
     P                 B                   export
      *
     D XMLLayout_getHeader...
     D                 PI                         like(LOG4RPG_header_t)
     D  i_pHandle                      *   const
      *
      *  Helper fields
     D xmlString       S                   like(LOG4RPG_header_t  ) inz
      *
      *  Layout handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         xmlString =                                                                        //RADDAT
            '<?xml version="1.0" ';

         if handle.encoding <> '';
            xmlString = xmlString +
            'encoding="' + handle.encoding + '" ';
         endif;

         xmlString = xmlString +
            '?>' + Layout_newLine();

         xmlString = xmlString +
            '<!DOCTYPE log4j:eventSet SYSTEM "log4j.dtd">' +
             Layout_newLine();

         xmlString = xmlString +
            '<log4j:eventSet version="1.2" +
             xmlns:log4j="http://jakarta.apache.org/log4j/">' +
             Layout_newLine();

         return xmlString;

      /END-FREE
      *
     P XMLLayout_getHeader...
     P                 E
      *
      *=====================================================================*
      *  Returns the footer of this layout.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle    - Handle that is passed around the various calls to
      *                  this XMLLayout.
      *
      *  Returns:
      *   footer       - The footer string of this layout.
      *=====================================================================*
     P XMLLayout_getFooter...
     P                 B                   export
      *
     D XMLLayout_getFooter...
     D                 PI                         like(LOG4RPG_footer_t)
     D  i_pHandle                      *   const
      *
      *  Helper fields
     D xmlString       S                   like(LOG4RPG_footer_t  ) inz
      *
      *  Layout handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         xmlString =
            '</log4j:eventSet>' + Layout_newLine();

         return xmlString;

      /END-FREE
      *
     P XMLLayout_getFooter...
     P                 E
      *
      *=====================================================================*
      *  Used to set the properties of the layout.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this XMLLayout.
      *   i_pPropsList  - Handle of the property list that contains the
      *                   properties for the appender.
      *   i_prefix      - Prefix of the relevant property keys.
      *
      *  Returns:
      *   isDone        - Returns TRUE on success, else FALSE.
      *=====================================================================*
     P XMLLayout_setProperties...
     P                 B                   export
      *
     D XMLLayout_setProperties...
     D                 PI
     D  i_pHandle                      *   const
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  XMLLayout handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         loadConfiguration(handle: i_pPropList: i_prefix);

         return;

      /END-FREE
      *
     P XMLLayout_setProperties...
     P                 E
      *
      *=====================================================================*
      *  Deletes a given XMLLayout.
      *=====================================================================*
      *  Parameters:
      *   io_pHandle    - Handle that is passed around the various calls to
      *                   this XMLLayout.
      *
      *  Returns:
      *   void
      *=====================================================================*
     P XMLLayout_delete...
     P                 B                   export
      *
     D XMLLayout_delete...
     D                 PI              N
     D  io_pHandle                     *
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  XMLLayout handle
     D handle          DS                  likeds(handle_t ) based(io_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Clear handle data
         clear handle;

         // Free handle memory
         dealloc(N) io_pHandle;

         LogLog_verbose('Deleted instance of [' + cTHIS_CLASS + '].');

         isDone = cTrue;

         return isDone;

      /END-FREE
      *
     P XMLLayout_delete...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Loads the configuration parameters from the specified property list.
      *=========================================================================
     P loadConfiguration...
     P                 B
      *
     D loadConfiguration...
     D                 PI
     D  io_handle                                 likeds(handle_t              )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Local fields
     D parameter       S                   like(property.key        ) inz
     D prefix          S                   like(i_prefix            ) inz
     D property        DS                  likeds(LOG4RPG_property_t) inz
     D propIter        DS                  likeds(LOG4RPG_Property...
     D                                                    ListIterator_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         prefix = f_lcase(i_prefix);

         propIter = PropertyList_getIterator(i_pPropList);

         property = PropertyList_getFirst(propIter);

         dow property.key <> '';

            if (prefix = '') or (f_startsWith(prefix: property.key) and
 B03                             %len(property.key) > %len(prefix));

               parameter = f_lcase(%subst(property.key: %len(prefix) + 1));

               select;
               when parameter = cPARAMETER_REPLACE_UNPRINTABLE_CHARACTERS;
                  if property.value = '1' or f_lcase(property.value) = 'true';
                     io_handle.rplUnprtChars = cTrue;
                  else;
                     io_handle.rplUnprtChars = cFalse;
                  endif;
               when parameter = cPARAMETER_SUBSTITUTION_CHARACTER;
                  io_handle.substitutionChar = property.value;
               when parameter = cPARAMETER_ENCODING;
                  io_handle.encoding         = property.value;
               when Layout_knowsProperty(parameter);
                  // Ignore all parameters known by super Layout class
               other;
                  LogLog_warning('No such property ['     +
                                  property.key            +
                                 '] in [' + cTHIS_CLASS + ']');
               endsl;

            endif;

            property = PropertyList_getNext(propIter);
         enddo;

         return;

      /END-FREE
      *
     P loadConfiguration...
     P                 E
      *
      *=====================================================================*
    R *  *** private ***
      *  Entfernt nicht darstellbare Zeichen
      *=====================================================================*
     P rplcUnprtChars...
     P                 B                   export
      *
     D rplcUnprtChars...
     D                 PI                         like(LOG4RPG_formattedText_t)
     D  i_handle                           const  likeds(handle_t             )
     D  i_text                             const  like(LOG4RPG_formattedText_t)
      *
      *  Return value
     D text1           S                   like(LOG4RPG_formattedText_t) inz
     D text2           S                   like(LOG4RPG_formattedText_t) inz
      *
      *  Arbeitsfelder
     D x               S             10I 0 inz
      *
     D END_CDATA       S              3C   inz(u'005D005D003E')                 ]]>
     D ESC_END_CDATA   S              6C   inz(u'005D005D002600670074003B')     ]]&gt;
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Replace closing string of CDATA section
         text1 = f_replace(%char(END_CDATA): %char(ESC_END_CDATA): i_text);

         // Replace unprintable characters
         if not i_handle.rplUnprtChars;
            return text1;
         endif;

         for x = 1 to %len(text1);
            if %subst(text1: x: 1) < x'40' or %subst(text1: x: 1) > x'FE';
               text2 = text2 + i_handle.substitutionChar;
            else;
               text2 = text2 + %subst(text1: x: 1);
            endif;
         endfor;

         return text2;

      /END-FREE
      *
     P rplcUnprtChars...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG97  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG97 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: Synchronisation         "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: Synchronisation                          *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  07.11.2008                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG97
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QLOG4RPG,CEELIB                        CEE-Procedures
      /COPY QBASICS1,PBASICS1                      Basic RPG Extensions
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
     D g_syncObjName   S             21A
      *
     D g_syncData      DS            64    qualified dtaara(*VAR:g_syncObjName)
     D  jobName                      28A
     D  reserved_4                    4A
     D  alcTime                        Z
      *
     D g_isLogMode     S               N   inz(cFalse)
     D g_objectDesc    S             50A   varying inz
      *
      * -----------------------------------------
      *  Program status data structure
      * -----------------------------------------
      /DEFINE SDS_EXTENDED
      /COPY QLOG4RPG,SDS
      /UNDEFINE SDS_EXTENDED
      *
      *=========================================================================
      *  Enables or disables logging of sync lock holder.
      *=========================================================================
     P Synchronisation_setLogMode...
     P                 B                   export
      *
     D Synchronisation_setLogMode...
     D                 PI
     D  i_mode                         N   const
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         g_isLogMode = i_mode;

         return;

      /END-FREE
      *
     P Synchronisation_setLogMode...
     P                 E
      *
      *=========================================================================
      *  Sets the object description of the synchronisation object.
      *=========================================================================
     P Synchronisation_setObjectDesc...
     P                 B                   export
      *
     D Synchronisation_setObjectDesc...
     D                 PI
     D  i_text                       50A   const  varying
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         g_objectDesc = i_text;

         return;

      /END-FREE
      *
     P Synchronisation_setObjectDesc...
     P                 E
      *
      *=========================================================================
      *  Start synchronisation by adding a lock on a given synchronisation
      *  data area.
      *=========================================================================
     P Synchronisation_start...
     P                 B                   export
      *
     D Synchronisation_start...
     D                 PI              N
     D  i_dtaara                     10A   const
     D  i_lib                        10A   const
     D  o_ticket                                  likeds(LOG4RPG_syncTicket_t )
     D  o_msg                                     likeds(msg_t )
     D                                            options(*nopass: *omit)
      *
      *  Return value
     D isStarted       S               N   inz(cFalse)
      *
      *  Parameter positions
     D p_msg           C                   const(4)
      *
      *  Optional parameter fields
     D msg             DS                  likeds(o_msg     ) inz
      *
      *  Helper fields
     D isPresent       S             10I 0 inz
     D cmd             S            128A   inz
     D rcvm0200        DS                  likeds(rcvm0200_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         clear o_ticket;
         msg = f_newMsg(cMSG_ID_OK);

         dou '1';

            if (not f_exist(i_dtaara: i_lib: '*DTAARA'));
               cmd = 'CRTDTAARA DTAARA(%LIB%/%DTAARA%) +
                                TYPE(*CHAR) LEN(%LEN%) +
                                TEXT(''' + g_objectDesc + ''')';
               cmd = f_replace('%LIB%'   : %trimR(i_lib)   : cmd);
               cmd = f_replace('%DTAARA%': %trimR(i_dtaara): cmd);
               cmd = f_replace('%LEN%'   : %char(%len(g_syncData)): cmd);
               f_execute(cmd: *omit: msg);
               if (msg.ID <> cMSG_ID_OK);
                  leave;
               endif;
            endif;

            g_syncObjName = %trimR(i_lib) + '/' + %trimR(i_dtaara);

            monitor;
               in *lock g_syncData;
            on-error;
               rcvm0200 = f_rcvPgmMsg(cMsg_Escape: *omit: cMsg_Act_Old);
               msg = f_cvtRcvMsgToMsg(rcvm0200);
               leave;
            endmon;

            g_syncData.jobName = %trimR(%char(sds.nbr)) + '/' +
                                 %trimR(sds.user)       + '/' +
                                 %trimR(sds.job );
            g_syncData.alcTime = %timestamp();

            if (g_isLogMode);
               out *lock g_syncData;
            endif;

            o_ticket.jobName = g_syncData.jobName;
            o_ticket.alcTime = g_syncData.alcTime;
            isStarted = cTrue;
         enddo;

         if (msg.ID <> cMSG_ID_OK);
            msg.type = cMsg_Escape;
         endif;

         // Process optional/omissible message parameter
         if (%parms() >= p_msg);
            CEETSTA(isPresent: p_msg: *omit);
            if (isPresent = 1);
               o_msg = msg;
            endif;
         else;
            if (msg.ID <> cMSG_ID_OK);
               f_sndPgmMsg(msg: cMsg_Prv);
            endif;
         endif;

         return isStarted;

      /END-FREE
      *
     P Synchronisation_start...
     P                 E
      *
      *=========================================================================
      *  End synchronisation and release lock.
      *=========================================================================
     P Synchronisation_end...
     P                 B                   export
      *
     D Synchronisation_end...
     D                 PI
     D  io_ticket                                 likeds(LOG4RPG_syncTicket_t )
     D  o_msg                                     likeds(msg_t )
     D                                            options(*nopass: *omit)
      *
      *  Parameter positions
     D p_msg           C                   const(2)
      *
      *  Optional parameter fields
     D msg             DS                  likeds(o_msg     ) inz
      *
      *  Helper fields
     D isPresent       S             10I 0 inz
     D rcvm0200        DS                  likeds(rcvm0200_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         msg = f_newMsg(cMSG_ID_OK);

         dou '1';

            monitor;
               if (g_isLogMode);
                  in *lock g_syncData;
               else;
                  unlock g_syncData;
               endif;
            on-error;
               rcvm0200 = f_rcvPgmMsg(cMsg_Escape: *omit: cMsg_Act_Old);
               msg = f_cvtRcvMsgToMsg(rcvm0200);
               leave;
            endmon;

            if (g_isLogMode);
               p_assert(io_ticket.jobName = g_syncData.jobName and
                        io_ticket.alcTime = g_syncData.alcTime
                        : 'Invalid ticket data when attempting +
                           to release sync lock');

               clear g_syncData;
               out g_syncData;
            endif;

            clear io_ticket;
         enddo;

         if (msg.ID <> cMSG_ID_OK);
            msg.type = cMsg_Escape;
         endif;

         // Process optional/omissible message parameter
         if (%parms() >= p_msg);
            CEETSTA(isPresent: p_msg: *omit);
            if (isPresent = 1);
               o_msg = msg;
            endif;
         else;
            if (msg.ID <> cMSG_ID_OK);
               f_sndPgmMsg(msg: cMsg_Prv);
            endif;
         endif;

         return;

      /END-FREE
      *
     P Synchronisation_end...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG98  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG98 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: Option Converter        "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: Option Converter                         *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  22.04.2008                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG98
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QLOG4RPG,CLIB                          C-Library
      /COPY QBASICS1,PBASICS1                      Basic RPG Extensions
      /COPY QLOG4RPG,PLOG4RPG10                    LogLog
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Program status data structure
      * -----------------------------------------
      *
      *=========================================================================
      *  Converts a given property to a file-size-value.
      *=========================================================================
      *  Example:   512   ->   512 byte
      *             512KB ->   512 kByte
      *             512MB ->   512 MByte
      *             512GB ->   512 GByte
      *=========================================================================
     P OptionConverter_toFileSize...
     P                 B                   export
      *
     D OptionConverter_toFileSize...
     D                 PI            20I 0
     D  i_value                            value  like(LOG4RPG_Property_value_t)
     D  i_default                    20I 0 value
      *
      *  Return value
     D fileSize        S             20I 0 inz
      *
      *  Helper fields
     D string          S                   like(i_value)
     D multiplier      S             10I 0 inz
     D index           S             10I 0 inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         string = %trim(i_value);

         if (string = '');
            return i_default;
         endif;

         string = f_ucase(string);
         multiplier = 1;

         dou '1';

            index = %scan('KB': i_value);
            if (index <> 0);
               multiplier = 1024;
               string     = %trimR(%subst(string: 1: index));
               leave;
            endif;

            index = %scan('MB': i_value);
            if (index <> 0);
               multiplier = 1024 * 1024;
               string     = %trimR(%subst(string: 1: index));
               leave;
            endif;

            index = %scan('GB': i_value);
            if (index <> 0);
               multiplier = 1024 * 1024 * 1024;
               string     = %trimR(%subst(string: 1: index));
               leave;
            endif;

            index = %check('0123456789 ': string);
            if (index > 0);
               LogLog_error('[' + string + '] is not in proper int form.');
               LogLog_error('[' + i_value + '] not in expected format.');
            endif;

         enddo;

         if (string = '');
            return i_default;
         endif;

         monitor;
            fileSize = atoi(string) * multiplier;
         on-error;
            LogLog_error('[' + string + '] is not in proper int form.');
            LogLog_error('[' + i_value + '] not in expected format.');
         endmon;

         if (fileSize = 0);
            return i_default;
         endif;

         return fileSize;

      /END-FREE
      *
     P OptionConverter_toFileSize...
     P                 E
      *
      *=========================================================================
      *  Converts a given property to a RPG boolean value.
      *=========================================================================
      *  Example:   0     ->   cFalse
      *             1     ->   cTrue
      *             false ->   cFalse
      *             true  ->   cTrue
      *=========================================================================
     P OptionConverter_toBoolean...
     P                 B                   export
      *
     D OptionConverter_toBoolean...
     D                 PI              N
     D  i_value                            value  like(LOG4RPG_Property_value_t)
     D  i_default                      N   value
      *
      *  Helper fields
     D string          S                   like(i_value)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         string = %trim(i_value);

         if (string = '');
            return i_default;
         endif;

         string = f_lcase(string);

         select;
         when (string = '1' or string = 'true');
            return cTrue;
         when (string = '0' or string = 'false');
            return cFalse;
         endsl;

         return i_default;

      /END-FREE
      *
     P OptionConverter_toBoolean...
     P                 E
      *
      *=========================================================================
      *  Converts a given property to a RPG integer value.
      *=========================================================================
     P OptionConverter_toInt...
     P                 B                   export
      *
     D OptionConverter_toInt...
     D                 PI            10I 0
     D  i_value                            value  like(LOG4RPG_Property_value_t)
     D  i_default                    10I 0 value
      *
      *  Helper fields
     D string          S                   like(i_value)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         string = %trim(i_value);

         if (string = '');
            return i_default;
         endif;

         return f_val(string);

      /END-FREE
      *
     P OptionConverter_toInt...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4RPG99  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4RPG99 "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: Helper                  "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: Helper                                   *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  13.06.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *  08.11.2008  Th.Raddatz    Added procedure: getObject()             *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG99
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QBASICS1,PBASICS1                      Basic RPG Extensions
      /COPY QLOG4RPG,PLOG4RPG10                    LogLog
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
     D cOBJ_NAME_START_COMMENT_CHARS...
     D                 C                   ' ;!'
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Program status data structure
      * -----------------------------------------
      /DEFINE SDS_EXTENDED
      /COPY QLOG4RPG,SDS
      /UNDEFINE SDS_EXTENDED
      *
      *=========================================================================
      *  Retrieves the qualified name of the service program from the
      *  string that specifies the service program and the procedure prefix.
      *=========================================================================
      *  Example:   *LIBL/LOG4RPG(DailyRollingFileAppender)
      *             *LIBL/LOG4RPG.DailyRollingFileAppender
      *=========================================================================
     P getSrvPgm...
     P                 B                   export
      *
     D getSrvPgm...
     D                 PI                         likeds(qObj_t      )
     D  i_value                            const  like(LOG4RPG_Property_value_t)
      *
      *  Return value
     D srvPgm          DS                  likeds(qObj_t   ) inz
      *
      *  Helper fields
     D x               S             10I 0                 inz
     D value           S                   like(i_value  ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         value = i_value;

         // Get library name ...
         x = %scan('/': value);
         if x > 1;
            srvPgm.lib = %subst(value: 1: x - 1);
            if %len(value) > x;
               value = %subst(value: x + 1);
            endif;
         else;
            srvPgm.lib = '*LIBL';
         endif;

         // Get service program name ...
         x = %scan('(': value);
         if x > 1;
            srvPgm.name = %subst(value: 1: x - 1);
         else;
            srvPgm.name = sds.pgmContProc;
         endif;

         return srvPgm;

      /END-FREE
      *
     P getSrvPgm...
     P                 E
      *
      *=========================================================================
      *  Retrieves the procedure prefix from the string that specifies
      *  the service program and the procedure prefix.
      *=========================================================================
      *  Example:   *LIBL/LOG4RPG(DailyRollingFileAppender)
      *             *LIBL/LOG4RPG.DailyRollingFileAppender
      *=========================================================================
     P getProcedure...
     P                 B                   export
      *
     D getProcedure...
     D                 PI                         like(LOG4RPG_procedure_t     )
     D  i_value                            const  like(LOG4RPG_Property_value_t)
      *
      *  Return value
     D procedure       S                   like(LOG4RPG_procedure_t  ) inz
      *
      *  Helper fields
     D start           S             10I 0                 inz
     D length          S             10I 0                 inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Get procedure prefix ...
         start = %scan('(': i_value);
         if start > 0 and start < %len(i_value);
            start  = start + 1;
            length = %scan(')': i_value: start);
            if length > 0;
               length = length - start;
            endif;
         else;
            start  = 1;
            length = %len(i_value);
         endif;

         if length > 0;
            procedure = %subst(i_value: start: length);
         else;
            procedure = '';
         endif;

         return procedure;

      /END-FREE
      *
     P getProcedure...
     P                 E
      *
      *=========================================================================
      *  Returns the qualified object name from a string that specifies
      *  an object.
      *=========================================================================
      *  Example:   *LIBL/LOG4RPG   -->   qObj.name = 'LOG4RPG'
      *                                   qObj.lib  = '*LIBL'
      *=========================================================================
     P getObject...
     P                 B                   export
      *
     D getObject...
     D                 PI                         likeds(qObj_t      )
     D  i_value                            const  like(LOG4RPG_Property_value_t)
      *
      *  Return value
     D qObj            DS                  likeds(qObj_t   ) inz
      *
      *  Helper fields
     D x               S             10I 0                 inz
     D y               S             10I 0                 inz
     D value           S                   like(i_value  ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         value = %trimR(i_value);

         x = %scan('/': value);
         if (x = 0);
            qObj.name = value;
         else;
            if (x > 1);
               qObj.lib = %subst(value: 1: x-1);
            endif;
            if (x < %len(value));
               qObj.name = %subst(value: x+1);
            endif;
         endif;

         // Remove trailing comments from object name e.g.:
         //    QGPL/QRPGLESRC; a comment
         //    QGPL/QRPGLESRC  # a comment
         //    QGPL/QRPGLESRC  ! a comment
         for x = 1 to %len(qObj.name);
            y = %scan(%subst(qObj.name: x: 1): cOBJ_NAME_START_COMMENT_CHARS);
            if (y <> 0);
               if (x = 1);
                  qObj.name = '';
               else;
                  qObj.Name = %subst(qObj.name: 1: x-1);
               endif;
            endif;
         endfor;

         return qObj;

      /END-FREE
      *
     P getObject...
     P                 E
      *
      *=========================================================================
      *  Returns the name of the procedure that called LOG4RPG.
      *=========================================================================
     P getCallingProcedure...
     P                 B                   export
      *
     D getCallingProcedure...
     D                 PI                         likeds(LOG4RPG_caller_t)
      *
      *  Return value
     D caller          DS                  likeds(LOG4RPG_caller_t) inz
      *
      *  Helper fields
     D x               S             10I 0 inz
     D y               S             10I 0 inz
     D memSize         S             10I 0 inz
     D me              DS                  likeds(qObj_t)
      *
      *  Retrieve Call Stack (QWVRCSTK) API
     D QWVRCSTK...
     D                 PR                         extpgm('QWVRCSTK')
     D  o_rcvVar                  32767A          options(*varsize)
     D  i_rcvVarLen                  10I 0 const
     D  i_format                      8A   const
     D  i_job                     32767A   const  options(*varsize)
     D  i_jobFormat                   8A   const
     D  io_errCode                32767A          options(*varsize)
      *
     D errCode         DS                  likeds(errCode_t) inz
      *
     D jidf0100        DS                  qualified   inz
     D  job                          10A
     D  user                         10A
     D  nbr                           6A
     D  intJobID                     16A
     D  reserved_1                    2A
     D  thdInd                       10I 0
     D  thdID                         8A
      *
     D cstk0100        DS                  qualified   based(pCstk0100)
     D  bytRet                       10I 0
     D  bytAvl                       10I 0
     D  numStkE                      10I 0
     D  ofsStkEInf                   10I 0
     D  numStkERet                   10I 0
     D  thdID                         8A
     D  infStat                       1A
      *
     D stackE          DS                  qualified   based(pStackE  )
     D  length                       10I 0
     D  disStmtID                    10I 0
     D  numStmtID                    10I 0
     D  disProcName                  10I 0
     D  lenProcName                  10I 0
     D  reqLevel                     10I 0
     D  pgmName                      10A
     D  pgmLibName                   10A
     D  MIInstNbr                    10I 0
     D  modName                      10A
     D  modLibName                   10A
     D  ctlBdy                        1A
     D  reserved_1                    3A
     D  actGrpNbr                    10U 0
     D  actGrpName                   10A
      *
     D stmtID          S             10A               based(pStmtID  )
      *
     D procName        S            256A               based(pProcName)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Materialize call stack
         clear errCode;
         clear jidf0100;
         jidf0100.job        = '*';
         jidf0100.user       = '';
         jidf0100.nbr        = '';
         jidf0100.intJobID   = '';
         jidf0100.reserved_1 = *ALLx'00';
         jidf0100.thdInd     = 1;
         jidf0100.thdID      = *ALLx'00';

         // Check, how much memory we need.
         // Get an initial buffer of 4k.
         // Actually we should need about 2300 byte.
         memSize = 4096;
         pCstk0100 = %alloc(memsize);
         QWVRCSTK(cstk0100: memSize: 'CSTK0100': jidf0100: 'JIDF0100': errCode);

         // Call API again, providing enough memory for it
         if cstk0100.bytRet < cstk0100.bytAvl;
            memSize = cstk0100.bytAvl;
            pCstk0100 = %realloc(pCstk0100: memSize);
            QWVRCSTK(cstk0100:memSize:'CSTK0100':jidf0100:'JIDF0100':errCode);
            LogLog_debug('*** Performance problem encountered: +
                          Needed to reallocate memory to get +
                          full stack information.');
         endif;

         // Spin through the call stack entries searching for the caller
         clear me;
         clear caller;
         for x = 1 to cstk0100.numStkE;
            if x = 1;
               pStackE = pCstk0100 + cstk0100.ofsStkEInf;
            else;
               pStackE = pStackE + stackE.length;
            endif;

            pStmtID   = pStackE + stackE.disStmtID;
            pProcName = pStackE + stackE.disProcName;

            if (stackE.pgmName = sds.pgmContProc) and
               (stackE.pgmLibName = sds.pgmLib  );
               me.name        = stackE.pgmName;
               me.lib         = stackE.pgmLibName;
            else;
               if (me.name <> '') and (me.name <> stackE.pgmName);
                  caller.pgm.name    = stackE.pgmName;
                  caller.pgm.lib     = stackE.pgmLibName;
                  caller.module.name = stackE.modName;
                  caller.module.lib  = stackE.modLibName;
                  caller.procedure   = %subst(procName: 1: stackE.lenProcName);
                  caller.stmtID      = %trim(stmtID);
                  y = %check('0': caller.stmtID);
                  if y > 0;
                     caller.stmtID = %subst(caller.stmtID: y);
                  endif;
                  leave;
               endif;
            endif;
         endfor;

         dealloc(N) pCstk0100;

         return caller;

      /END-FREE
      *
     P getCallingProcedure...
     P                 E
      *
      *===============================================================*
      *  Translates charcaters of the logger name.
      *===============================================================*
     P translateLoggerName...
     P                 B                   export
      *
     D translateLoggerName...
     D                 PI                         like(LOG4RPG_loggerName_t)
     D  i_logName                          const  like(LOG4RPG_loggerName_t)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return %xlate('/\': '..': f_lcase(i_logName));

      /END-FREE
      *
     P translateLoggerName...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4SCKAPP  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4SCKAPP"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: XMLSocketAppender       "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PROTOTYPES_ONLY)
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: XMLSocketAppender                        *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  17.10.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *  15.11.2006  Th.Raddatz    Fixed probem that parameter 'ccsid'      *
      *                            was not properly handled. Changed        *
      *                            XMLSocketAppender_setProperties()        *
      *                            to correctly call initIconv().           *
      *                                                                     *
      *  08.01.2007  Th.Raddatz    Added property 'reconnectionDelay' to    *
      *                            XMLSocketAppender. Default reconnection  *
      *                            delay is 30.000 milliseconds = 30        *
      *                            seconds.                                 *
      *                                                                     *
      *  07.03.2007  Th.Raddatz    Added property 'connectTimeout' to       *
      *                            XMLSocketAppender. Default connection    *
      *                            timeout is 5.000 milliseconds = 5        *
      *                            seconds.                                 *
      *                                                                     *
      *  22.04.2008  Th.Raddatz    Now usinng the OptionConverter to        *
      *                            convert properties.                      *
      *                                                                     *
      *  13.10.2010  Th.Raddatz    Added special host name 'localclient'    *
      *                            to retrieve the TCP/IP address of a      *
      *                            5250 client.                             *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *     >>CMD<<     CRTSRVPGM    SRVPGM(&LI/&OB) +                      *
      *                              MODULE(&LI/&OB  +                      *
      *                                     &LI/LOG4SOCK) +                 *
      *                              EXPORT(*ALL) +                         *
      *                              ACTGRP(*CALLER) +                      *
      *                              ALWUPD(*YES) +                         *
      *                              ALWLIBUPD(*YES) +                      *
      *                              BNDDIR(QC2LE) +                        *
      *                              BNDSRVPGM(&LI/LOG4RPG   +              *
      *                                        &LI/BASICS1 ) +              *
      *                              TEXT('Tools/400 - Log4rpg +            *
      *                                    XMLSocketAppender          ') +  *
      *                              DETAIL(*BASIC);                        *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      /COPY QLOG4RPG,COPYRIGHT
      *=====================================================================*
      /ENDIF
      *
      *  Creates a new XMLSocketAppender.
     D XMLSocketAppender_new...
     D                 PR              N   extproc('XMLSocketAppender+
     D                                     _new')
     D  i_pSuper                           const  like(LOG4RPG_pAppender_t     )
     D  io_pHandle                     *
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Returns TRUE if the appender requires a layout.
     D XMLSocketAppender_requiresLayout...
     D                 PR              N   extproc('XMLSocketAppender+
     D                                     _requiresLayout')
     D  i_pHandle                      *   const
      *
      *  Appends a message to the XMLSocketAppender.
     D XMLSocketAppender_doAppend...
     D                 PR              N   extproc('XMLSocketAppender+
     D                                     _doAppend')
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const like(LOG4RPG_pLogEvent_t )
      *
      *  Used to set the properties of the appender.
     D XMLSocketAppender_setProperties...
     D                 PR                  extproc('XMLSocketAppender+
     D                                     _setProperties')
     D  i_pHandle                      *   const
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Deletes a given XMLSocketAppender.
     D XMLSocketAppender_delete...
     D                 PR              N   extproc('XMLSocketAppender+
     D                                     _delete')
     D  io_pHandle                     *
      *
      /IF DEFINED(PROTOTYPES_ONLY)
      /EOF
      /ENDIF
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG52
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG                     Public interface & type definitions
      *
     D handle_t...
     D                 DS                  qualified           based(pDummy)
     D  pSuper                             like(LOG4RPG_pAppender_t)
     D  isOpen                         N
     D  host                        128A   varying
     D  IP                           10U 0
     D  port                         10U 0
     D  sockDesc                     10I 0
     D  ccsid                        10I 0
     D  connTimeout                  10I 0
     D  reConnDelay                  10I 0
     D  lastConnTime                   Z
     D  isIconv                        N
     D  hIconv                             likeds(iconv_t )
      *
      * -----------------------------------------
      *  Socket type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4SOCK
      *
      *  close()--Close File or Socket Descriptor
      *     returns:     0  close() was successful.
      *                 -1  close() was not successful.
      *                     The errno global variable is set to indicate the error.
     D closeSocket...
     D                 PR            10I 0 extproc('close')
     D  i_sockDesc                   10I 0 value
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QLOG4RPG,CLIB                         C-Library
      *
      /COPY QLOG4RPG,PLOG4RPG07                   PropertyList
      /COPY QLOG4RPG,PLOG4RPG10                   LogLog
      /COPY QLOG4RPG,PLOG4RPG98                   OptionConverter
      /COPY QLOG4RPG,PLOG4RPG99                   Helper
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      *  Opens a XMLSocketAppender for output.
     D openAppender...
     D                 PR              N
     D  i_pHandle                      *   const
      *
      *  Closes a XMLSocketAppender.
     D closeAppender...
     D                 PR              N
     D  i_pHandle                      *   const
      *
      *  Initializes charcater translation.
     D initIconv...
     D                 PR              N
     D  io_handle                                 likeds(handle_t )
      *
      *  Loads the configuration parameters from the specified property list.
     D loadConfiguration...
     D                 PR
     D  io_handle                                 likeds(handle_t              )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
     D cTHIS_CLASS...
     D                 C                          const(
     D                                            'XMLSocketAppender')
      *
     D cDEFAULT_PORT...
     D                 C                          const(4448)
     D cDEFAULT_CCSID...
     D                 C                          const(819)
     D cDEFAULT_CONNECTION_TIMEOUT...
     D                 C                          const(5000)
     D cDEFAULT_RECONNECTION_DELAY...
     D                 C                          const(30000)
      *
     D cPARAMETER_REMOTE_HOST...
     D                 C                          const('remotehost')
     D cPARAMETER_PORT...
     D                 C                          const('port')
     D cPARAMETER_CCSID...
     D                 C                          const('ccsid')
     D cPARAMETER_RECONNECTION_DELAY...
     D                 C                          const('reconnectiondelay')
     D cPARAMETER_CONNECT_TIMEOUT...
     D                 C                          const('connecttimeout')
      *
     D cSOCKET_NULL...
     D                 C                          const(-1)
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      *=====================================================================*
      *  Creates a new XMLSocketAppender.
      *=====================================================================*
      *  Parameters:
      *   io_pHandle    - Handle that is passed around the various calls to
      *                   this XMLSocketAppender.
      *   i_pPropsList  - Handle of the property list that contains the
      *                   properties for the appender.
      *   i_prefix      - Prefix of the relevant property keys.
      *
      *  Returns:
      *   isDone        - Returns TRUE on success, else FALSE.
      *=====================================================================*
     P XMLSocketAppender_new...
     P                 B                   export
      *
     D XMLSocketAppender_new...
     D                 PI              N
     D  i_pSuper                           const  like(LOG4RPG_pAppender_t     )
     D  io_pHandle                     *
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Helper fields
     D tmpHIconv       DS                  likeds(iconv_t  ) inz
     D tmpHandle       DS                  likeds(handle_t ) inz
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(io_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         clear tmpHandle;
         clear tmpHIconv;

         // Initialize handle
         tmpHandle.pSuper          = i_pSuper;   // Handle of the super class 'Appender'
         tmpHandle.isOpen          = cFalse;
         tmpHandle.host            = '';
         tmpHandle.IP              = 0;
         tmpHandle.port            = 4448;
         tmpHandle.sockDesc        = cSOCKET_NULL;
         tmpHandle.ccsid           = 819;
         tmpHandle.connTimeout     = 5000;      // measured in milliseconds
         tmpHandle.reConnDelay     = 30000;     // measured in milliseconds
         tmpHandle.lastConnTime    = *loval;
         tmpHandle.isIconv         = cFalse;
         tmpHandle.hIconv          = tmpHIconv;

         // Initialize handle from configuration properties
         if (i_pPropList <> *NULL) and not PropertyList_isNull(i_pPropList);
            loadConfiguration(tmpHandle: i_pPropList: i_prefix);
         endif;

         // Initialize Character Conversion
         initIconv(tmpHandle);

         // Create appender handle
         io_pHandle = %alloc(%size(tmpHandle));
         handle = tmpHandle;

         LogLog_debug('Loaded instance of [' + cTHIS_CLASS + '].');

         return isDone;

      /END-FREE
      *
     P XMLSocketAppender_new...
     P                 E
      *
      *=====================================================================*
      *  Returns TRUE if the appender requires a layout.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this XMLSocketAppender.
      *
      *  Returns:
      *   isDone        - Returns TRUE if the appender requires a layout,
      *                   else FALSE.
      *=====================================================================*
     P XMLSocketAppender_requiresLayout...
     P                 B                   export
      *
     D XMLSocketAppender_requiresLayout...
     D                 PI              N
     D  i_pHandle                      *   const
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return cTrue;

      /END-FREE
      *
     P XMLSocketAppender_requiresLayout...
     P                 E
      *
      *=====================================================================*
      *  Appends a message to the XMLSocketAppender.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this XMLSocketAppender.
      *   i_pLogEvent   - Handle of the Log event returned by LogEvent_new().
      *
      *  Returns:
      *   isDone        - Returns TRUE on success, else FALSE.
      *=====================================================================*
     P XMLSocketAppender_doAppend...
     P                 B                   export
      *
     D XMLSocketAppender_doAppend...
     D                 PI              N
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const like(LOG4RPG_pLogEvent_t )
      *
      *  Helper fields
     D rc              S             10I 0 inz
     D rc_iconv        S             10U 0 inz
     D errno           S             10I 0 inz
     D pInpBuf         S               *   inz
     D pOutBuf         S               *   inz
     D inpLength       S             10U 0 inz
     D outLength       S             10U 0 inz
     D inBufLen        S             10U 0 inz
     D outBufLen       S             10U 0 inz
     D pOutBufStart    S               *   inz
     D pInpBufStart    S               *   inz
     D msg             DS                  likeds(msg_t    ) inz
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      *
     D CRLF            C                   const(x'0D25')
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return if there is no text
         if LogEvent_textLength(i_pLogEvent) = 0;
            return cTrue;
         endif;

         // Open the appender for output if it is not yet open
         if not handle.isOpen;
            if (handle.lastConnTime +
                %mseconds(handle.reConnDelay * 1000) <= %timestamp());
               if not openAppender(i_pHandle);
                  LogLog_error('Trying to connect to host again in ' +
                               %char(%int(handle.reConnDelay)) + ' ms.');
                  handle.lastConnTime = %timestamp();
                  return cFalse;
               endif;
            else;
               return cFalse;
            endif;
         endif;

         monitor;
            // Add CRLF to log Event
            LogEvent_appendText(i_pLogEvent: CRLF);
            // Copy log event text to buffer
            inpLength = LogEvent_textLength(i_pLogEvent);
            pInpBuf   = LogEvent_getTextPointer(i_pLogEvent);
            outLength = %int(inpLength * 2);  // Ensure enough memory for UTF-8
            pOutBuf   = %alloc(outLength);
            inBufLen  = inpLength;
            pInpBufStart = pInpBuf;
            outBufLen = outLength;
            pOutBufStart = pOutBuf;
            rc_iconv = iconv(handle.hIconv: pInpBufStart: inBufLen
                                          : pOutBufStart: outBufLen);
            if rc_iconv <> 0;
               LogLog_error('iconv() returned with rc = ' + %char(rc_iconv));
            endif;

            // Write to socket.
            rc = send(handle.sockDesc: pOutBuf: outLength - outBufLen: 0);
            p_assert(rc = outLength - outBufLen
                     : 'Not all bytes send to network');
         on-error;
            // Do nothing here
         endmon;

         // Free temporary working area
         if pInpBuf <> *NULL;
            dealloc(N) pInpBuf;
         endif;

         if pOutBuf <> *NULL;
            dealloc(N) pOutBuf;
         endif;

         // Check return code of send() procedure
         if rc < 0;
            errno = f_errno();
            LogLog_error('Failed to send logEevent to host [' +
                         handle.host + ':' + %char(handle.port) + ']');
            msg = f_cvtErrnoToMsg(errno);
            LogLog_errorMsg(msg);

            if errno = EPIPE_C;   // Broken pipe
               if handle.isOpen;
                  if closeAppender(i_pHandle);
                     handle.lastConnTime = *loval;
                  endif;
               endif;
            endif;

            return cFalse;
         endif;

         return cTrue;

      /END-FREE
      *
     P XMLSocketAppender_doAppend...
     P                 E
      *
      *=====================================================================*
      *  Used to set the properties of the appender.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this XMLSocketAppender.
      *   i_pPropsList  - Handle of the property list that contains the
      *                   properties for the appender.
      *   i_prefix      - Prefix of the relevant property keys.
      *
      *  Returns:
      *   void
      *=====================================================================*
     P XMLSocketAppender_setProperties...
     P                 B                   export
      *
     D XMLSocketAppender_setProperties...
     D                 PI
     D  i_pHandle                      *   const
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Helper fields
     D oldCcsid        S                   like(handle.ccsid) inz
      *
      *  XMLSocketAppender-Handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         oldCcsid = handle.ccsid;

         loadConfiguration(handle: i_pPropList: i_prefix);

         if oldCcsid <> handle.ccsid;

            if handle.isIconv;
               if iconv_close(handle.hIconv) = 0;
                  handle.isIconv = cFalse;
               endif;
            endif;

            if not handle.isIconv;
               initIconv(handle);
            endif;

         endif;

         return;

      /END-FREE
      *
     P XMLSocketAppender_setProperties...
     P                 E
      *
      *=====================================================================*
      *  Deletes a given XMLSocketAppender.
      *=====================================================================*
      *  Parameters:
      *   io_pHandle    - Handle that is passed around the various calls to
      *                   this XMLSocketAppender.
      *
      *  Returns:
      *   void
      *=====================================================================*
     P XMLSocketAppender_delete...
     P                 B                   export
      *
     D XMLSocketAppender_delete...
     D                 PI              N
     D  io_pHandle                     *
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(io_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Close socket if it is left open
         if handle.isOpen;
            if closeAppender(io_pHandle);
               handle.lastConnTime = *loval;
            endif;
         endif;

         // End character conversion
         if handle.isIconv;
            iconv_close(handle.hIconv);
            handle.isIconv = cFalse;
         endif;

         // Clear handle data
         clear handle;

         // Free handle memory
         dealloc(N) io_pHandle;

         LogLog_verbose('Deleted instance of [' + cTHIS_CLASS + '].');

         isDone = cTrue;

         return isDone;

      /END-FREE
      *
     P XMLSocketAppender_delete...
     P                 E
      *
      *=====================================================================*
    R *  *** Private ***
      *  Opens a XMLSocketAppender for output.
      *=====================================================================*
     P openAppender...
     P                 B
      *
     D openAppender...
     D                 PI              N
     D  i_pHandle                      *   const
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      *
      *  Helper fields
     D rc              S             10I 0 inz
     D tmpIPLong       S             10U 0 inz
     D tmpSockDesc     S             10I 0 inz
     D flags           S             10I 0 inz
     D errVal          S             10I 0 inz
     D optLen          S             10I 0 inz
     D waittime        DS                  likeds(timeval_t     ) inz
     D writeSet        S                   like(socket_fdSet_t  ) inz
     D tmpHost         S                   like(handle.host     ) inz
      *
     D hostent         DS                  likeds(hostent_t) based(pHostent)
     D p1HostAdr       S               *   based(hostent.h_addrlist)
     D hostAdr         S             10U 0 based(p1HostAdr)
      *
     D sockAddr        DS                  likeds(sockaddr_in_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Resolve host name to IP address long
         if handle.IP = 0;
            tmpIPLong = inet_addr(handle.host);
            if tmpIPLong = INADDR_NONE;
               tmpIPLong = 0;

               if (f_lcase(handle.host) = 'localclient');
                  tmpHost = Job_getTcpIpAddr();
                  if (tmpHost = '');
                     LogLog_error('Failed to resolve  host [' +
                                   handle.host + ']');
                     return cFalse;
                  endif;
                  tmpIPLong = inet_addr(tmpHost);
               else;
                  pHostent = gethostbyname(handle.host);
                  if pHostent = *NULL;
                     LogLog_error('Failed to resolve  host [' +
                                   handle.host + ']');
                     return cFalse;
                  endif;

                  tmpIPLong = hostAdr;
               endif;

            endif;

            handle.IP = tmpIPLong;
         endif;

         // Create socket
         rc = socket(AF_INET: SOCK_STREAM: IPPROTO_IP);
         if rc < 0;
            LogLog_error('Failed to create socket for connection to host [' +
                          handle.host + ':' + %char(handle.port) + ']');
            return cFalse;
         endif;

         tmpSockDesc = rc;

         LogLog_debug('Created socket [' + %char(tmpSockDesc) +
                      '] to host [' + handle.host  + ':' +
                                      %char(handle.port) + ']');

         // Turn socket into non-blocking mode
         flags = fcntl(tmpSockDesc: F_GETFL);
         if flags < 0;
            LogLog_warning('Failed to retrieve socket flags');
         endif;

         flags = %bitor(flags: O_NONBLOCK);

         if fcntl(tmpSockDesc: F_SETFL: flags) < 0;
            LogLog_warning('Failed to set socket flags');
         endif;

         // Connect to host
         sockAddr.sin_Family = AF_INET;
         sockAddr.sin_Port   = handle.port;
         sockAddr.sin_addr   = handle.IP;
         sockAddr.sin_zero   = *ALLx'00';
         rc = connect(tmpSockDesc: %addr(sockAddr): %size(sockAddr));
         if rc < 0;
            if f_errno() = EINPROGRESS_C;
               waittime.tv_sec  = handle.connTimeout / 1000;
               waittime.tv_usec = %rem(handle.connTimeout: 1000) * 1000;
               FD_ZERO(writeSet);
               FD_SET(tmpSockDesc: writeSet);
               rc = select(tmpSockDesc + 1: *NULL
                                          : %addr(writeSet)
                                          : *NULL
                                          : %addr(waittime));
               select;
               when rc = 0;   // Timeout
                  closeSocket(tmpSockDesc);
                  LogLog_error('Time limit expired after ' +
                                          %char(handle.connTimeout) +
                               ' ms when trying to connect to +
                                host [' + handle.host + ':' +
                                          %char(handle.port) + ']');
                  return cFalse;
               when rc > 0;   // Connected!
                  optLen = %size(errVal);
                  getsockopt(tmpSockDesc: SOL_SOCKET: SO_ERROR
                             : %addr(errVal): optLen);
                  if errVal <> 0;
                     closeSocket(tmpSockDesc);
                     LogLog_error('Failed to connect to host [' +
                                   handle.host + ':' + %char(handle.port) +']');
                     LogLog_error('--> ' + %char(errVal) + ': ' +
                                           f_strerror(errVal) );
                     return cFalse;
                  endif;
               other;         // Error
                  closeSocket(tmpSockDesc);
                  LogLog_error('Failed to connect to host [' +
                                handle.host + ':' + %char(handle.port) + ']');
                  LogLog_error('--> ' + %char(f_errno()) + ': ' +
                                        f_strerror(f_errno()) );
                  return cFalse;
               endsl;
            else;
               closeSocket(tmpSockDesc);
               LogLog_error('Failed to connect to host [' +
                             handle.host + ':' + %char(handle.port) + ']');
               LogLog_error('--> ' + %char(f_errno()) + ': ' +
                                     f_strerror(f_errno()) );
               return cFalse;
            endif;
         endif;

         LogLog_debug('Connected to host [' + handle.host  + ':' +
                                              %char(handle.port) + ']');

         // Turn socket into blocking mode
         flags = fcntl(tmpSockDesc: F_GETFL);
         if flags < 0;
            LogLog_warning('Failed to retrieve socket flags');
         endif;

         flags = %bitand(flags: %bitnot(O_NONBLOCK));

         if fcntl(tmpSockDesc: F_SETFL: flags) < 0;
            LogLog_warning('Failed to set socket flags');
         endif;

         // Set return value
         handle.sockDesc = tmpSockDesc;
         handle.isOpen   = cTrue;

         return cTrue;

      /END-FREE
      *
     P openAppender...
     P                 E
      *
      *=====================================================================*
    R *  *** Private ***
      *  Closes a XMLSocketAppender.
      *=====================================================================*
     P closeAppender...
     P                 B
      *
     D closeAppender...
     D                 PI              N
     D  i_pHandle                      *   const
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if closeSocket(handle.sockDesc) = 0;
            handle.isOpen   = cFalse;
            handle.sockDesc = cSOCKET_NULL;
            isDone = cTrue;
            LogLog_debug('Disconnected from host [' + handle.host  + ':' +
                                                      %char(handle.port) + ']');
         else;
            LogLog_error('Failed to disconnect from host [' +
                          handle.host + ':' + %char(handle.port) + ']');
            LogLog_error('--> ' + %char(f_errno()) + ': ' +
                                  f_strerror(f_errno()) );
            isDone = cFalse;
         endif;

         return isDone;

      /END-FREE
      *
     P closeAppender...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Initializes charcater translation.
      *=========================================================================
     P initIconv...
     P                 B
      *
     D initIconv...
     D                 PI              N
     D  io_handle                                 likeds(handle_t )
      *
      *  Return value
     D isIconv         S               N   inz(cFalse)
      *
      *  Local fields
     D tmpHIconv       DS                  likeds(iconv_t  ) inz
     D fromCode        DS                  likeds(QtqCode_t) inz
     D toCode          DS                  likeds(QtqCode_t) inz
     D msg             DS                  likeds(msg_t    ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         clear tmpHIconv;

         clear fromCode;
         fromCode.ccsid         = 0;
         fromCode.conversionA   = 0;
         fromCode.substitutionA = 0;
         fromCode.shiftStateA   = 1;
         fromCode.inpLenOpt     = 0;
         fromCode.errOptMxdDta  = 1;
         fromCode.reserved      = *ALLx'00';

         clear toCode;
         toCode.ccsid         = io_handle.ccsid;
         toCode.conversionA   = 0;
         toCode.substitutionA = 0;
         toCode.shiftStateA   = 0;
         toCode.inpLenOpt     = 0;
         toCode.errOptMxdDta  = 0;
         toCode.reserved      =   *ALLx'00';

         tmpHIconv = QtqIconv_open(toCode: fromCode);
         if tmpHIconv.return_value = -1;
            LogLog_error('Failed to initialize character conversion');
            msg = f_cvtErrnoToMsg(f_errno());
            LogLog_errorMsg(msg);
            io_handle.isIconv = cFalse;
         else;
            LogLog_debug('Initialized character translation for CCSID=' +
                         %char(io_handle.ccsid));
            io_handle.isIconv = cTrue;
            io_handle.hIconv  = tmpHIconv;
         endif;

         isIconv = io_handle.isIconv;

         return isIconv;

      /END-FREE
      *
     P initIconv...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Loads the configuration parameters from the specified property list.
      *=========================================================================
     P loadConfiguration...
     P                 B
      *
     D loadConfiguration...
     D                 PI
     D  io_handle                                 likeds(handle_t              )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Local fields
     D parameter       S                   like(property.key        ) inz
     D prefix          S                   like(i_prefix            ) inz
     D property        DS                  likeds(LOG4RPG_property_t) inz
     D propIter        DS                  likeds(LOG4RPG_Property...
     D                                                    ListIterator_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         prefix = f_lcase(i_prefix);

         propIter = PropertyList_getIterator(i_pPropList);

         property = PropertyList_getFirst(propIter);

         dow property.key <> '';

            if (prefix = '') or (f_startsWith(prefix: property.key) and
 B03                             %len(property.key) > %len(prefix));

               parameter = f_lcase(%subst(property.key: %len(prefix) + 1));

               select;
               when parameter = cPARAMETER_REMOTE_HOST;
                  io_handle.host        = property.value;
               when parameter = cPARAMETER_PORT;
                  io_handle.port =
                     OptionConverter_toInt(
                        property.value: cDEFAULT_PORT);
               when parameter = cPARAMETER_CCSID;
                  io_handle.ccsid =
                     OptionConverter_toInt(
                        property.value: cDEFAULT_CCSID);
               when parameter = cPARAMETER_RECONNECTION_DELAY;
                  io_handle.reConnDelay =
                     OptionConverter_toInt(
                        property.value: cDEFAULT_RECONNECTION_DELAY);
               when parameter = cPARAMETER_CONNECT_TIMEOUT;
                  io_handle.connTimeout =
                     OptionConverter_toInt(
                        property.value: cDEFAULT_CONNECTION_TIMEOUT);
               when Appender_knowsProperty(parameter);
 B03              // Ignore all parameters known by super Appender class
               other;
                  LogLog_warning('No such property ['     +
                                  property.key            +
                                 '] in [' + cTHIS_CLASS + ']');
               endsl;

            endif;

            property = PropertyList_getNext(propIter);
         enddo;

         return;

      /END-FREE
      *
     P loadConfiguration...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4SHBAPC  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4SHBAPC"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: XMLSocketHubAppender    "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PROTOTYPES_ONLY)
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: XMLSocketHubAppender - Child Process     *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  14.11.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *     >>CMD<<     CRTPGM       PGM(&LI/&OB) +                         *
      *                              MODULE(&LI/&OB        +                *
      *                                     &LI/LOG4SOCK ) +                *
      *                              ACTGRP(*NEW) +                         *
      *                              BNDDIR(QC2LE) +                        *
      *                              BNDSRVPGM(*LIBL/LOG4RPG   +            *
      *                                        *LIBL/BASICS1 ) +            *
      *                              TEXT('Tools/400 - Log4rpg +            *
      *                                    XMLSocketHubAppender       ') +  *
      *                              DETAIL(*BASIC);                        *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /DEFINE UNIT_TEST
      /COPY QLOG4RPG,H_SPEC
      /COPY QLOG4RPG,COPYRIGHT
      *=====================================================================*
      /ENDIF
      *
      *  Program entry point
     D PGM_ENTRY_POINT...
     D                 PR                  extpgm('LOG4SHBAPC')
     D  gi_pipe                      10A   const
     D  gi_port                      10A   const
     D  gi_debugMode                 10A   const
     D  gi_output                    10A   const
      *
      /IF DEFINED(PROTOTYPES_ONLY)
      /EOF
      /ENDIF
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
     D buffer_t        S           2048A                           based(pDummy)
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QLOG4RPG,CLIB                          C-Library
      /COPY QBASICS1,PBASICS1                      Basic RPG Extensions
      *
      /COPY QLOG4RPG,PLOG4RPG                      Public interface & type definitions
      /COPY QLOG4RPG,PLOG4RPG10                    LogLog
      /COPY QLOG4RPG,PLOG4SOCK                     Socket Functions
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
     D XMLSocketHubAppender_childProcess...
     D                 PR
     D  i_pipe                       10I 0 value
     D  i_port                       10I 0 value
     D  i_debugMode                        value  like(LOG4RPG_debugMode_t  )
     D  i_output                           value  like(LOG4RPG_debugOutput_t)
      *
      *  Initializes client sockets.
     D initClients...
     D                 PR
     D  io_clients                   10I 0        dim(cMAX_CLIENTS)
      *
      *  Forward data to clients.
     D doCLients...
     D                 PR
     D  io_clients                   10I 0        dim(cMAX_CLIENTS)
     D  i_writeSet                         const  like(socket_fdSet_t)
     D  i_pBuffer                      *   const
     D  i_length                     10I 0 const
      *
      *  Closes client sockets.
     D closeClients...
     D                 PR
     D  io_clients                   10I 0        dim(cMAX_CLIENTS)
      *
      *  Closes client socket.
     D closeClient...
     D                 PR            10I 0
     D  io_client                    10I 0
      *
      *  Creates a new listener socket.
     D createListener...
     D                 PR            10I 0
     D  i_port                       10I 0 value
      *
      *  Produces a new client.
     D acceptClient...
     D                 PR
     D  i_listener                   10I 0 const
     D  io_clients                   10I 0        dim(cMAX_CLIENTS)
      *
      *  Make descritor sets for client descriptors.
     D makeDescSets...
     D                 PR            10I 0
     D  i_pipe                       10I 0 const
     D  i_listener                   10I 0 const
     D  i_clients                    10I 0 const  dim(cMAX_CLIENTS)
     D  o_readSet                                 like(socket_fdSet_t)
     D  o_writeSet                                like(socket_fdSet_t)
     D  o_excpSet                                 like(socket_fdSet_t)
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
     D cMAX_CLIENTS    C                   const(32)
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      *=====================================================================*
      *  XMLSocketHubAppender - Program Entry Point
      *=====================================================================*
      *  Parameters:
      *   gi_pipe       - Read descriptor of pipe of parent process.
      *   gi_port       - Listener port.
      *=====================================================================*
     D PGM_ENTRY_POINT...
     D                 PI
     D  gi_pipe                      10A   const
     D  gi_port                      10A   const
     D  gi_debugMode                 10A   const
     D  gi_output                    10A   const
      *
      *  Helper fields
     D pipe            S             10I 0 inz
     D port            S             10I 0 inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         pipe = atoi(gi_pipe);
         port = atoi(gi_port);

         XMLSocketHubAppender_childProcess(pipe: port: gi_debugMode: gi_output);

         *inlr = *ON;

      /END-FREE
      *
      *=====================================================================*
      *  XMLSocketHubAppender - Child Process
      *=====================================================================*
     P XMLSocketHubAppender_childProcess...
     P                 B
      *
     D XMLSocketHubAppender_childProcess...
     D                 PI
     D  i_pipe                       10I 0 value
     D  i_port                       10I 0 value
     D  i_debugMode                        value  like(LOG4RPG_debugMode_t  )
     D  i_output                           value  like(LOG4RPG_debugOutput_t)
      *
      *  Helper fields
     D rc              S             10I 0 inz
     D maxDesc         S             10I 0 inz
     D readSet         S                   like(socket_fdSet_t) inz
     D writeSet        S                   like(socket_fdSet_t) inz
     D excpSet         S                   like(socket_fdSet_t) inz
     D wait            DS                  likeds(timeval_t   ) inz
      *
     D numBytes        S             10I 0 inz
     D buffer          S                   like(buffer_t  )  inz
      *
      *  Helper fields (house keeping)
     D listener        S             10I 0 inz(SOCKET_NULL)
     D clients         S             10I 0 dim(cMAX_CLIENTS) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Set internal logging to: ON
         Logger_setInternalDebugging(i_debugMode: i_output);

         // Show pipe read descriptor and listener port
         LogLog_verbose('Parameter: debug mode      = ' + i_debugMode);
         LogLog_verbose('Parameter: debug output    = ' + i_output   );
         LogLog_verbose('Parameter: pipe descriptor = ' + %char(i_pipe));
         LogLog_verbose('Parameter: listener port   = ' + %char(i_port));

         // Create listener socket
         listener = createListener(i_port);
         if listener = SOCKET_NULL;
            return;
         endif;

         // Initialize client sockets
         initClients(clients);

         dou %shtdn();

            // Wait for incoming requests
            maxDesc = makeDescSets(i_pipe: listener
                                   : clients: readSet: writeSet: excpSet);

            clear wait;
            wait.tv_sec  = 10;
            wait.tv_usec = 0;
            rc = select(maxDesc + 1
                        : %addr(readSet): *NULL: %addr(excpSet): %addr(wait));
            if rc = SOCKET_ERROR;
               LogLog_error('select()-error: ' + f_strerror(f_errno()));
               leave;
            endif;

            // Test SHUTDOWN requested
            if %shtdn();
               leave;
            endif;

            // Make new client
            if FD_ISSET(listener: readSet);
               acceptClient(listener: clients);
            endif;

            // Receive incoming log event and pass it forward to clients
            if FD_ISSET(i_pipe: readSet);

               // Receive data ...
               clear buffer;
               numBytes = read(i_pipe: %addr(buffer): %size(buffer));
               if numBytes = 0;   // END-OF-FILE ==> shutdown
                  leave;
               endif;

               LogLog_verbose(%char(numBytes) + ' received from pipe');
               LogLog_verbose('-> ' + %trimR(%subst(buffer: 1: 40)) + '...');

               // ... pass forward to clients
               doClients(clients: writeSet: %addr(buffer): numBytes);

            endif;

         enddo;

         if %shtdn();
            LogLog_verbose('Processing SHUTDOWN request ...');
         endif;

         // House keeping ...
         // ... close listener socket
         if listener <> SOCKET_NULL;
            rc = close(listener);
            LogLog_verbose('Listener socket closed: ' + %char(listener));
            listener = SOCKET_NULL;
         endif;

         // ... close client sockets
         closeClients(clients);

         // ... close pipe
         rc = close(i_pipe);
         LogLog_verbose('Pipe closed: ' + %char(i_pipe));

         return;

      /END-FREE
      *
     P XMLSocketHubAppender_childProcess...
     P                 E
      *
      *=====================================================================*
      *  Initializes client sockets.
      *=====================================================================*
     P initClients...
     P                 B
      *
     D initClients...
     D                 PI
     D  io_clients                   10I 0        dim(cMAX_CLIENTS)
      *
      *  Helper fields
     D x               S             10I 0 inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         for x = 1 to cMAX_CLIENTS;
            io_clients(x) = SOCKET_NULL;
         endfor;

         return;

      /END-FREE
      *
     P initClients...
     P                 E
      *
      *=====================================================================*
      *  Forward data to clients.
      *=====================================================================*
     P doClients...
     P                 B
      *
     D doCLients...
     D                 PI
     D  io_clients                   10I 0        dim(cMAX_CLIENTS)
     D  i_writeSet                         const  like(socket_fdSet_t)
     D  i_pBuffer                      *   const
     D  i_length                     10I 0 const
      *
      *  Helper fields
     D x               S             10I 0 inz
     D rc              S             10I 0 inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         for x = 1 to cMAX_CLIENTS;
            if io_clients(x) <> SOCKET_NULL;

               // Test if client is ready
               if FD_ISSET(io_clients(x): i_writeSet);
                  // Forward data to client
                  rc = send(io_clients(x): i_pBuffer: i_length: 0);
               else;
                  rc = SOCKET_ERROR;
               endif;

               // On error close client
               if rc = SOCKET_ERROR;
                  closeClient(io_clients(x));
               endif;

            endif;
         endfor;

         return;

      /END-FREE
      *
     P doClients...
     P                 E
      *
      *=====================================================================*
      *  Closes client sockets.
      *=====================================================================*
     P closeClients...
     P                 B
      *
     D closeClients...
     D                 PI
     D  io_clients                   10I 0        dim(cMAX_CLIENTS)
      *
      *  Helper fields
     D x               S             10I 0 inz
     D rc              S             10I 0 inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         for x = 1 to cMAX_CLIENTS;
            if io_clients(x) <> SOCKET_NULL;
               rc = closeClient(io_clients(x));
            endif;
         endfor;

         return;

      /END-FREE
      *
     P closeClients...
     P                 E
      *
      *=====================================================================*
      *  Closes client socket.
      *=====================================================================*
     P closeClient...
     P                 B
      *
     D closeClient...
     D                 PI            10I 0
     D  io_client                    10I 0
      *
      *  Return value
     D rc              S             10I 0 inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

            rc = close(io_client);

            LogLog_debug('Closed client: ' + %char(io_client));

            io_client = SOCKET_NULL;

         return rc;

      /END-FREE
      *
     P closeClient...
     P                 E
      *
      *=====================================================================*
      *  Creates a new listener socket.
      *=====================================================================*
     P createListener...
     P                 B
      *
     D createListener...
     D                 PI            10I 0
     D  i_port                       10I 0 value
      *
      *  Return value
     D listener        S             10I 0 inz(SOCKET_ERROR)
      *
      *  Helper fields
     D rc              S             10I 0 inz
     D tmpListener     S                   like(listener    ) inz(SOCKET_NULL)
      *
     D sockAddr        DS                  likeds(sockaddr_in_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         dou 1=1;

            LogLog_verbose('Creating listener socket ...');

            tmpListener = socket(AF_INET: SOCK_STREAM: IPPROTO_IP);
            if tmpListener = SOCKET_ERROR;
               LogLog_error('socket()-error: ' + f_strerror(f_errno()));
               leave;
            endif;

            LogLog_verbose('Setting socket option: SO_REUSEADDR');

            rc = setsockopt(tmpListener: SOL_SOCKET
                                       : SO_REUSEADDR
                                       : %addr(i_port)
                                       : %size(i_port));
            if rc = SOCKET_ERROR;
               LogLog_error('setsockopt()-error: ' + f_strerror(f_errno()));
               leave;
            endif;

            LogLog_verbose('Binding socket to port: ' + %char(i_port));

            sockAddr.sin_Family = AF_INET;
            sockAddr.sin_Port   = i_port;
            sockAddr.sin_addr   = INADDR_ANY;
            sockAddr.sin_zero   = *ALLx'00';
            rc = bind(tmpListener: %addr(sockAddr): %size(sockAddr));
            if rc = SOCKET_ERROR;
               LogLog_error('bind()-error: ' + f_strerror(f_errno()));
               leave;
            endif;

            LogLog_verbose('Starting listening for port: ' + %char(i_port));

            rc = listen(tmpListener: 0);
            if rc = SOCKET_ERROR;
               LogLog_error('listen()-error: ' + f_strerror(f_errno()));
               leave;
            endif;

            listener = tmpListener;
            tmpListener = SOCKET_NULL;

            LogLog_verbose('Listener socket created: ' + %char(listener));
         enddo;

         if tmpListener <> SOCKET_NULL;
            rc = close(tmpListener);
            tmpListener = SOCKET_NULL;
         endif;

         return listener;

      /END-FREE
      *
     P createListener...
     P                 E
      *
      *=====================================================================*
      *  Produces a new client.
      *=====================================================================*
     P acceptClient...
     P                 B
      *
     D acceptClient...
     D                 PI
     D  i_listener                   10I 0 const
     D  io_clients                   10I 0        dim(cMAX_CLIENTS)
      *
      *  Helper fields
     D x               S             10I 0 inz
     D rc              S             10I 0 inz
     D client          S             10I 0 inz
     D addrLength      S             10I 0 inz
      *
     D clientAddr      DS                  likeds(sockaddr_in_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         dou 1=1;

            // Accept incoming request
            addrLength = %size(clientAddr);
            rc = accept(i_listener: %addr(clientAddr): addrLength);
            if rc = SOCKET_ERROR;
               LogLog_error('accept()-error: ' + f_strerror(f_errno()));
               leave;
            endif;

            client = rc;

            // Lookup free client slot
            x = %lookup(SOCKET_NULL: io_clients);
            if x = 0;
               LogLog_debug('client-array-error: Array full');
               return;
            endif;

            // Add client to client list
            io_clients(x) = client;

            LogLog_debug('Accepted connection to client: ' + %char(client));
         enddo;

         return;

      /END-FREE
      *
     P acceptClient...
     P                 E
      *
      *=====================================================================*
      *  Make descritor sets for client descriptors.
      *=====================================================================*
     P makeDescSets...
     P                 B
      *
     D makeDescSets...
     D                 PI            10I 0
     D  i_pipe                       10I 0 const
     D  i_listener                   10I 0 const
     D  i_clients                    10I 0 const  dim(cMAX_CLIENTS)
     D  o_readSet                                 like(socket_fdSet_t)
     D  o_writeSet                                like(socket_fdSet_t)
     D  o_excpSet                                 like(socket_fdSet_t)
      *
      *  Return value
     D maxDesc         S             10I 0 inz
      *
      *  Helper fields
     D x               S             10I 0 inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         FD_ZERO(o_readSet);
         FD_ZERO(o_writeSet);
         FD_ZERO(o_excpSet);

         // Build write set for client descriptors
         for x = 1 to cMAX_CLIENTS;
            if i_clients(x) <> SOCKET_NULL;
               FD_SET(i_clients(x): o_writeSet);
               if i_clients(x) > maxDesc;
                  maxDesc = i_clients(x);
               endif;
            endif;
         endfor;

         // Build read set for pipe and listener descriptor
         FD_SET(i_pipe: o_readSet);
         if i_pipe > maxDesc;
            maxDesc = i_pipe;
         endif;

         FD_SET(i_listener: o_readSet);
         if i_listener > maxDesc;
            maxDesc = i_listener;
         endif;

         o_excpSet  = o_readSet;

         return maxDesc;

      /END-FREE
      *
     P makeDescSets...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4SHBAPP  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4SHBAPP"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: XMLSocketHubAppender    "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PROTOTYPES_ONLY)
      *=====================================================================*
      *  SrvPgm: LOG4RPG - Object: XMLSocketHubAppender                     *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  17.10.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  This software is free software, you can redistribute it and/or     *
      *  modify it under the terms of the GNU General Public License (GPL)  *
      *  as published by the Free Software Foundation.                      *
      *                                                                     *
      *  See GNU General Public License for details.                        *
      *          http://www.opensource.org                                  *
      *          http://www.opensource.org/licenses/gpl-license.html        *
      *                                                                     *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *     >>CMD<<     CRTSRVPGM    SRVPGM(&LI/&OB) +                      *
      *                              MODULE(&LI/&OB) +                      *
      *                              EXPORT(*ALL) +                         *
      *                              ACTGRP(*CALLER) +                      *
      *                              ALWUPD(*YES) +                         *
      *                              ALWLIBUPD(*YES) +                      *
      *                              BNDDIR(QC2LE) +                        *
      *                              BNDSRVPGM(*LIBL/LOG4RPG   +            *
      *                                        *LIBL/BASICS1 ) +            *
      *                              TEXT('Tools/400 - Log4rpg +            *
      *                                    XMLSocketHubAppender       ') +  *
      *                              DETAIL(*BASIC);                        *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      /COPY QLOG4RPG,COPYRIGHT
      *=====================================================================*
      /ENDIF
      *
      *  Creates a new XMLSocketHubAppender.
     D XMLSocketHubAppender_new...
     D                 PR              N   extproc('XMLSocketHubAppender+
     D                                     _new')
     D  i_pSuper                           const  like(LOG4RPG_pAppender_t     )
     D  io_pHandle                     *
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Returns TRUE if the appender requires a layout.
     D XMLSocketHubAppender_requiresLayout...
     D                 PR              N   extproc('XMLSocketHubAppender+
     D                                     _requiresLayout')
     D  i_pHandle                      *   const
      *
      *  Appends a message to the XMLSocketHubAppender.
     D XMLSocketHubAppender_doAppend...
     D                 PR              N   extproc('XMLSocketHubAppender+
     D                                     _doAppend')
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const like(LOG4RPG_pLogEvent_t )
      *
      *  Used to set the properties of the appender.
     D XMLSocketHubAppender_setProperties...
     D                 PR                  extproc('XMLSocketHubAppender+
     D                                     _setProperties')
     D  i_pHandle                      *   const
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Deletes a given XMLSocketHubAppender.
     D XMLSocketHubAppender_delete...
     D                 PR              N   extproc('XMLSocketHubAppender+
     D                                     _delete')
     D  io_pHandle                     *
      *
      /IF DEFINED(PROTOTYPES_ONLY)
      /EOF
      /ENDIF
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG52
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG                     Public interface & type definitions
      /COPY QLOG4RPG,FDQJOB
      *
     D handle_t...
     D                 DS                  qualified           based(pDummy)
     D  pSuper                             like(LOG4RPG_pAppender_t)
     D  isOpen                         N
     D  port                               like(port_t   )
     D  pipeWrite                          like(desc_t   )
     D  ccsid                        10I 0
     D  isIconv                        N
     D  hIconv                             likeds(iconv_t )
     D  childProcess                       likeds(qJob_t  )
      *
     D port_t          S             10U 0                     based(pDummy)
     D desc_t          S             10I 0                     based(pDummy)
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QLOG4RPG,CLIB                         C-Library
      *
      /COPY QLOG4RPG,PLOG4RPG07                   PropertyList
      /COPY QLOG4RPG,PLOG4RPG10                   LogLog
      /COPY QLOG4RPG,PLOG4RPG98                   OptionConverter
      /COPY QLOG4RPG,PLOG4RPG99                   Helper
      *
      /COPY QLOG4RPG,PLOG4SOCK                    Socket prototypes
      *
      * -----------------------------------------------------------------------
      *  spawn()--Spawn Process
      *    value  spawn() was successful.
      *           The value returned is the process ID of the child process.
      *    -1     spawn() was not successful.
      *           The errno variable is set to indicate the error.
      * -----------------------------------------------------------------------
     D spawn...
     D                 PR            10I 0 extproc('Qp0zSpawn')
     D  i_path                         *   value  options(*string)
     D  i_fd_count                   10I 0 value
     D  i_fd_map                       *   value
     D  i_inheritance                      const  likeds(inheritance_t)
     D  i_argv                         *   value
     D  i_envp                         *   value
      *
     D inheritance_t...
     D                 DS                  qualified               based(pDummy)
     D  flags                        10U 0
     D  pGroup                       10I 0
     D  sigMask                            likeds(sigmask_t)
     D  sigDefault                         likeds(sigmask_t)
      *
     D sigmask_t...
     D                 DS                  qualified               based(pDummy)
     D  lomask                       10U 0
     D  himask                       10U 0
      *
      * -----------------------------------------------------------------------
      *  pipe()--Create an Interprocess Channel
      *     0     pipe() was successful.
      *    -1     pipe() was not successful. The errno variable is set to indicate the error
      * -----------------------------------------------------------------------
     D pipe...
     D                 PR            10I 0 extproc('pipe')
     D  o_fildes                     10I 0        dim(2)
      *
     D cPIPE_READ      C                   const(1)
     D cPIPE_WRITE     C                   const(2)
      *
      * -----------------------------------------------------------------------
      *  Qp0wGetJobID()--Get Qualified Job Name and ID for Process ID
      *     0     Qp0wGetJobID() was successful.
      *    value  Qp0wGetJobID() was not successful.
      *           The value returned indicates one of the following errors.
      * -----------------------------------------------------------------------
     D Qp0wGetJobID...
     D                 PR            10I 0 extproc('Qp0wGetJobID')
     D  i_pid                        10I 0 value
     D  o_jobInfo                                 likeds(QP0W_Job_ID_t)
      *
     D QP0W_Job_ID_t...
     D                 DS                  qualified               based(pDummy)
     D  name                         10A
     D  user                         10A
     D  nbr                           6A
     D  ID                           16A
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
      *  Opens a XMLSocketHubAppender for output.
     D openAppender...
     D                 PR              N
     D  i_pHandle                      *   const
      *
      *  Closes a XMLSocketHubAppender.
     D closeAppender...
     D                 PR              N
     D  i_pHandle                      *   const
      *
      *  Initializes charcater translation.
     D initIconv...
     D                 PR              N
     D  io_handle                                 likeds(handle_t )
      *
      *  Create child process.
     D createChildProcess...
     D                 PR              N
     D  io_handle                                 likeds(handle_t )
      *
      *  Ends child process.
     D endChildProcess...
     D                 PR              N
     D  io_handle                                 likeds(handle_t )
      *
      *  Loads the configuration parameters from the specified property list.
     D loadConfiguration...
     D                 PR
     D  io_handle                                 likeds(handle_t              )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
     D cTHIS_CLASS...
     D                 C                          const(
     D                                            'XMLSocketHubAppender')
      *
     D cDEFAULT_PORT...
     D                 C                          const(4449)
     D cDEFAULT_CCSID...
     D                 C                          const(819)
      *
     D cPARAMETER_PORT...
     D                 C                          const('port')
     D cPARAMETER_CCSID...
     D                 C                          const('ccsid')
      *
     D cDESC_NULL...
     D                 C                          const(-1)
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Program status data structure
      * -----------------------------------------
      /DEFINE SDS_EXTENDED
      /COPY QLOG4RPG,SDS
      /UNDEFINE SDS_EXTENDED
      *
      *=====================================================================*
      *  Creates a new XMLSocketHubAppender.
      *=====================================================================*
      *  Parameters:
      *   io_pHandle    - Handle that is passed around the various calls to
      *                   this XMLSocketHubAppender.
      *   i_pPropsList  - Handle of the property list that contains the
      *                   properties for the appender.
      *   i_prefix      - Prefix of the relevant property keys.
      *
      *  Returns:
      *   isDone        - Returns TRUE on success, else FALSE.
      *=====================================================================*
     P XMLSocketHubAppender_new...
     P                 B                   export
      *
     D XMLSocketHubAppender_new...
     D                 PI              N
     D  i_pSuper                           const  like(LOG4RPG_pAppender_t     )
     D  io_pHandle                     *
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Helper fields
     D tmpHIconv       DS                  likeds(iconv_t  ) inz
     D tmpHandle       DS                  likeds(handle_t ) inz
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(io_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         clear tmpHandle;
         clear tmpHIconv;

         // Initialize handle
         tmpHandle.pSuper          = i_pSuper;   // Handle of the super class 'Appender'
         tmpHandle.isOpen          = cFalse;
         tmpHandle.port            = cDEFAULT_PORT;
         tmpHandle.pipeWrite       = cDESC_NULL;
         tmpHandle.ccsid           = cDEFAULT_CCSID;
         tmpHandle.isIconv         = cFalse;
         tmpHandle.hIconv          = tmpHIconv;
         tmpHandle.childProcess.nbr  = '';
         tmpHandle.childProcess.user = '';
         tmpHandle.childProcess.name = '';

         // Initialize handle from configuration properties
         if (i_pPropList <> *NULL) and not PropertyList_isNull(i_pPropList);
            loadConfiguration(tmpHandle: i_pPropList: i_prefix);
         endif;

         // Initialize Character Conversion
         initIconv(tmpHandle);

         // Create appender handle
         io_pHandle = %alloc(%size(tmpHandle));
         handle = tmpHandle;

         LogLog_debug('Loaded instance of [' + cTHIS_CLASS + '].');

         return isDone;

      /END-FREE
      *
     P XMLSocketHubAppender_new...
     P                 E
      *
      *=====================================================================*
      *  Returns TRUE if the appender requires a layout.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this XMLSocketHubAppender.
      *
      *  Returns:
      *   isDone        - Returns TRUE if the appender requires a layout,
      *                   else FALSE.
      *=====================================================================*
     P XMLSocketHubAppender_requiresLayout...
     P                 B                   export
      *
     D XMLSocketHubAppender_requiresLayout...
     D                 PI              N
     D  i_pHandle                      *   const
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         return cTrue;

      /END-FREE
      *
     P XMLSocketHubAppender_requiresLayout...
     P                 E
      *
      *=====================================================================*
      *  Appends a message to the XMLSocketHubAppender.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this XMLSocketHubAppender.
      *   i_pLogEvent   - Handle of the Log event returned by LogEvent_new().
      *
      *  Returns:
      *   isDone        - Returns TRUE on success, else FALSE.
      *=====================================================================*
     P XMLSocketHubAppender_doAppend...
     P                 B                   export
      *
     D XMLSocketHubAppender_doAppend...
     D                 PI              N
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const like(LOG4RPG_pLogEvent_t )
      *
      *  Helper fields
     D rc              S             10I 0 inz
     D rc_iconv        S             10U 0 inz
     D errno           S             10I 0 inz
     D pInpBuf         S               *   inz
     D pOutBuf         S               *   inz
     D inpLength       S             10U 0 inz
     D outLength       S             10U 0 inz
     D inBufLen        S             10U 0 inz
     D outBufLen       S             10U 0 inz
     D pOutBufStart    S               *   inz
     D pInpBufStart    S               *   inz
     D msg             DS                  likeds(msg_t    ) inz
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      *
     D CRLF            C                   const(x'0D25')
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Return if there is no text
         if LogEvent_textLength(i_pLogEvent) = 0;
            return cTrue;
         endif;

         // Open the appender for output if it is not yet open
         if not handle.isOpen;
            if not openAppender(i_pHandle);
               return cFalse;
            endif;
         endif;

         monitor;

            // Add CRLF to log Event
            LogEvent_appendText(i_pLogEvent: CRLF);

            // Copy log event text to buffer
            inpLength = LogEvent_textLength(i_pLogEvent);
            pInpBuf   = LogEvent_getTextPointer(i_pLogEvent);
            outLength = %int(inpLength * 2);  // Ensure enough memory for UTF-8
            pOutBuf   = %alloc(outLength);
            inBufLen  = inpLength;
            pInpBufStart = pInpBuf;
            outBufLen = outLength;
            pOutBufStart = pOutBuf;
            rc_iconv = iconv(handle.hIconv: pInpBufStart: inBufLen
                                          : pOutBufStart: outBufLen);
            if rc_iconv <> 0;
               LogLog_error('iconv() returned with rc = ' + %char(rc_iconv));
            endif;

            // Write to pipe => child process.
            rc = write(handle.pipeWrite: pOutBuf: outLength - outBufLen);
         on-error;
            // Do nothing here
         endmon;

         // Free temporary working area
         if pInpBuf <> *NULL;
            dealloc(N) pInpBuf;
         endif;

         if pOutBuf <> *NULL;
            dealloc(N) pOutBuf;
         endif;

         // Check return code of send() procedure
         if rc < 0;
            errno = f_errno();
            LogLog_error('Failed to write logEevent to child process');
            msg = f_cvtErrnoToMsg(errno);
            LogLog_errorMsg(msg);
            if handle.isOpen;
               closeAppender(i_pHandle);
            endif;
            return cFalse;
         endif;

         return cTrue;

      /END-FREE
      *
     P XMLSocketHubAppender_doAppend...
     P                 E
      *
      *=====================================================================*
      *  Used to set the properties of the appender.
      *=====================================================================*
      *  Parameters:
      *   i_pHandle     - Handle that is passed around the various calls to
      *                   this XMLSocketHubAppender.
      *   i_pPropsList  - Handle of the property list that contains the
      *                   properties for the appender.
      *   i_prefix      - Prefix of the relevant property keys.
      *
      *  Returns:
      *   void
      *=====================================================================*
     P XMLSocketHubAppender_setProperties...
     P                 B                   export
      *
     D XMLSocketHubAppender_setProperties...
     D                 PI
     D  i_pHandle                      *   const
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Helper fields
     D oldCcsid        S                   like(handle.ccsid) inz
      *
      *  XMLSocketHubAppender-Handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         oldCcsid = handle.ccsid;

         loadConfiguration(handle: i_pPropList: i_prefix);

         if oldCcsid <> handle.ccsid;

            if handle.isIconv;
               if iconv_close(handle.hIconv) = 0;
                  handle.isIconv = cFalse;
               endif;
            endif;

            if not handle.isIconv;
               initIconv(handle);
            endif;

         endif;

         return;

      /END-FREE
      *
     P XMLSocketHubAppender_setProperties...
     P                 E
      *
      *=====================================================================*
      *  Deletes a given XMLSocketHubAppender.
      *=====================================================================*
      *  Parameters:
      *   io_pHandle    - Handle that is passed around the various calls to
      *                   this XMLSocketHubAppender.
      *
      *  Returns:
      *   void
      *=====================================================================*
     P XMLSocketHubAppender_delete...
     P                 B                   export
      *
     D XMLSocketHubAppender_delete...
     D                 PI              N
     D  io_pHandle                     *
      *
      *  Return value
     D isDone          S               N                         inz(cFalse)
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(io_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Close socket if it is left open
         if handle.isOpen;
            closeAppender(io_pHandle);
         endif;

         // End character conversion
         if handle.isIconv;
            iconv_close(handle.hIconv);
            handle.isIconv = cFalse;
         endif;

         // Clear handle data
         clear handle;

         // Free handle memory
         dealloc(N) io_pHandle;

         LogLog_verbose('Deleted instance of [' + cTHIS_CLASS + '].');

         isDone = cTrue;

         return isDone;

      /END-FREE
      *
     P XMLSocketHubAppender_delete...
     P                 E
      *
      *=====================================================================*
    R *  *** Private ***
      *  Opens a XMLSocketHubAppender for output.
      *=====================================================================*
     P openAppender...
     P                 B
      *
     D openAppender...
     D                 PI              N
     D  i_pHandle                      *   const
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      *
      *  Helper fields
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if not createChildProcess(handle);
            return cFalse;
         endif;

         handle.isOpen = cTrue;

         return cTrue;

      /END-FREE
      *
     P openAppender...
     P                 E
      *
      *=====================================================================*
    R *  *** Private ***
      *  Closes a XMLSocketHubAppender.
      *=====================================================================*
     P closeAppender...
     P                 B
      *
     D closeAppender...
     D                 PI              N
     D  i_pHandle                      *   const
      *
      *  Appender handle
     D handle          DS                  likeds(handle_t ) based(i_pHandle)
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if not endChildProcess(handle);
            return cFalse;
         endif;

         handle.isOpen = cFalse;

         return cTrue;

      /END-FREE
      *
     P closeAppender...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Initializes charcater translation.
      *=========================================================================
     P initIconv...
     P                 B
      *
     D initIconv...
     D                 PI              N
     D  io_handle                                 likeds(handle_t )
      *
      *  Return value
     D isIconv         S               N   inz(cFalse)
      *
      *  Local fields
     D tmpHIconv       DS                  likeds(iconv_t  ) inz
     D fromCode        DS                  likeds(QtqCode_t) inz
     D toCode          DS                  likeds(QtqCode_t) inz
     D msg             DS                  likeds(msg_t    ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         clear tmpHIconv;

         clear fromCode;
         fromCode.ccsid         = 0;
         fromCode.conversionA   = 0;
         fromCode.substitutionA = 0;
         fromCode.shiftStateA   = 1;
         fromCode.inpLenOpt     = 0;
         fromCode.errOptMxdDta  = 1;
         fromCode.reserved      = *ALLx'00';

         clear toCode;
         toCode.ccsid         = io_handle.ccsid;
         toCode.conversionA   = 0;
         toCode.substitutionA = 0;
         toCode.shiftStateA   = 0;
         toCode.inpLenOpt     = 0;
         toCode.errOptMxdDta  = 0;
         toCode.reserved      =   *ALLx'00';

         tmpHIconv = QtqIconv_open(toCode: fromCode);
         if tmpHIconv.return_value = -1;
            LogLog_error('Failed to initialize character conversion');
            msg = f_cvtErrnoToMsg(f_errno());
            LogLog_errorMsg(msg);
            io_handle.isIconv = cFalse;
         else;
            LogLog_debug('Initialized character translation for CCSID=' +
                         %char(io_handle.ccsid));
            io_handle.isIconv = cTrue;
            io_handle.hIconv  = tmpHIconv;
         endif;

         isIconv = io_handle.isIconv;

         return isIconv;

      /END-FREE
      *
     P initIconv...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Creates a new child process.
      *=========================================================================
     P createChildProcess...
     P                 B
      *
     D createChildProcess...
     D                 PI              N
     D  io_handle                                 likeds(handle_t )
      *
      *  Return value
     D isCreated       S               N   inz(cFalse)
      *
      *  Local fields
     D rc              S             10I 0 inz
     D pid             S             10I 0 inz
      *
     D inheritance     DS                  likeds(inheritance_t   ) inz
      *
     D argv            DS                  qualified
     D  pipe                         10A
     D  port                         10A
     D  debugMode                    10A
     D  output                       10A
      *
     D spw             DS                  qualified
     D  path                        128A   varying         inz
     D  fd_count                     10I 0                 inz
     D  fd_map                       10I 0 dim(32)         inz
     D  pArgv                          *   dim(32)         inz
     D  pEnvp                          *   dim(32)         inz
      *
     D tmpFildes       S                   like(desc_t           ) dim(2) inz
     D tmpChildProcess...
     D                 DS                  likeds(QP0W_Job_ID_t  )        inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         tmpFildes(cPIPE_READ)  = -1;
         tmpFildes(cPIPE_WRITE) = -1;

         clear tmpChildProcess;

         dou 1=1;

            // Create communication pipe to child process:
            // ... create pipe
            if pipe(tmpFildes) < 0;
               LogLog_error('Failed to create pipe: ' +
                             %char(f_errno()) + ' : ' +
                             f_strerror(f_errno()));
               leave;
            endif;

            LogLog_verbose('Created pipe: ' +
                              'read  = ' + %char(tmpFildes(cPIPE_READ )) + ' ' +
                              'write = ' + %char(tmpFildes(cPIPE_WRITE)));

            // Set write descriptor to non-blocking mode
            rc = fcntl(tmpFildes(cPIPE_WRITE): F_SETFL: O_NONBLOCK);
            if rc < 0;
               LogLog_error('Failed to set pipe to non-blocking mode: ' +
                             %char(f_errno()) + ' : ' +
                             f_strerror(f_errno()));
               leave;
            endif;

            // Create child process:
            // ... set inheritance
            inheritance = *ALLx'00';
            inheritance.pGroup = 0;

            // ... prepare program parameter values
            argv.pipe      = '0';
            argv.port      = %char(io_handle.port);
            argv.debugMode = Logger_getInternalDebugMode();
            argv.output    = Logger_getInternalDebugOutput();

            spw.path = '/QSYS.LIB/' +
                        %trimR(sds.pgmLib) + '.LIB/LOG4SHBAPC.PGM' + x'00';
            spw.fd_count  = 1;
            spw.fd_map(1) = tmpFildes(cPIPE_READ);

            spw.pArgv(1) = %addr(spw.path);
            spw.pArgv(2) = %addr(argv.pipe);
            spw.pArgv(3) = %addr(argv.port);
            spw.pArgv(4) = %addr(argv.debugMode);
            spw.pArgv(5) = %addr(argv.output);
            spw.pArgv(6) = *NULL;

            // ... set environment variables
            spw.pEnvp(1) = *NULL;

            // ... spawn child process
            pid = spawn(spw.path: spw.fd_count: %addr(spw.fd_map)
                        : inheritance
                        : %addr(spw.pArgv(1)): %addr(spw.pEnvp(1)));
            if pid < 0;
               LogLog_error('Failed to spawn child process: ' +
                             %char(f_errno()) + ' : ' +
                             f_strerror(f_errno()));
               leave;
            endif;

            // ... retrieve qualified job name of child process
            Qp0wGetJobID(pid: tmpChildProcess);

            io_handle.childProcess.nbr  = tmpChildProcess.nbr;
            io_handle.childProcess.user = tmpChildProcess.user;
            io_handle.childProcess.name = tmpChildProcess.name;
            clear tmpChildProcess;

            io_handle.pipeWrite    = tmpFildes(cPIPE_WRITE);
            tmpFildes(cPIPE_WRITE) = cDESC_NULL;

            rc = close(tmpFildes(cPIPE_READ));
            tmpFildes(cPIPE_READ ) = cDESC_NULL;

            LogLog_debug('Spawned child process. [' +
                          io_handle.childProcess.nbr + '/' +
                          %trim(io_handle.childProcess.user) + '/' +
                          %trim(io_handle.childProcess.name) +
                          ']');

            isCreated = cTrue;
         enddo;

         return isCreated;

      /END-FREE
      *
     P createChildProcess...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Closes the listener socket.
      *=========================================================================
     P endChildProcess...
     P                 B
      *
     D endChildProcess...
     D                 PI              N
     D  io_handle                                 likeds(handle_t )
      *
      *  Return value
     D isStopped       S               N   inz(cFalse)
      *
      *  Helper fields
     D rc              S             10I 0 inz
     D cmd             S            128A   varying inz
      *
     D msg             DS                  likeds(msg_t    ) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         // Close pipe
         if io_handle.pipeWrite <> cDESC_NULL;
            rc = close(io_handle.pipeWrite);
            io_handle.pipeWrite = cDESC_NULL;
         endif;

         // End child process
         if io_handle.childProcess.name <> '';

            cmd = 'ENDJOB JOB(' + io_handle.childProcess.nbr         + '/' +
                                  %trim(io_handle.childProcess.user) + '/' +
                                  %trim(io_handle.childProcess.name) + ') ' +
                     'OPTION(*CNTRLD) LOGLMT(0) DELAY(60)';

            if not f_execute(cmd: *omit: msg);
               LogLog_errorMsg(msg);
            endif;

            LogLog_debug('Stopped child process. [' +
                          io_handle.childProcess.nbr + '/' +
                          %trim(io_handle.childProcess.user) + '/' +
                          %trim(io_handle.childProcess.name) +
                          ']');

            clear io_handle.childProcess;
         endif;

         return isStopped;

      /END-FREE
      *
     P endChildProcess...
     P                 E
      *
      *=========================================================================
    R *  *** Private ***
      *  Loads the configuration parameters from the specified property list.
      *=========================================================================
     P loadConfiguration...
     P                 B
      *
     D loadConfiguration...
     D                 PI
     D  io_handle                                 likeds(handle_t              )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Local fields
     D parameter       S                   like(property.key        ) inz
     D prefix          S                   like(i_prefix            ) inz
     D property        DS                  likeds(LOG4RPG_property_t) inz
     D propIter        DS                  likeds(LOG4RPG_Property...
     D                                                    ListIterator_t) inz
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         prefix = f_lcase(i_prefix);

         propIter = PropertyList_getIterator(i_pPropList);

         property = PropertyList_getFirst(propIter);

         dow property.key <> '';

            if (prefix = '') or (f_startsWith(prefix: property.key) and
 B03                             %len(property.key) > %len(prefix));

               parameter = f_lcase(%subst(property.key: %len(prefix) + 1));

               select;
               when parameter = cPARAMETER_PORT;
                  io_handle.port =
                     OptionConverter_toInt(
                        property.value: cDEFAULT_PORT);
               when parameter = cPARAMETER_CCSID;
                  io_handle.ccsid =
                     OptionConverter_toInt(
                        property.value: cDEFAULT_CCSID);
               when Appender_knowsProperty(parameter);
 B03              // Ignore all parameters known by super Appender class
               other;
                  LogLog_warning('No such property ['     +
                                  property.key            +
                                 '] in [' + cTHIS_CLASS + ']');
               endsl;

            endif;

            property = PropertyList_getNext(propIter);
         enddo;

         return;

      /END-FREE
      *
     P loadConfiguration...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing LOG4SOCK  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "LOG4SOCK  "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: Socket Helper           "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *=====================================================================*
      *  Module: LOG4RPG - Object: Socket Helper                            *
      *=====================================================================*
      *  Author  :  Thomas Raddatz                                          *
      *  Date    :  14.11.2006                                              *
      *  E-mail  :  thomas.raddatz@tools400.de                              *
      *  Homepage:  www.tools400.de                                         *
      *=====================================================================*
      *                                                                     *
      *  Copyright (c) 1998,2001 Scott C. Klement                           *
      *  All rights reserved.                                               *
      *                                                                     *
      *  Redistribution and use in source and binary forms, with or without *
      *  modification, are permitted provided that the following conditions *
      *  are met:                                                           *
      *  1. Redistributions of source code must retain the above copyright
      *     notice, this list of conditions and the following disclaimer.
      *  2. Redistributions in binary form must reproduce the above copyright
      *     notice, this list of conditions and the following disclaimer in the
      *     documentation and/or other materials provided with the distribution.
      *
      *
      *
      *
      *
      *
      *
      *
      *
      *
      *
      *=====================================================================*
      *  History:                                                           *
      *                                                                     *
      *  Datum       Name          Änderung                                 *
      *  ----------  ------------  ---------------------------------------  *
      *                                                                     *
      *=====================================================================*
      *   >>PRE-COMPILER<<                                                  *
      *                                                                     *
      *     >>CRTCMD<<  CRTRPGMOD    MODULE(&LI/&OB) +                      *
      *                              SRCFILE(&SL/&SF) +                     *
      *                              SRCMBR(&SM);                           *
      *                                                                     *
      *     >>COMPILE<<                                                     *
      *       >>PARM<< TRUNCNBR(*NO);                                       *
      *       >>PARM<< DBGVIEW(*LIST);                                      *
      *       >>PARM<< TGTRLS(V6R1M0  );                                    *
      *     >>END-COMPILE<<                                                 *
      *                                                                     *
      *     >>EXECUTE<<                                                     *
      *                                                                     *
      *   >>END-PRE-COMPILER<<                                              *
      *=====================================================================*
      /COPY QLOG4RPG,H_SPEC
      *=====================================================================*
      *
      * -----------------------------------------
      *  Exported functions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4SOCK
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QLOG4RPG,PTYPES                        Private type definitions
      *
      * -----------------------------------------
      *  Private prototypes
      * -----------------------------------------
      *
     D mask...
     D                 PR            10U 0
     D  i_FD                               const  like(socket_fd_t   )
      *
      * -----------------------------------------
      *  Global constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Program status data structure
      * -----------------------------------------
      *
      *======================================================================================
    R *  RPG implementation of C macro: FD_SET
      *  Set bit in file descriptor set.
      *======================================================================================
     P FD_SET...
     P                 B                   export
      *
     D FD_SET...
     D                 PI
     D i_FD                                const  like(socket_fd_t   )
     D io_FDSet                                   like(socket_fdSet_t)
      *
      *  Helper fields
     D x               S              5I 0
     D FDSet           S             10U 0 dim(7) based(pFDSet)
      * ---------------------------------------------------------
      /FREE

         pFDSet =%addr(io_FDSet);
         x = (i_FD / 32) + 1;
         FDSet(x) = %bitor(FDSet(x): mask(i_FD));

         return;

      /END-FREE
      *
     P FD_SET...
     P                 E
      *
      *======================================================================================
    R *  RPG implementation of C macro: FD_CLR
      *  Clear bit in file descriptor set.
      *======================================================================================
     P FD_CLR...
     P                 B                   export
      *
     D FD_CLR...
     D                 PI
     D i_FD                                const  like(socket_fd_t   )
     D io_FDSet                                   like(socket_fdSet_t)
      *
      *  Helper fields
     D x               S              5I 0
     D FDSet           S             10U 0 dim(7) based(pFDSet)
      * ---------------------------------------------------------
      /FREE

         pFDSet =%addr(io_FDSet);
         x = (i_FD / 32) + 1;
         FDSet(x) = %bitand(FDSet(x): %bitnot(mask(i_FD)));

         return;

      /END-FREE
      *
     P FD_CLR...
     P                 E
      *
      *======================================================================================
    R *  RPG implementation of C macro: FD_ISSET
      *  Test bit in file descriptor set.
      *======================================================================================
     P FD_ISSET...
     P                 B                   export
      *
     D FD_ISSET...
     D                 PI              N
     D i_FD                                value  like(socket_fd_t   )
     D i_FDSet                             value  like(socket_fdSet_t)
      *
      *  Funktionswert
     D isSet           S               N   inz(cFalse)
      *
      *  Helper fields
     D x               S              5I 0
     D FDSet           S             10U 0 dim(7) based(pFDSet)
      * ---------------------------------------------------------
      /FREE

         pFDSet =%addr(i_FDSet);
         x = (i_FD / 32) + 1;
         isSet = %bitand(FDSet(x): mask(i_FD)) = mask(i_FD);

         return isSet;

      /END-FREE
      *
     P FD_ISSET...
     P                 E
      *
      *======================================================================================
    R *  RPG implementation of C macro: FD_ISSET
      *  Initialize file descriptor set with x'00'.
      *======================================================================================
     P FD_ZERO...
     P                 B                   export
      *
     D FD_ZERO...
     D                 PI
     D io_FDSet                                   like(socket_fdSet_t)
      * ---------------------------------------------------------
      /FREE

         io_FDSet = *ALLx'00';

         return;

      /END-FREE
      *
     P FD_ZERO...
     P                 E
      *
      *===============================================================*
      *  Returns the IP address of the 5250 client of the
      *  specified job.
      *===============================================================*
     P Job_getTcpIpAddr...
     P                 B                   export
      *
     D Job_getTcpIpAddr...
     D                 PI            15A          varying
     D  i_qJob                             const  likeds(qJob_t   )
     D                                            options(*nopass)
      *
      *  Parameter positions
     D p_qJob          C                   1
      *
      *  Retrieve Job Information (QUSRJOBI) API
     D QUSRJOBI...
     D                 PR                  extpgm('QUSRJOBI')
     D  o_rcvVar                  65535A          options(*varsize)
     D  i_rcvVarLen                  10I 0 const
     D  i_format                      8A   const
     D  i_qJob                       26A   const
     D  i_intJobID                   16A   const
     D  io_errCode                65535A          options(*nopass: *varsize)    OptGrp 1
     D  i_resPrfStat                  1A   const  options(*nopass)              OptGrp 2
      *
     D qJob            DS                  likeds(i_qJob   )
      *
     D jobi0600        DS                  qualified
     D  jobType               61     61A
     D  jobSubType            62     62A
     D  device               127    136A
      *
      *  Retrieve Device Description (QDCRDEVD) API
     D QDCRDEVD...
     D                 PR                         extpgm('QDCRDEVD')
     D  o_rcvVar                  65535A          options(*varsize)
     D  i_lenRcvVar                  10I 0 const
     D  i_format                      8A   const
     D  i_devName                    10A   const
     D  io_errCode                65535A          options(*varsize)
      *
     D devd0600        DS          1024    qualified
     D  tcpIpDotAddr         878    892A
      *
     D errCode         DS                  inz
     D  bytPrv                       10I 0
     D  bytAvl                       10I 0
      * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      /FREE

         if (%parms() >= p_qJob);
            qJob = i_qJob;
         else;
            clear qJob;
            qJob.name = '*';
         endif;

         QUSRJOBI(jobi0600:%size(jobi0600):'JOBI0600':qJob:'':errCode);

         QDCRDEVD(devd0600:%size(devd0600):'DEVD0600':jobi0600.device:errCode);

         return %trim(devd0600.tcpIpDotAddr);

      /END-FREE
      *
     P Job_getTcpIpAddr...
     P                 E
      *
      *======================================================================================
    R *  *** private ***
      *  Calculate bit mask from file descriptor.
      *======================================================================================
     P mask...
     P                 B
      *
     D mask...
     D                 PI            10U 0
     D  i_FD                               const  like(socket_fd_t   )
      *
      *  Helper fields
      * ---------------------------------------------------------
      /FREE

         return %int(2 ** %rem(i_FD : 32));

      /END-FREE
      *
     P mask...
     P                 E
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing OPNLSTAPIS  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "OPNLSTAPIS"
mbrtype =  "RPGLE     "
mbrtext =  "Process Open List APIs                            "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      *
     D qgy_opnListInf_t...
     D                 DS                  qualified               based(pDummy)
     D  totalRcds                    10I 0
     D  rcdsRet                      10I 0
     D  hRequest                      4A
     D  rcdLen                       10I 0
     D  infComplInd                   1A
     D  dateTimeCrt                  13A
     D  listStatInd                   1A
     D  reserved_01                   1A
     D  lenInfRet                    10I 0
     D  firstRcdInRcv                10I 0
     D  reserved_02                  40A
      *
      *  Get List Entries (QGYGTLE) API
     D QGYGTLE...
     D                 PR                  extpgm('QGYGTLE')
     D  o_rcvVar                  65535A          options(*varsize)
     D  i_rcvVarLen                  10I 0 const
     D  i_hRequest                    4A   const
     D  o_opnListInf                 80A
     D  i_numRcdRtn                  10I 0 const
     D  i_startRcd                   10I 0 const
     D  io_errCode                65535A          options(*varsize)
      *
      *  Close List (QGYCLST) API
     D QGYCLST...
     D                 PR                  extpgm('QGYCLST')
     D  i_hRequest                    4A   const
     D  io_errCode                65535A          options(*varsize)
      *
      *  Open List of Objects (QGYOLOBJ) API
     D QGYOLOBJ...
     D                 PR                         extpgm('QGYOLOBJ')
     D  o_rcvVar                  32767A          options(*varsize )
     D  i_lenRcvVar                  10I 0 const
     D  o_listInf                    80A
     D  i_numRcdRet                  10I 0 const
     D  i_sortInf                 32767A   const  options(*varsize )
     D  i_qObj                       20A   const
     D  i_objType                    10A   const
     D  i_authCtrl                32767A   const  options(*varsize )
     D  i_selectCtrl              32767A   const  options(*varsize )
     D  i_numFldRet                  10I 0 const
     D  i_keyOfFldRet             32767A   const  options(*varsize )
     D  io_ErrCode                32767A          options(*varsize )
      *
     D qgy_selectCtrl_t...
     D                 DS                  qualified               based(pDummy)
     D  length                       10I 0
     D  value                        10I 0
     D  ofsStat                      10I 0
     D  numStat                      10I 0
     D  reserved_1                   10I 0
     D  statList                           likeds(qgy_statList_t   )
      *
     D qgy_statList_t...
     D                 DS                  qualified   based(pDummy)
     D  stat                          1A   dim(16)
      *
     D qgy_authCtrl_t...
     D                 DS                  qualified               based(pDummy)
     D  length                       10I 0
     D  callLvl                      10I 0
     D  ofsObjAuth                   10I 0
     D  numObjAuth                   10I 0
     D  ofsLibAuth                   10I 0
     D  numLibAuth                   10I 0
     D  reserved_1                    4A
     D  objAuthList                        likeds(qgy_authList_t   )
     D  libAuthList                        likeds(qgy_authList_t   )
      *
     D qgy_authList_t...
     D                 DS                  qualified               based(pDummy)
     D  auth                         10A   dim(16)
      *
     D qgy_sortInf_t...
     D                 DS                  qualified               based(pDummy)
     D  numE                         10I 0
     D  sortInfE                           likeds(qgy_sortInfE_t   )
     D                                     dim(16)
      *
     D qgy_sortInfE_t...
     D                 DS                  qualified               based(pDummy)
     D  startPos                     10I 0
     D  length                       10I 0
     D  dataType                      5I 0
     D  order                         1A
     D  reserved_1                    1A
      *
     D qgy_objInf_t...
     D                 DS                  qualified               based(pDummy)
     D  name                         10A
     D  lib                          10A
     D  type                         10A
     D  infStat                       1A
     D  reserved_1                    1A
     D  numFldRet                    10I 0
      *
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PAPPENDER  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PAPPENDER "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Prototypes Appender       public"
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PAPPENDER)
      /DEFINE PAPPENDER
      *
      *  Who should use this copy book:   Developer of appenders
      *
      *  This copy book defines the prototypes that are needed to write an
      *  implementation of an appender 'object'. In order to create an
      *  appender you have to do these steps:
      *     a) copy this copy book
      *     b) rename 'SrvPgmAppender' to the name of your appender,
      *        e.g. 'MySocketAppender'.
      *     c) Optionally remove the lines that are related to 'DEFINE_PROCPTR'.
      *        You do not need the prototypes with procedure pointers. The
      *        prototypes with procedure pointers are used by LOG4RPG03.
      *     d) Make sure that your appender exports the following procedures:
      *           YourAppender_new()
      *           YourAppender_requiresLayout()
      *           YourAppender_doAppend()
      *           YourAppender_setProperties()
      *           YourAppender_delete()
      *        Do not change the suffix of the procedures or the procedure
      *        interface!
      *     e) Feel free to send the new appender to me. I would gladly
      *        add the appender to the LOG4RPG distribution.
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PSHARE                        Type defs shared with appenders & layouts
      *
      * -----------------------------------------
      *  Appender Prototypes & Type Defs
      * -----------------------------------------
      *
      *  Custom appender ...
      *  ... prototye: new, returns TRUE on success else FALSE
      /IF DEFINED (DEFINE_PROCPTR)
     D SrvPgmAppender_new...
     D                 PR              N   extproc(g_pAppender_new)
      /ELSE
     D SrvPgmAppender_new...
     D                 PR              N   extproc('SrvPgmAppender_new')
      /ENDIF
     D  i_pSuper                           const  like(LOG4RPG_pAppender_t     )
     D  io_pHandle                     *
     D  i_propList                         const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  ... prototye: requiresLayout, returns TRUE if the appender requires a layout
      /IF DEFINED (DEFINE_PROCPTR)
     D SrvPgmAppender_requiresLayout...
     D                 PR              N   extproc(g_pAppender_requiresLayout)
      /ELSE
     D SrvPgmAppender_requiresLayout...
     D                 PR              N   extproc('SrvPgmAppender_+
     D                                     requiresLayout')
      /ENDIF
     D  i_pHandle                      *   const
      *
      *  ... prototye: doAppend, returns TRUE on success else FALSE
      /IF DEFINED (DEFINE_PROCPTR)
     D SrvPgmAppender_doAppend...
     D                 PR              N   extproc(g_pAppender_doAppend)
      /ELSE
     D SrvPgmAppender_doAppend...
     D                 PR              N   extproc('SrvPgmAppender_doAppend')
      /ENDIF
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const like(LOG4RPG_pLogEvent_t )
      *
      *  ... prototye: setProperties, sets the proeprties for the appender
      /IF DEFINED (DEFINE_PROCPTR)
     D SrvPgmAppender_setProperties...
     D                 PR
     D                                     extproc(g_pAppender_setProperties)
      /ELSE
     D SrvPgmAppender_setProperties...
     D                 PR
     D                                     extproc('SrvPgmAppender_+
     D                                              setProperties')
      /ENDIF
     D  i_pHandle                      *   const
     D  i_propList                         const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  ... prototye: delete, returns TRUE on success else FALSE
      /IF DEFINED (DEFINE_PROCPTR)
     D SrvPgmAppender_delete...
     D                 PR              N   extproc(g_pAppender_delete)
      /ELSE
     D SrvPgmAppender_delete...
     D                 PR              N   extproc('SrvPgmAppender_delete')
      /ENDIF
     D  io_pHandle                     *
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PFILTER  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PFILTER   "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Prototypes Filter         public"
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PFILTER)
      /DEFINE PFILTER
      *
      *  Who should use this copy book:   Developer of filter
      *
      *  This copy book defines the prototypes that are needed to write an
      *  implementation of an filter 'object'. In order to create an
      *  filter you have to do these steps:
      *     a) copy this copy book
      *     b) rename 'SrvPgmFilter' to the name of your filter,
      *        e.g. 'MyFilter'.
      *     c) Optionally remove the lines that are related to 'DEFINE_PROCPTR'.
      *        You do not need the prototypes with procedure pointers. The
      *        prototypes with procedure pointers are used by LOG4RPG03.
      *     d) Make sure that your filter exports the following procedures:
      *           YourFilter_new()
      *           YourFilter_decide()
      *           YourFilter_setProperties()
      *           YourFilter_delete()
      *        Do not change the suffix of the procedures or the procedure
      *        interface!
      *     e) Feel free to send the new filter to me. I would gladly
      *        add the filter to the LOG4RPG distribution.
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PSHARE                        Type defs shared with appenders & layouts
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *  Valid return values of Filter_decide():
     D cFILTER_ACCEPT...
     D                 C                   const(1)
     D cFILTER_DENY...
     D                 C                   const(2)
     D cFILTER_NEUTRAL...
     D                 C                   const(3)
      *
      * -----------------------------------------
      *  Filter Prototypes & Type Defs
      * -----------------------------------------
      *
      *  Custom filter ...
      *  ... prototye: new, returns TRUE on success else FALSE
      /IF DEFINED (DEFINE_PROCPTR)
     D SrvPgmFilter_new...
     D                 PR              N   extproc(g_pFilter_new)
      /ELSE
     D SrvPgmFilter_new...
     D                 PR              N   extproc('SrvPgmFilter_new')
      /ENDIF
     D  i_pSuper                           const  like(LOG4RPG_pFilter_t       )
     D  io_pHandle                     *
     D  i_propList                         const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  ... prototye: decide, returns the decision of the filter
      /IF DEFINED (DEFINE_PROCPTR)
     D SrvPgmFilter_decide...
     D                 PR            10I 0 extproc(g_pFilter_decide)
      /ELSE
     D SrvPgmFilter_decide...
     D                 PR            10I 0 extproc('SrvPgmFilter_decide')
      /ENDIF
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t)
      *
      *  ... prototye: setProperties, sets the proeprties for the filter
      /IF DEFINED (DEFINE_PROCPTR)
     D SrvPgmFilter_setProperties...
     D                 PR
     D                                     extproc(g_pFilter_setProperties)
      /ELSE
     D SrvPgmFilter_setProperties...
     D                 PR
     D                                     extproc('SrvPgmFilter_+
     D                                              setProperties')
      /ENDIF
     D  i_pHandle                      *   const
     D  i_propList                         const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  ... prototye: delete, returns TRUE on success else FALSE
      /IF DEFINED (DEFINE_PROCPTR)
     D SrvPgmFilter_delete...
     D                 PR              N   extproc(g_pFilter_delete)
      /ELSE
     D SrvPgmFilter_delete...
     D                 PR              N   extproc('SrvPgmFilter_delete')
      /ENDIF
     D  io_pHandle                     *
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLAYOUT  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLAYOUT   "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Prototypes Layout         public"
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLAYOUT)
      /DEFINE PLAYOUT
      *
      *  Who should use this copy book:   Developer of layouts
      *
      *  This copy book defines the prototypes that are needed to write an
      *  implementation of a layout 'object'. In order to create a layout
      *  you have to do these steps:
      *     a) copy this copy book
      *     b) rename 'SrvPgmLayout' to the name of your layout,
      *        e.g. 'MySpecialLayout'.
      *     c) Optionally remove the lines that are related to 'DEFINE_PROCPTR'.
      *        You do not need the prototypes with procedure pointers. The
      *        prototypes with procedure pointers are used by LOG4RPG11.
      *     d) Make sure that your layout exports the following procedures:
      *           MySpecialLayout_new()
      *           MySpecialLayout_format()
      *           MySpecialLayout_setProperties()
      *           MySpecialLayout_delete()
      *        Do not change the suffix of the procedures or the procedure
      *        interface!
      *     e) Optionally add these procedures to your layout. They might be called
      *        when an Appender is initialized and closed:
      *           MySpecialLayout_getHeader()
      *           MySpecialLayout_getFooter()
      *     f) Feel free to send the new layout to me. I would gladly
      *        add the layout to the LOG4RPG distribution.
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PSHARE                        Type defs shared with appenders & layouts
      *
      * -----------------------------------------
      *  Type Definitions
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Layout Prototypes & Type Defs
      * -----------------------------------------
      *
      *  Custom layout ...
      *  ... prototye: new, returns TRUE on success else FALSE
      /IF DEFINED (DEFINE_PROCPTR)
     D SrvPgmLayout_new...
     D                 PR              N   extproc(g_pLayout_new)
      /ELSE
     D SrvPgmLayout_new...
     D                 PR              N   extproc('SrvPgmLayout_new')
      /ENDIF
     D  i_pSuper                           const  like(LOG4RPG_pLayout_t       )
     D  io_pHandle                     *
     D  i_propList                         const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  ... prototye: format, returns the logging event as a formatted string
      /IF DEFINED (DEFINE_PROCPTR)
     D SrvPgmLayout_format...
     D                 PR
     D                                     extproc(g_pLayout_format)
      /ELSE
     D SrvPgmLayout_format...
     D                 PR
     D                                     extproc('SrvPgmLayout_format')
      /ENDIF
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t)
      *
      *  ... prototye: getHeader, returns the header of the layout
      /IF DEFINED (DEFINE_PROCPTR)
     D SrvPgmLayout_getHeader...
     D                 PR                         like(LOG4RPG_header_t    )
     D                                     extproc(g_pLayout_getHeader)
      /ELSE
     D SrvPgmLayout_getHeader...
     D                 PR                         like(LOG4RPG_header_t    )
     D                                     extproc('SrvPgmLayout_getHeader')
      /ENDIF
     D  i_pHandle                      *   const
      *
      *  ... prototye: getFooter, returns the footer of the layout
      /IF DEFINED (DEFINE_PROCPTR)
     D SrvPgmLayout_getFooter...
     D                 PR                         like(LOG4RPG_footer_t    )
     D                                     extproc(g_pLayout_getFooter)
      /ELSE
     D SrvPgmLayout_getFooter...
     D                 PR                         like(LOG4RPG_footer_t    )
     D                                     extproc('SrvPgmLayout_getFooter')
      /ENDIF
     D  i_pHandle                      *   const
      *
      *  ... prototye: setProperties, sets the proeprties for the layout
      /IF DEFINED (DEFINE_PROCPTR)
     D SrvPgmLayout_setProperties...
     D                 PR
     D                                     extproc(g_pLayout_setProperties)
      /ELSE
     D SrvPgmLayout_setProperties...
     D                 PR
     D                                     extproc('SrvPgmLayout_setProperties')
      /ENDIF
     D  i_pHandle                      *   const
     D  i_propList                         const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  ... prototye: delete, returns TRUE on success else FALSE
      /IF DEFINED (DEFINE_PROCPTR)
     D SrvPgmLayout_delete...
     D                 PR              N   extproc(g_pLayout_delete)
      /ELSE
     D SrvPgmLayout_delete...
     D                 PR              N   extproc('SrvPgmLayout_delete')
      /ENDIF
     D  io_pHandle                     *
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG  "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Type Definitions          public"
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG)
      /DEFINE PLOG4RPG
      *
      /IF NOT DEFINED(LOGGER_STUB)
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      /COPY QLOG4RPG,FDMSG
      *
      * -----------------------------------------
      *  Type Definitions
      * -----------------------------------------
     D LOG4RPG_text_t...
     D                 S           2048A   varying             based(pDummy)
      *
     D LOG4RPG_msg_t...
     D                 DS                  likeds(msg_t    )   based(pDummy)
      *
     D LOG4RPG_header_t...
     D                 S           4096A   varying             based(pDummy)
      *
     D LOG4RPG_footer_t...
     D                 S                   like(LOG4RPG_header_t)
     D                                                         based(pDummy)
      *
     D LOG4RPG_formattedText_t...
     D                 S           4096A   varying             based(pDummy)
      *
     D cLOG4RPG_MAX_TEXT_LENGTH...
     D                 C                   const(4096)
      *
     D LOG4RPG_level_t...
     D                 S             10A   varying             based(pDummy)
     D LOG4RPG_priority_t...
     D                 S             10I 0                     based(pDummy)
     D LOG4RPG_hLogger_t...
     D                 S               *                       based(pDummy)
     D LOG4RPG_loggerName_t...
     D                 S            128A   varying             based(pDummy)
     D LOG4RPG_debugMode_t...
     D                 S             10A   varying             based(pDummy)
     D LOG4RPG_debugOutput_t...
     D                 S             10A   varying             based(pDummy)
     D LOG4RPG_path_t...
     D                 S            256A   varying             based(pDummy)
     D LOG4RPG_implClass_t...
     D                 S            128A   varying             based(pDummy)
      *
     D LOG4RPG_pAppender_t...
     D                 S               *                           based(pDummy)
     D LOG4RPG_appenderName_t...
     D                 S             32A   varying             based(pDummy)
     D LOG4RPG_pFilter_t...
     D                 S               *                           based(pDummy)
     D LOG4RPG_filterName_t...
     D                 S             32A   varying                 based(pDummy)
     D LOG4RPG_pLayout_t...
     D                 S               *                           based(pDummy)
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      *  Special value *SEARCH for the library name when loading properties from
      *  a physical file member. When *SEARCH is specified as the library name,
      *  all files in the library list that matches the specified file name are
      *  searched for the member. The first member that is found is used to load
      *  the configuration data.
     D cLOG4RPG_LIB_SEARCH...
     D                 C                   const('*SEARCH')
      *
      *  Default time to wait (in minutes) to check the properties file for changes.
     D cLOG4RPG_CONFIGURATION_DEFAULT_RELOAD_DELAY...
     D                 C                   const(1)
     D cLOG4RPG_CONFIGURATION_DEFAULT_RELOAD_DELAY_UNIT...
     D                 C                   const('*MINUTES')
      *
      *  Debug Level:                 log4rpg.loggerName=
     D cLOG4RPG_LEVEL_DEBUG...
     D                 C                   const('DEBUG')
     D cLOG4RPG_LEVEL_INFO...
     D                 C                   const('INFO')
     D cLOG4RPG_LEVEL_WARN...
     D                 C                   const('WARN')
     D cLOG4RPG_LEVEL_ERROR...
     D                 C                   const('ERROR')
     D cLOG4RPG_LEVEL_FATAL...
     D                 C                   const('FATAL')
      *
      *  Debug mode:                 log4rpg.debug=
     D cLOG4RPG_DEBUG_QUIET...
     D                 C                   const('quiet')
     D cLOG4RPG_DEBUG_OFF...
     D                 C                   const('off')
     D cLOG4RPG_DEBUG_ON...
     D                 C                   const('on')
     D cLOG4RPG_DEBUG_VERBOSE...
     D                 C                   const('verbose')
      *
      *  Debug output:               log4rpg.debug=
     D cLOG4RPG_DEBUG_OUTPUT_PRINTER...
     D                 C                   const('printer')
     D cLOG4RPG_DEBUG_OUTPUT_STDOUT...
     D                 C                   const('stdout')
      *
      *  Boolean values
      /IF NOT DEFINED(cTrue)
      /DEFINE cTrue
     D cTrue           C                   const(*on )
      /ENDIF
      *
      /IF NOT DEFINED(cFalse)
      /DEFINE cFalse
     D cFalse          C                   const(*off)
      /ENDIF
      *
      /ENDIF
      *
      * -----------------------------------------
      *  Logger:
      * -----------------------------------------
      *
      *  Enables / Disables LOG4RPG.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_setLogging...
     D                 PR              N
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_setLogging+
     D                                     ')
      /ELSE
     D Impl_Logger_setLogging...
     D                 PR              N
     D                                     extproc(
     D                                     g_procptr.setLogging
     D                                     )
      /ENDIF
     D  i_isLogging                    N   const
      *
      *  Returns whether logging is enabled or not.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_isLogging...
     D                 PR              N
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_isLogging+
     D                                     ')
      /ELSE
     D Impl_Logger_isLogging...
     D                 PR              N
     D                                     extproc(
     D                                     g_procptr.isLogging
     D                                     )
      /ENDIF
      *
      *  Returns the root logger.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_getRootLogger...
     D                 PR                         like(LOG4RPG_hLogger_t )
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_getRootLogger+
     D                                     ')
      /ELSE
     D Impl_Logger_getRootLogger...
     D                 PR                         like(LOG4RPG_hLogger_t )
     D                                     extproc(
     D                                     g_procptr.getRootLogger
     D                                     )
      /ENDIF
      *
      *  Returns a new logger named as the specified name.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_getLogger...
     D                 PR                         like(LOG4RPG_hLogger_t )
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_getLogger+
     D                                     ')
      /ELSE
     D Impl_Logger_getLogger...
     D                 PR                         like(LOG4RPG_hLogger_t )
     D                                     extproc(
     D                                     g_procptr.getLogger
     D                                     )
      /ENDIF
     D  i_logName                          const  like(LOG4RPG_loggerName_t)
      *
      *  Logs a DEBUG statement.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_debug...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_debug+
     D                                     ')
      /ELSE
     D Impl_Logger_debug...
     D                 PR
     D                                     extproc(
     D                                     g_procptr.debug
     D                                     )
      /ENDIF
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_text                             const  like(LOG4RPG_text_t    )
      *
      *  Logs a DEBUG message.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_debugMsg...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_debugMsg+
     D                                     ')
      /ELSE
     D Impl_Logger_debugMsg...
     D                 PR
     D                                     extproc(
     D                                     g_procptr.debugMsg
     D                                     )
      /ENDIF
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_msg                              const  likeds(LOG4RPG_msg_t   )
      *
      *  Logs an INFO statement.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_info...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_info+
     D                                     ')
      /ELSE
     D Impl_Logger_info...
     D                 PR
     D                                     extproc(
     D                                     g_procptr.info
     D                                     )
      /ENDIF
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_text                             const  like(LOG4RPG_text_t    )
      *
      *  Logs an INFO message.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_infoMsg...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_infoMsg+
     D                                     ')
      /ELSE
     D Impl_Logger_infoMsg...
     D                 PR
     D                                     extproc(
     D                                     g_procptr.infoMsg
     D                                     )
      /ENDIF
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_msg                              const  likeds(LOG4RPG_msg_t   )
      *
      *  Logs a WARN statement.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_warn...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_warn+
     D                                     ')
      /ELSE
     D Impl_Logger_warn...
     D                 PR
     D                                     extproc(
     D                                     g_procptr.warn
     D                                     )
      /ENDIF
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_text                             const  like(LOG4RPG_text_t    )
      *
      *  Logs a WARN message.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_warnMsg...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_warnMsg+
     D                                     ')
      /ELSE
     D Impl_Logger_warnMsg...
     D                 PR
     D                                     extproc(
     D                                     g_procptr.warnMsg
     D                                     )
      /ENDIF
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_msg                              const  likeds(LOG4RPG_msg_t   )
      *
      *  Logs an ERROR statement.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_error...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_error+
     D                                     ')
      /ELSE
     D Impl_Logger_error...
     D                 PR
     D                                     extproc(
     D                                     g_procptr.error
     D                                     )
      /ENDIF
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_text                             const  like(LOG4RPG_text_t    )
      *
      *  Logs an ERROR message.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_errorMsg...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_errorMsg+
     D                                     ')
      /ELSE
     D Impl_Logger_errorMsg...
     D                 PR
     D                                     extproc(
     D                                     g_procptr.errorMsg
     D                                     )
      /ENDIF
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_msg                              const  likeds(LOG4RPG_msg_t   )
      *
      *  Logs a FATAL error statement.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_fatal...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_fatal+
     D                                     ')
      /ELSE
     D Impl_Logger_fatal...
     D                 PR
     D                                     extproc(
     D                                     g_procptr.fatal
     D                                     )
      /ENDIF
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_text                             const  like(LOG4RPG_text_t    )
      *
      *  Logs a FATAL error message.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_fatalMsg...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_fatalMsg+
     D                                     ')
      /ELSE
     D Impl_Logger_fatalMsg...
     D                 PR
     D                                     extproc(
     D                                     g_procptr.fatalMsg
     D                                     )
      /ENDIF
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_msg                              const  likeds(LOG4RPG_msg_t   )
      *
      *  Logs the specified statement without further checking.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_forcedLog...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_forcedLog+
     D                                     ')
      /ELSE
     D Impl_Logger_forcedLog...
     D                 PR
     D                                     extproc(
     D                                     g_procptr.forcedLog
     D                                     )
      /ENDIF
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_level                            const  like(LOG4RPG_level_t   )
     D  i_text                             const  like(LOG4RPG_text_t    )
      *
      *  Logs the specified message without further checking.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_forcedLogMsg...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_forcedLogMsg+
     D                                     ')
      /ELSE
     D Impl_Logger_forcedLogMsg...
     D                 PR
     D                                     extproc(
     D                                     g_procptr.forcedLogMsg
     D                                     )
      /ENDIF
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_level                            const  like(LOG4RPG_level_t   )
     D  i_msg                              const  likeds(LOG4RPG_msg_t   )
      *
      *  Returns cTrue if 'DEBUG' log events are logged.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_isDebugEnabled...
     D                 PR              N
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_isDebugEnabled+
     D                                     ')
      /ELSE
     D Impl_Logger_isDebugEnabled...
     D                 PR              N
     D                                     extproc(
     D                                     g_procptr.isDebugEnabled
     D                                     )
      /ENDIF
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  Returns cTrue if 'INFO' log events are logged.
      *  (Including DEBUG log events)
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_isInfoEnabled...
     D                 PR              N
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_isInfoEnabled+
     D                                     ')
      /ELSE
     D Impl_Logger_isInfoEnabled...
     D                 PR              N
     D                                     extproc(
     D                                     g_procptr.isInfoEnabled
     D                                     )
      /ENDIF
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  Returns cTrue if 'WARN' log events are logged.
      *  (Including INFO and DEBUG log events)
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_isWarnEnabled...
     D                 PR              N
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_isWarnEnabled+
     D                                     ')
      /ELSE
     D Impl_Logger_isWarnEnabled...
     D                 PR              N
     D                                     extproc(
     D                                     g_procptr.isWarnEnabled
     D                                     )
      /ENDIF
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  Returns cTrue if 'ERROR' log events are logged.
      *  (Including WARN, INFO and DEBUG log events)
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_isErrorEnabled...
     D                 PR              N
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_isErrorEnabled+
     D                                     ')
      /ELSE
     D Impl_Logger_isErrorEnabled...
     D                 PR              N
     D                                     extproc(
     D                                     g_procptr.isErrorEnabled
     D                                     )
      /ENDIF
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  Returns cTrue if 'FATAL' log events are logged.
      *  (Including ERROR, WARN, INFO and DEBUG log events)
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_isFatalEnabled...
     D                 PR              N
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_isFatalEnabled+
     D                                     ')
      /ELSE
     D Impl_Logger_isFatalEnabled...
     D                 PR              N
     D                                     extproc(
     D                                     g_procptr.isFatalEnabled
     D                                     )
      /ENDIF
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  Returns the name of the specified logger.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_getName...
     D                 PR                         like(LOG4RPG_loggerName_t)
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_getName+
     D                                     ')
      /ELSE
     D Impl_Logger_getName...
     D                 PR                         like(LOG4RPG_loggerName_t)
     D                                     extproc(
     D                                     g_procptr.getName
     D                                     )
      /ENDIF
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t   )
      *
      *  Test the specified logger handle for a NULL value.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_isNull...
     D                 PR              N
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_isNull+
     D                                     ')
      /ELSE
     D Impl_Logger_isNull...
     D                 PR              N
     D                                     extproc(
     D                                     g_procptr.isNull
     D                                     )
      /ENDIF
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  Returns a NULL handle.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_null...
     D                 PR                         like(LOG4RPG_hLogger_t )
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_null+
     D                                     ')
      /ELSE
     D Impl_Logger_null...
     D                 PR                         like(LOG4RPG_hLogger_t )
     D                                     extproc(
     D                                     g_procptr.null
     D                                     )
      /ENDIF
      *
      *  Sets the logging level of the specified logger.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_setLevel...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_setLevel+
     D                                     ')
      /ELSE
     D Impl_Logger_setLevel...
     D                 PR
     D                                     extproc(
     D                                     g_procptr.setLevel
     D                                     )
      /ENDIF
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_level                            const  like(LOG4RPG_level_t   )
      *
      *  Allows to enable/disable log4rpg internal logging.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_setInternalDebugging...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_setInternalDebugging+
     D                                     ')
      /ELSE
     D Impl_Logger_setInternalDebugging...
     D                 PR
     D                                     extproc(
     D                                     g_procptr.setInternalDebugging
     D                                     )
      /ENDIF
     D  i_debugMode                        const  like(LOG4RPG_debugMode_t  )
     D  i_output                           const  like(LOG4RPG_debugOutput_t)
     D                                            options(*nopass)
      *
      *  Returns the internal debug mode.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_getInternalDebugMode...
     D                 PR                         like(LOG4RPG_debugMode_t  )
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_getInternalDebugMode+
     D                                     ')
      /ELSE
     D Impl_Logger_getInternalDebugMode...
     D                 PR                         like(LOG4RPG_debugMode_t  )
     D                                     extproc(
     D                                     g_procptr.getInternalDebugMode
     D                                     )
      /ENDIF
      *
      *  Returns the target for internal log events.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_getInternalDebugOutput...
     D                 PR                         like(LOG4RPG_debugOutput_t)
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_getInternalDebugOutput+
     D                                     ')
      /ELSE
     D Impl_Logger_getInternalDebugOutput...
     D                 PR                         like(LOG4RPG_debugOutput_t)
     D                                     extproc(
     D                                     g_procptr.getInternalDebugOutput
     D                                     )
      /ENDIF
      *
      * -----------------------------------------
      *  Prototypes of 'Configurator'
      *  (copied from PLOG4RPG08)
      * -----------------------------------------
      *
      *  Loads a default configuration.
      /IF NOT DEFINED(LOGGER_STUB)
     D Configurator_loadDefaultConfiguration...
     D                 PR              N
     D                                     extproc('LOG4RPG08+
     D                                     _Configurator_+
     D                                     loadDefaultConfiguration+
     D                                     ')
      /ELSE
     D Impl_Configurator_loadDefaultConfiguration...
     D                 PR              N
     D                                     extproc(
     D                                     g_procptr.load...
     D                                     DefaultConfiguration)
      /ENDIF
      *
      *  Configures LOG4RPG from a properties file.
      /IF NOT DEFINED(LOGGER_STUB)
     D Configurator_loadPropertiesConfiguration...
     D                 PR              N
     D                                     extproc('LOG4RPG08+
     D                                     _Configurator_+
     D                                     loadPropertiesConfiguration+
     D                                     ')
      /ELSE
     D Impl_Configurator_loadPropertiesConfiguration...
     D                 PR              N
     D                                     extproc(
     D                                     g_procptr.load...
     D                                     PropertiesConfiguration)
      /ENDIF
     D  i_path                             const  like(LOG4RPG_path_t   )
      *
      *  Configures LOG4RPG from a properties file. Watches the properties
      *  file for changes and reloads the configuration on changes.
      /IF NOT DEFINED(LOGGER_STUB)
     D Configurator_loadAndWatchPropertiesConfiguration...
     D                 PR              N
     D                                     extproc('LOG4RPG08+
     D                                     _Configurator_+
     D                                     loadAndWatchPropertiesConfiguration+
     D                                     ')
      /ELSE
     D Impl_Configurator_loadAndWatchPropertiesConfiguration...
     D                 PR              N
     D                                     extproc(
     D                                     g_procptr.loadAndWatch...
     D                                     PropertiesConfiguration
     D                                     )
      /ENDIF
     D  i_path                             const  like(LOG4RPG_path_t   )
     D  i_waitMinutes                10I 0 const  options(*nopass)
     D  i_unit                       10A   const  options(*nopass)
      *
      *  Clears all configuration data.
      /IF NOT DEFINED(LOGGER_STUB)
     D Configurator_clearConfiguration...
     D                 PR
     D                                     extproc('LOG4RPG08+
     D                                     _Configurator_clearConfiguration+
     D                                     ')
      /ELSE
     D Impl_Configurator_clearConfiguration...
     D                 PR
     D                                     extproc(
     D                                     g_procptr.clearConfiguration
     D                                     )
      /ENDIF
      *
      *  Creates a new layout.
      /IF NOT DEFINED(LOGGER_STUB)
     D Layout_new...
     D                 PR                         like(LOG4RPG_pLayout_t      )
     D                                     extproc('LOG4RPG11+
     D                                     _Layout_new+
     D                                     ')
      /ELSE
     D Impl_Layout_new...
     D                 PR                         like(LOG4RPG_pLayout_t      )
     D                                     extproc(
     D                                     g_procptr.Layout_new
     D                                     )
      /ENDIF
     D  i_layoutImpl                       const  like(LOG4RPG_implClass_t     )
     D  i_pPropString                  *   const  options(*nopass:
     D                                                    *omit  : *string)
      *
      *  Returns a NULL layout.
      /IF NOT DEFINED(LOGGER_STUB)
     D Layout_null...
     D                 PR                         like(LOG4RPG_pLayout_t      )
     D                                     extproc('LOG4RPG11+
     D                                     _Layout_null+
     D                                     ')
      /ELSE
     D Impl_Layout_null...
     D                 PR                         like(LOG4RPG_pLayout_t      )
     D                                     extproc(
     D                                     g_procptr.Layout_null
     D                                     )
      /ENDIF
      *
      *  Creates a new appender.
      /IF NOT DEFINED(LOGGER_STUB)
     D Appender_new...
     D                 PR                         like(LOG4RPG_pAppender_t    )
     D                                     extproc('LOG4RPG03+
     D                                     _Appender_new+
     D                                     ')
      /ELSE
     D Impl_Appender_new...
     D                 PR                         like(LOG4RPG_pAppender_t    )
     D                                     extproc(
     D                                     g_procptr.Appender_New
     D                                     )
      /ENDIF
     D  i_appName                          const  like(LOG4RPG_appenderName_t  )
     D  i_appImpl                          const  like(LOG4RPG_implClass_t     )
     D  i_pPropString                  *   const  options(*nopass:
     D                                                    *omit  : *string)
      *
      *  Returns a NULL appender.
      /IF NOT DEFINED(LOGGER_STUB)
     D Appender_null...
     D                 PR                         like(LOG4RPG_pAppender_t    )
     D                                     extproc('LOG4RPG03+
     D                                     _Appender_null+
     D                                     ')
      /ELSE
     D Impl_Appender_null...
     D                 PR                         like(LOG4RPG_pAppender_t    )
     D                                     extproc(
     D                                     g_procptr.Appender_null
     D                                     )
      /ENDIF
      *
      *  Sets the layout for the specified appender.
      /IF NOT DEFINED(LOGGER_STUB)
     D Appender_setLayout...
     D                 PR              N
     D                                     extproc('LOG4RPG03+
     D                                     _Appender_setLayout+
     D                                     ')
      /ELSE
     D Impl_Appender_setLayout...
     D                 PR              N
     D                                     extproc(
     D                                     g_procptr.Appender_setLayout
     D                                     )
      /ENDIF
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t     )
     D  i_pLayout                          const  like(LOG4RPG_pLayout_t       )
      *
      *  Sets the filter for the specified appender.
      /IF NOT DEFINED(LOGGER_STUB)
     D Appender_setFilter...
     D                 PR              N
     D                                     extproc('LOG4RPG03+
     D                                     _Appender_setFilter+
     D                                     ')
      /ELSE
     D Impl_Appender_setFilter...
     D                 PR              N
     D                                     extproc(
     D                                     g_procptr.Appender_setFilter
     D                                     )
      /ENDIF
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t     )
     D  i_pFilter                          const  like(LOG4RPG_pFilter_t       )
      *
      *  Adds an appender to the specified logger.
      /IF NOT DEFINED(LOGGER_STUB)
     D Logger_addAppender...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_addAppender+
     D                                     ')
      /ELSE
     D Impl_Logger_addAppender...
     D                 PR
     D                                     extproc(
     D                                     g_procptr.Logger_addAppender
     D                                     )
      /ENDIF
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t       )
     D  i_hAppender                        const  like(LOG4RPG_pAppender_t     )
      *
      *  Creates a new filter.
      /IF NOT DEFINED(LOGGER_STUB)
     D Filter_new...
     D                 PR                         like(LOG4RPG_pFilter_t       )
     D                                     extproc('LOG4RPG17+
     D                                     _Filter_new+
     D                                     ')
      /ELSE
     D Impl_Filter_new...
     D                 PR                         like(LOG4RPG_pFilter_t       )
     D                                     extproc(
     D                                     g_procptr.Filter_new
     D                                     )
      /ENDIF
     D  i_fltName                          const  like(LOG4RPG_filterName_t    )
     D  i_fltImpl                          const  like(LOG4RPG_implClass_t     )
     D  i_pPropString                  *   const  options(*nopass:
     D                                                    *omit  : *string)
      *
      *  Returns a NULL filter.
      /IF NOT DEFINED(LOGGER_STUB)
     D Filter_null...
     D                 PR                         like(LOG4RPG_pFilter_t       )
     D                                     extproc('LOG4RPG17+
     D                                     _Filter_null+
     D                                     ')
      /ELSE
     D Impl_Filter_null...
     D                 PR                         like(LOG4RPG_pFilter_t       )
     D                                     extproc(
     D                                     g_procptr.Filter_null
     D                                     )
      /ENDIF
      *
      *  Sets the next filter of the filter chain.
      /IF NOT DEFINED(LOGGER_STUB)
     D Filter_setNext...
     D                 PR
     D                                     extproc('LOG4RPG17+
     D                                     _Filter_setNext+
     D                                     ')
      /ELSE
     D Impl_Filter_setNext...
     D                 PR
     D                                     extproc(
     D                                     g_procptr.Filter_setNext
     D                                     )
      /ENDIF
     D  i_pFilter                          const  like(LOG4RPG_pFilter_t     )
     D  i_pNextFilter                      const  like(LOG4RPG_pFilter_t     )
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG00  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG00"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Stub                            "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG00)
      /DEFINE PLOG4RPG00
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      *
      *  Loads the LOG4RPG service program and forwards all requests to it.
     D LoggerStub_loadSrvPgm...
     D                 PR
     D                                     extproc('LOG4RPG00+
     D                                     _LoggerStub_loadSrvPgm+
     D                                     ')
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG01  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG01"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: Logger                  "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG01)
      /DEFINE PLOG4RPG01
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PTYPES                        Private type definitions
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *    Refer to: PLOG4RPG
      *
      *  Creates a new logger instance.
     D Logger_new...
     D                 PR                         like(LOG4RPG_hLogger_t )
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_new+
     D                                     ')
     D  i_logName                          const  like(LOG4RPG_loggerName_t)
      *
      *  Resets the logging level of the specified logger to use the
      *  log level of the parent logger.
     D Logger_resetLevel...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_resetLevel+
     D                                     ')
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  Adds an appender to the specified logger.
      *  ==> PLOG4RPG
      *
      *  Removes the specified appender from a given logger.
     D Logger_removeAppender...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_removeAppender+
     D                                     ')
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t       )
     D  i_appName                          const  like(LOG4RPG_appenderName_t  )
      *
      *  Removes all appenders from the specified logger.
     D Logger_removeAllAppenders...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_removeAllAppenders+
     D                                     ')
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t   )
      *
      *  Deletes a logger.
     D Logger_delete...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_delete+
     D                                     ')
     D  io_hLogger                                like(LOG4RPG_hLogger_t )
      *
      *  Adds a child to the specified logger node.
     D Logger_addChild...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_addChild+
     D                                     ')
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_hChild                           const  like(LOG4RPG_hLogger_t )
      *
      *  Sets the parent logger of the specified logger.
     D Logger_setParent...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_setParent+
     D                                     ')
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_hParent                          const  like(LOG4RPG_hLogger_t )
      *
      *  Returns the parent of the specified logger.
     D Logger_getParent...
     D                 PR                         like(LOG4RPG_hLogger_t )
     D                                     extproc('LOG4RPG01+
     D                                     _Logger_getParent+
     D                                     ')
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  returns the name of a given Node.
     D Node_getName...
     D                 PR                         like(LOG4RPG_loggerName_t)
     D                                     extproc('LOG4RPG01+
     D                                     _Node_getName+
     D                                     ')
     D  i_hNode                            const  like(LOG4RPG_hLogger_t )
      *
      *  Test the specified logger handle for a logger node.
     D Node_isLoggerNode...
     D                 PR              N
     D                                     extproc('LOG4RPG01+
     D                                     _Node_isLoggerNode+
     D                                     ')
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  Test the specified logger handle for a provision node.
     D Node_isProvisionNode...
     D                 PR              N
     D                                     extproc('LOG4RPG01+
     D                                     _Node_isProvisionNode+
     D                                     ')
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  Returns the number of children of the specified node.
     D Node_getNumChildren...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG01+
     D                                     _Node_getNumChildren+
     D                                     ')
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t   )
      *
      *  Returns a reference to a child of the specified node.
     D Node_getChild...
     D                 PR                         like(LOG4RPG_hLogger_t   )
     D                                     extproc('LOG4RPG01+
     D                                     _Node_getChild+
     D                                     ')
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t   )
     D  i_index                      10I 0 const
      *
      *  Adds a child to the specified node.
     D Node_addChild...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG01+
     D                                     _Node_addChild+
     D                                     ')
     D  i_hNode                            const  like(LOG4RPG_hLogger_t   )
     D  i_hChild                           const  like(LOG4RPG_hLogger_t   )
      *
      *  Sets the parent node of the specified node.
     D Node_setParent...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _Node_setParent+
     D                                     ')
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
     D  i_hParent                          const  like(LOG4RPG_hLogger_t )
      *
      *  Returns the parent node of a given node.
     D Node_getParent...
     D                 PR                         like(LOG4RPG_hLogger_t )
     D                                     extproc('LOG4RPG01+
     D                                     _Node_getParent+
     D                                     ')
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  Removes a child from the list of children of the specified node.
     D Node_removeChild...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG01+
     D                                     _Node_removeChild+
     D                                     ')
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t   )
     D  i_index                      10I 0 const
      *
      *  Searches the children of a given node for a given child.
     D Node_findChild...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG01+
     D                                     _Node_findChild+
     D                                     ')
     D  i_hNode                            const  like(LOG4RPG_hLogger_t )
     D  i_hChild                           const  like(LOG4RPG_hLogger_t )
      *
      *  Tests the specified node handle for a NULL value.
     D Node_isNull...
     D                 PR              N
     D                                     extproc('LOG4RPG01+
     D                                     _Node_isNull+
     D                                     ')
     D  i_hNode                            const  like(LOG4RPG_hLogger_t )
      *
      *  Returns a node NULL handle.
     D Node_null...
     D                 PR                         like(LOG4RPG_hLogger_t )
     D                                     extproc('LOG4RPG01+
     D                                     _Node_null+
     D                                     ')
      *
      *  Returns a brief description of the node.
     D Node_toString...
     D                 PR           117A          varying
     D                                     extproc('LOG4RPG01+
     D                                     _Node_toString+
     D                                     ')
     D  i_hNode                            const  like(LOG4RPG_hLogger_t   )
      *
      *  Returns the number of children of the specified provision node.
     D ProvisionNode_getNumChildren...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG01+
     D                                     _ProvisionNode_getNumChildren+
     D                                     ')
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t   )
      *
      *  Adds a child to the specified provision node.
     D ProvisionNode_addChild...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG01+
     D                                     _ProvisionNode_addChild+
     D                                     ')
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t   )
     D  i_hChild                           const  like(LOG4RPG_hLogger_t   )
      *
      *  Returns a reference to a child of the specified provision node.
     D ProvisionNode_getChild...
     D                 PR                         like(LOG4RPG_hLogger_t   )
     D                                     extproc('LOG4RPG01+
     D                                     _ProvisionNode_getChild+
     D                                     ')
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t   )
     D  i_index                      10I 0 const
      *
      *  Removes a child from the list of children of the specified logger.
     D ProvisionNode_removeChild...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG01+
     D                                     _ProvisionNode_removeChild+
     D                                     ')
     D  i_hLogger                          const  like(LOG4RPG_hLogger_t   )
     D  i_index                      10I 0 const
      *
      *  Sets the parent node of the specified logger.
     D ProvisionNode_setParent...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _ProvisionNode_setParent+
     D                                     ')
     D  i_hProvNode                        const  like(LOG4RPG_hLogger_t )
     D  i_hParent                          const  like(LOG4RPG_hLogger_t )
      *
      *  Returns the parent node of a given provision node.
     D ProvisionNode_getParent...
     D                 PR                         like(LOG4RPG_hLogger_t )
     D                                     extproc('LOG4RPG01+
     D                                     _ProvisionNode_getParent+
     D                                     ')
     D  i_hProvNode                        const  like(LOG4RPG_hLogger_t )
      *
      *  Factory: Produces a provision node and adds a child to it.
     D ProvisionNode_makeProvisionNode...
     D                 PR                         like(LOG4RPG_hLogger_t )
     D                                     extproc('LOG4RPG01+
     D                                     _ProvisionNode_makeProvisionNode+
     D                                     ')
     D  i_logName                          const  like(LOG4RPG_loggerName_t)
     D  i_hChild                           const  like(LOG4RPG_hLogger_t   )
      *
      *  Frees a provision node.
     D ProvisionNode_free...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _ProvisionNode_free+
     D                                     ')
     D  io_hProvNode                              like(LOG4RPG_hLogger_t )
      *
      *  Moves the children to a given logger node.
     D ProvisionNode_moveChildren...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _ProvisionNode_moveChildren+
     D                                     ')
     D  i_hProvNode                               like(LOG4RPG_hLogger_t )
     D  i_hLogger                                 like(LOG4RPG_hLogger_t )
      *
      *  Tests the specified provision node handle for a NULL value.
     D ProvisionNode_isNull...
     D                 PR              N
     D                                     extproc('LOG4RPG01+
     D                                     _ProvisionNode_isNull+
     D                                     ')
     D  i_hNode                            const  like(LOG4RPG_hLogger_t )
      *
      *  Returns a provision node NULL handle.
     D ProvisionNode_null...
     D                 PR                         like(LOG4RPG_hLogger_t )
     D                                     extproc('LOG4RPG01+
     D                                     _ProvisionNode_null+
     D                                     ')
      *
      *  Sets an offset to let f_caller() skip the Log4rpg stub module
      *  if present.
      /IF NOT DEFINED(LOGGER_STUB)
     D setStubOfs...
     D                 PR
     D                                     extproc('LOG4RPG01+
     D                                     _setStubOfs Internal Use Only+
     D                                     ')
      /ELSE
     D setStubOfs...
     D                 PR
     D                                     extproc(
     D                                     g_procptr.setStubOfs
     D                                     )
      /ENDIF
     D  i_stubOfs                     3I 0 const
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG02  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG02"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: LoggerList              "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG02)
      /DEFINE PLOG4RPG02
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG01                    Logger
      *
     D LOG4RPG_pLoggerList_t...
     D                 S               *                           based(pDummy)
      *
     D LOG4RPG_LoggerListIterator_t...
     D                 DS                  qualified               based(pDummy)
     D  pLogList                           like(LOG4RPG_pLoggerList_t )
     D  lastLog                      10I 0
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *
      *  Creates a new logger list.
     D LoggerList_new...
     D                 PR                         like(LOG4RPG_pLoggerList_t )
     D                                     extproc('LOG4RPG02+
     D                                     _LoggerList_new+
     D                                     ')
      *
      *  Returns the number of entries in a given logger list.
     D LoggerList_getNumE...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG02+
     D                                     _LoggerList_NumE+
     D                                     ')
     D  i_pLogList                         const  like(LOG4RPG_pLoggerList_t )
      *
      *  Adds a logger to a given logger list.
     D LoggerList_put...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG02+
     D                                     _LoggerList_put+
     D                                     ')
     D  i_pLogList                         const  like(LOG4RPG_pLoggerList_t )
     D  i_pLogger                          const  like(LOG4RPG_hLogger_t     )
      *
      *  Removes the specified logger from the given logger list.
     D LoggerList_remove...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG02+
     D                                     _LoggerList_remove+
     D                                     ')
     D  i_pLogList                         const  like(LOG4RPG_pLoggerList_t )
     D  i_logName                          const  like(LOG4RPG_loggerName_t  )
      *
      *  Returns the logger that matches the specified name.
     D LoggerList_get...
     D                 PR                  like(LOG4RPG_hLogger_t       )
     D                                     extproc('LOG4RPG02+
     D                                     _LoggerList_get+
     D                                     ')
     D  i_pLogList                         const  like(LOG4RPG_pLoggerList_t )
     D  i_logName                          const  like(LOG4RPG_loggerName_t  )
      *
      *  Tests, if the logger list contains the specified logger.
     D LoggerList_exist...
     D                 PR              N
     D                                     extproc('LOG4RPG02+
     D                                     _LoggerList_exist+
     D                                     ')
     D  i_pLogList                         const  like(LOG4RPG_pLoggerList_t )
     D  i_logName                          const  like(LOG4RPG_loggerName_t  )
      *
      *  Returns an iterator for the specified logger list.
     D LoggerList_getIterator...
     D                 PR                  likeds(LOG4RPG_Logger...
     D                                                    ListIterator_t   )
     D                                     extproc('LOG4RPG02+
     D                                     _LoggerList_getIterator+
     D                                     ')
     D  i_pLogList                         const  like(LOG4RPG_pLoggerList_t )
      *
      *  Returns the first logger of the specified logger list.
     D LoggerList_getFirst...
     D                 PR                  like(LOG4RPG_hLogger_t       )
     D                                     extproc('LOG4RPG02+
     D                                     _LoggerList_getFirst+
     D                                     ')
     D  io_logIter                                likeds(LOG4RPG_Logger...
     D                                                           ListIterator_t)
      *
      *  Returns the next logger of the specified logger list.
     D LoggerList_getNext...
     D                 PR                  like(LOG4RPG_hLogger_t       )
     D                                     extproc('LOG4RPG02+
     D                                     _LoggerList_getNext+
     D                                     ')
     D  io_logIter                                likeds(LOG4RPG_Logger...
     D                                                           ListIterator_t)
      *
      *  Deletes a given logger list.
     D LoggerList_delete...
     D                 PR              N
     D                                     extproc('LOG4RPG02+
     D                                     _LoggerList_delete+
     D                                     ')
     D  io_pLogList                               like(LOG4RPG_pLoggerList_t )
      *
      *  Test the specified logger list object for a NULL value.
     D LoggerList_isNull...
     D                 PR              N
     D                                     extproc('LOG4RPG02+
     D                                     _LoggerList_isNull+
     D                                     ')
     D  i_pLogList                         const  like(LOG4RPG_pLoggerList_t )
      *
      *  Returns a NULL logger list.
     D LoggerList_null...
     D                 PR                         like(LOG4RPG_pLoggerList_t )
     D                                     extproc('LOG4RPG02+
     D                                     _LoggerList_null+
     D                                     ')
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG03  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG03"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: Appender                "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG03)
      /DEFINE PLOG4RPG03
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PSHARE                        Type defs appenders, layouts, filters
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *
      *  Creates a new appender.
      *  ==> PLOG4RPG
      *
      *  Appends a message to the specified appender.
     D Appender_doAppend...
     D                 PR              N
     D                                     extproc('LOG4RPG03+
     D                                     _Appender_doAppend+
     D                                     ')
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t     )
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  Returns the name of the specified appender.
     D Appender_getName...
     D                 PR                         like(LOG4RPG_appenderName_t  )
     D                                     extproc('LOG4RPG03+
     D                                     _Appender_getName+
     D                                     ')
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t     )
      *
      *  Returns the layout of the specified appender.
     D Appender_getLayout...
     D                 PR                         like(LOG4RPG_pLayout_t       )
     D                                     extproc('LOG4RPG03+
     D                                     _Appender_getLayout+
     D                                     ')
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t     )
      *
      *  Sets the properties of the specified appender.
     D Appender_setProperties...
     D                 PR
     D                                     extproc('LOG4RPG03+
     D                                     _Appender_setProperties+
     D                                     ')
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t     )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Deletes a given appender.
     D Appender_delete...
     D                 PR              N
     D                                     extproc('LOG4RPG03+
     D                                     _Appender_delete+
     D                                     ')
     D  io_pAppender                              like(LOG4RPG_pAppender_t     )
      *
      *  Tests a given appender for a NULL value.
     D Appender_isNull...
     D                 PR              N
     D                                     extproc('LOG4RPG03+
     D                                     _Appender_isNull+
     D                                     ')
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t     )
      *
      *  Returns TRUE if the appender requires a layout.
     D Appender_requiresLayout...
     D                 PR              N
     D                                     extproc('LOG4RPG03+
     D                                     _Appender_requiresLayout+
     D                                     ')
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t     )
      *
      *  Sets the layout for the specified appender.
      *  ==> PLOG4RPG
      *
      *  Sets the filter for the specified appender.
      *  ==> PLOG4RPG
      *
      *  Returns the filter attached to the appender.
     D Appender_getFilter...
     D                 PR                         like(LOG4RPG_pFilter_t       )
     D                                     extproc('LOG4RPG03+
     D                                     _Appender_getFilter+
     D                                     ')
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t     )
      *
      *  Tests, whether the specified property is known by the
      *  super Appender.
     D Appender_knowsProperty...
     D                 PR              N
     D                                     extproc('LOG4RPG03+
     D                                     _Appender_knowsProperty+
     D                                     ')
     D  i_parameter                        const  like(LOG4RPG_Property_key_t  )
      *
      *  Returns a NULL appender.
      *  ==> PLOG4RPG
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG04  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG04"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: AppenderList            "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG04)
      /DEFINE PLOG4RPG04
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG03                    Appender
      *
     D LOG4RPG_pAppenderList_t...
     D                 S               *                           based(pDummy)
      *
     D LOG4RPG_AppenderListIterator_t...
     D                 DS                  qualified               based(pDummy)
     D  pAppList                           like(LOG4RPG_pAppenderList_t )
     D  lastApp                      10I 0
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *
      *  Creates a new appender list.
     D AppenderList_new...
     D                 PR                         like(LOG4RPG_pAppenderList_t )
     D                                     extproc('LOG4RPG04+
     D                                     _AppenderList_new+
     D                                     ')
      *
      *  Returns the number of entries in a given appender list.
     D AppenderList_getNumE...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG04+
     D                                     _AppenderList_NumE+
     D                                     ')
     D  i_pAppList                         const  like(LOG4RPG_pAppenderList_t )
      *
      *  Adds an appender to a given appender list.
     D AppenderList_put...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG04+
     D                                     _AppenderList_put+
     D                                     ')
     D  i_pAppList                         const  like(LOG4RPG_pAppenderList_t )
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t     )
      *
      *  Removes the specified appender from the given appender list.
     D AppenderList_remove...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG04+
     D                                     _AppenderList_remove+
     D                                     ')
     D  i_pAppList                         const  like(LOG4RPG_pAppenderList_t )
     D  i_appName                          const  like(LOG4RPG_appenderName_t  )
      *
      *  Returns the appender that matches the specified name.
     D AppenderList_get...
     D                 PR                  like(LOG4RPG_pAppender_t     )
     D                                     extproc('LOG4RPG04+
     D                                     _AppenderList_get+
     D                                     ')
     D  i_pAppList                         const  like(LOG4RPG_pAppenderList_t )
     D  i_appName                          const  like(LOG4RPG_appenderName_t  )
      *
      *  Tests, if the appender list contains the specified appender.
     D AppenderList_exist...
     D                 PR              N
     D                                     extproc('LOG4RPG04+
     D                                     _AppenderList_exist+
     D                                     ')
     D  i_pAppList                         const  like(LOG4RPG_pAppenderList_t )
     D  i_appName                          const  like(LOG4RPG_appenderName_t  )
      *
      *  Returns an iterator for the specified appender list.
     D AppenderList_getIterator...
     D                 PR                  likeds(LOG4RPG_Appender...
     D                                                    ListIterator_t   )
     D                                     extproc('LOG4RPG04+
     D                                     _AppenderList_getIterator+
     D                                     ')
     D  i_pAppList                         const  like(LOG4RPG_pAppenderList_t )
      *
      *  Returns the first appender of the specified appender list.
     D AppenderList_getFirst...
     D                 PR                  like(LOG4RPG_pAppender_t     )
     D                                     extproc('LOG4RPG04+
     D                                     _AppenderList_getFirst+
     D                                     ')
     D  io_appIter                                likeds(LOG4RPG_Appender...
     D                                                           ListIterator_t)
      *
      *  Returns the next appender of the specified appender list.
     D AppenderList_getNext...
     D                 PR                  like(LOG4RPG_pAppender_t     )
     D                                     extproc('LOG4RPG04+
     D                                     _AppenderList_getNext+
     D                                     ')
     D  io_appIter                                likeds(LOG4RPG_Appender...
     D                                                           ListIterator_t)
      *
      *  Deletes a given appender list.
     D AppenderList_delete...
     D                 PR              N
     D                                     extproc('LOG4RPG04+
     D                                     _AppenderList_delete+
     D                                     ')
     D  io_pAppList                               like(LOG4RPG_pAppenderList_t )
      *
      *  Test the specified appender list object for a NULL value.
     D AppenderList_isNull...
     D                 PR              N
     D                                     extproc('LOG4RPG04+
     D                                     _AppenderList_isNull+
     D                                     ')
     D  i_pAppList                         const  like(LOG4RPG_pAppenderList_t )
      *
      *  Returns a NULL appender list.
     D AppenderList_null...
     D                 PR                         like(LOG4RPG_pAppenderList_t )
     D                                     extproc('LOG4RPG04+
     D                                     _AppenderList_null+
     D                                     ')
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG06  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG06"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: Property                "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG06)
      /DEFINE PLOG4RPG06
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
     D LOG4RPG_Property_key_t...
     D                 S             64A   varying                 based(pDummy)
     D LOG4RPG_Property_value_t...
     D                 S            128A   varying                 based(pDummy)
      *
     D LOG4RPG_Property_t...
     D                 DS                  qualified               based(pDummy)
     D  key                                like(LOG4RPG_Property_key_t  )
     D  value                              like(LOG4RPG_Property_value_t)
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
    R *
    R *  Creates a new property.
    R *Property_new...
    R *                PR                         likeds(LOG4RPG_Property_t)
    R *                                    extproc('LOG4RPG06+
    R *                                    _Property_new+
    R *                                    ')
    R * i_key                              const  like(LOG4RPG_Property_key_t  )
    R * i_value                            const  like(LOG4RPG_Property_value_t)
    R *
    R *  Returns the key of a property.
    R *Property_getKey...
    R *                PR                         like(LOG4RPG_Property_key_t)
    R *                                    extproc('LOG4RPG06+
    R *                                    _Property_getKey+
    R *                                    ')
    R * i_property                         const  likeds(LOG4RPG_Property_t)
    R *
    R *  Returns the value of a property.
    R *Property_getValue...
    R *                PR                         like(LOG4RPG_Property_value_t)
    R *                                    extproc('LOG4RPG06+
    R *                                    _Property_getValue+
    R *                                    ')
    R * i_property                         const  likeds(LOG4RPG_Property_t)
    R *
    R *  Deletes a given property.
    R *Property_delete...
    R *                PR
    R *                                    extproc('LOG4RPG06+
    R *                                    _Property_delete+
    R *                                    ')
    R * io_property                               likeds(LOG4RPG_Property_t)
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG07  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG07"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: PropertyList            "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG07)
      /DEFINE PLOG4RPG07
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QBASICS1,PBASICS1                      URL
      /COPY QLOG4RPG,PLOG4RPG06                    Property
      *
     D LOG4RPG_pPropertyList_t...
     D                 S               *                           based(pDummy)
      *
     D LOG4RPG_PropertyListIterator_t...
     D                 DS                  qualified               based(pDummy)
     D  pPropList                          like(LOG4RPG_pPropertyList_t )
     D  lastProp                     10I 0
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *
      *  Creates a new property list.
     D PropertyList_new...
     D                 PR                         like(LOG4RPG_pPropertyList_t )
     D                                     extproc('LOG4RPG07+
     D                                     _PropertyList_new+
     D                                     ')
     D  i_pString                      *   const  options(*nopass:
     D                                                    *omit  : *string)
      *
      *  Loads the properties from the specified location.
     D PropertyList_loadFromUrl...
     D                 PR              N
     D                                     extproc('LOG4RPG07+
     D                                     _PropertyList_loadFromUrl+
     D                                     ')
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_url                              const  like(url_t            )
      *
      *  Returns the final URL that was used to load the properties.
     D PropertyList_getUrl...
     D                 PR                         like(url_t )
     D                                     extproc('LOG4RPG07+
     D                                     _PropertyList_getUrl+
     D                                     ')
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
      *
      *  Returns the number of entries in the specified property list.
     D PropertyList_getNumE...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG07+
     D                                     _PropertyList_getNumE+
     D                                     ')
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
      *
      *  Adds a property to the specified property list.
     D PropertyList_put...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG07+
     D                                     _PropertyList_put+
     D                                     ')
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_property                         const  likeds(LOG4RPG_Property_t    )
      *
      *  Returns the value assigned to the specified key.
     D PropertyList_get...
     D                 PR                  like(LOG4RPG_Property_value_t)
     D                                     extproc('LOG4RPG07+
     D                                     _PropertyList_get+
     D                                     ')
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_key                              const  like(LOG4RPG_Property_key_t  )
      *
      *  Returns an iterator for the specified property list.
     D PropertyList_getIterator...
     D                 PR                  likeds(LOG4RPG_Property...
     D                                                    ListIterator_t   )
     D                                     extproc('LOG4RPG07+
     D                                     _PropertyList_getIterator+
     D                                     ')
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
      *
      *  Returns the first property of the specified property list.
     D PropertyList_getFirst...
     D                 PR                  likeds(LOG4RPG_Property_t   )
     D                                     extproc('LOG4RPG07+
     D                                     _PropertyList_getFirst+
     D                                     ')
     D  io_propIter                               likeds(LOG4RPG_Property...
     D                                                           ListIterator_t)
      *
      *  Returns the next property of the specified property list.
     D PropertyList_getNext...
     D                 PR                  likeds(LOG4RPG_Property_t   )
     D                                     extproc('LOG4RPG07+
     D                                     _PropertyList_getNext+
     D                                     ')
     D  io_propIter                               likeds(LOG4RPG_Property...
     D                                                           ListIterator_t)
      *
      *  Returns true if this property list contains a mapping for the
      *  specified key.
     D PropertyList_containsKey...
     D                 PR              N
     D                                     extproc('LOG4RPG07+
     D                                     _PropertyList_containsKey+
     D                                     ')
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_key                              const  like(LOG4RPG_Property_key_t  )
      *
      *  Removes the specified property from the property list.
     D PropertyList_remove...
     D                 PR
     D                                     extproc('LOG4RPG07+
     D                                     _PropertyList_remove+
     D                                     ')
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_key                              const  like(LOG4RPG_Property_key_t  )
      *
      *  Removes all properties from the specified property list.
     D PropertyList_clear...
     D                 PR
     D                                     extproc('LOG4RPG07+
     D                                     _PropertyList_clear+
     D                                     ')
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
      *
      *  Deletes the specified given property list.
     D PropertyList_delete...
     D                 PR              N
     D                                     extproc('LOG4RPG07+
     D                                     _PropertyList_delete+
     D                                     ')
     D  io_pPropList                              like(LOG4RPG_pPropertyList_t )
      *
      *  Test the specified Property List object for a NULL value.
     D PropertyList_isNull...
     D                 PR              N
     D                                     extproc('LOG4RPG07+
     D                                     _PropertyList_isNull+
     D                                     ')
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
      *
      *  Returns a NULL properties list.
     D PropertyList_null...
     D                 PR                         like(LOG4RPG_pPropertyList_t )
     D                                     extproc('LOG4RPG07+
     D                                     _PropertyList_null+
     D                                     ')
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG08  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG08"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: Configurator            "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG08)
      /DEFINE PLOG4RPG08
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PTYPES
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *    Refer to: PLOG4RPG
      *
      *  Returns cTrue if automatic reloading of the
      *  configuration is enabled, else cFalse.
     D Configurator_isAutoReload...
     D                 PR              N
     D                                     extproc('LOG4RPG08+
     D                                     _Configurator_isAutoReload+
     D                                     ')
      *
      *  Checks for connfiguration changes and reloads
      *  the configuration data if necessary.
     D Configurator_checkAndReloadPropertiesConfiguration...
     D                 PR
     D                                     extproc('LOG4RPG08+
     D                                     _Configurator_checkAndReload+
     D                                     PropertiesConfiguration+
     D                                     ')
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG09  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG09"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: Level                   "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG09)
      /DEFINE PLOG4RPG09
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PTYPES                        Private type definitions
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
     D cLOG4RPG_PRIORITY_DEBUG...
     D                 C                   const(1)
     D cLOG4RPG_PRIORITY_INFO...
     D                 C                   const(2)
     D cLOG4RPG_PRIORITY_WARN...
     D                 C                   const(3)
     D cLOG4RPG_PRIORITY_ERROR...
     D                 C                   const(4)
     D cLOG4RPG_PRIORITY_FATAL...
     D                 C                   const(5)
     D cLOG4RPG_PRIORITY_NONE...
     D                 C                   const(99)
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *
      *  Converts the string passed as argument to an integer level.
     D Level_toInt...
     D                 PR                         like(LOG4RPG_priority_t    )
     D                                     extproc('LOG4RPG09+
     D                                     _Level_toInt+
     D                                     ')
     D  i_level                            const  like(LOG4RPG_level_t       )
      *
      *  Converts the integer passed as argument to a string level.
     D Level_toString...
     D                 PR                         like(LOG4RPG_level_t       )
     D                                     extproc('LOG4RPG09+
     D                                     _Level_toString+
     D                                     ')
     D  i_level                            const  like(LOG4RPG_priority_t    )
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG10  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG10"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: LogLog                  "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG10)
      /DEFINE PLOG4RPG10
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PTYPES                        Internal type definitions
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *
      *  Allows to enable/disable log4rpg internal logging.
     D LogLog_setInternalDebugging...
     D                 PR
     D                                     extproc('LOG4RPG10+
     D                                     _LogLog_setInternalDebugging+
     D                                     ')
     D  i_debugMode                        const  like(LOG4RPG_debugMode_t  )
     D  i_output                           const  like(LOG4RPG_debugOutput_t)
     D                                            options(*nopass)
      *
      *  Returns the internal debug mode.
     D LogLog_getInternalDebugMode...
     D                 PR                         like(LOG4RPG_debugMode_t  )
     D                                     extproc('LOG4RPG10+
     D                                     _LogLog_getInternalDebugMode+
     D                                     ')
      *
      *  Returns the target for internal log events.
     D LogLog_getInternalDebugOutput...
     D                 PR                         like(LOG4RPG_debugOutput_t)
     D                                     extproc('LOG4RPG10+
     D                                     _LogLog_getInternalDebugOutput+
     D                                     ')
      *
      *  This method is used to output log4rpg internal debug
      *  statements.
     D LogLog_debug...
     D                 PR
     D                                     extproc('LOG4RPG10+
     D                                     _LogLog_debug+
     D                                     ')
     D  i_text                             const  like(LOG4RPG_text_t    )
      *
      *  This method is used to output log4rpg internal debug
      *  messages.
     D LogLog_debugMsg...
     D                 PR
     D                                     extproc('LOG4RPG10+
     D                                     _LogLog_debugMsg+
     D                                     ')
     D  i_msg                              const  likeds(msg_t           )
      *
      *  This method is used to output log4rpg internal error
      *  statements.
     D LogLog_error...
     D                 PR
     D                                     extproc('LOG4RPG10+
     D                                     _LogLog_error+
     D                                     ')
     D  i_text                             const  like(LOG4RPG_text_t    )
      *
      *  This method is used to output log4rpg internal error
      *  messages.
     D LogLog_errorMsg...
     D                 PR
     D                                     extproc('LOG4RPG10+
     D                                     _LogLog_errorMsg+
     D                                     ')
     D  i_msg                              const  likeds(msg_t           )
      *
      *  This method is used to output log4rpg internal warning
      *  statements.
     D LogLog_warning...
     D                 PR
     D                                     extproc('LOG4RPG10+
     D                                     _LogLog_warning+
     D                                     ')
     D  i_text                             const  like(LOG4RPG_text_t    )
      *
      *  This method is used to output log4rpg internal warning
      *  messages.
     D LogLog_warningMsg...
     D                 PR
     D                                     extproc('LOG4RPG10+
     D                                     _LogLog_warningMsg+
     D                                     ')
     D  i_msg                              const  likeds(msg_t           )
      *
      *  This method is used to output log4rpg internal verbose
      *  statements.
     D LogLog_verbose...
     D                 PR
     D                                     extproc('LOG4RPG10+
     D                                     _LogLog_verbose+
     D                                     ')
     D  i_text                             const  like(LOG4RPG_text_t    )
      *
      *  This method is used to output log4rpg internal verbose
      *  messages.
     D LogLog_verboseMsg...
     D                 PR
     D                                     extproc('LOG4RPG10+
     D                                     _LogLog_verboseMsg+
     D                                     ')
     D  i_msg                              const  likeds(msg_t           )
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG11  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG11"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: Layout                  "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG11)
      /DEFINE PLOG4RPG11
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PSHARE                        Type defs appenders, layouts, filters
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *
      *  Creates a new layout.
      *  ==> PLOG4RPG
      *
      *  Formats the given string according to the layout.
     D Layout_format...
     D                 PR
     D                                     extproc('LOG4RPG11+
     D                                     _Layout_format+
     D                                     ')
     D  i_pLayout                          const  like(LOG4RPG_pLayout_t   )
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t )
      *
      *  Returns the header of the layout.
     D Layout_getHeader...
     D                 PR                         like(LOG4RPG_header_t    )
     D                                     extproc('LOG4RPG11+
     D                                     _Layout_getHeader+
     D                                     ')
     D  i_pLayout                          const  like(LOG4RPG_pLayout_t   )
      *
      *  Returns the footer of the layout.
     D Layout_getFooter...
     D                 PR                         like(LOG4RPG_footer_t    )
     D                                     extproc('LOG4RPG11+
     D                                     _Layout_getFooter+
     D                                     ')
     D  i_pLayout                          const  like(LOG4RPG_pLayout_t   )
      *
      *  Sets the properties of the specified layout.
     D Layout_setProperties...
     D                 PR
     D                                     extproc('LOG4RPG11+
     D                                     _Layout_setProperties+
     D                                     ')
     D  i_pLayout                          const  like(LOG4RPG_pLayout_t       )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Returns the new-line character.
     D Layout_newLine...
     D                 PR             2A          varying
     D                                     extproc('LOG4RPG11+
     D                                     _Layout_newLine+
     D                                     ')
      *
      *  Deletes the specified layout.
     D Layout_delete...
     D                 PR              N
     D                                     extproc('LOG4RPG11+
     D                                     _Layout_delete+
     D                                     ')
     D  io_pLayout                                like(LOG4RPG_pLayout_t       )
      *
      *  Tests, whether the specified property is known by the
      *  super Layout.
     D Layout_knowsProperty...
     D                 PR              N
     D                                     extproc('LOG4RPG11+
     D                                     _Layout_knowsProperty+
     D                                     ')
     D  i_parameter                        const  like(LOG4RPG_Property_key_t  )
      *
      *  Tests a given layout for a NULL value.
     D Layout_isNull...
     D                 PR              N
     D                                     extproc('LOG4RPG11+
     D                                     _Layout_isNull+
     D                                     ')
     D  i_pLayout                          const  like(LOG4RPG_pLayout_t       )
      *
      *  Returns a NULL layout.
      *  ==> PLOG4RPG
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG12  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG12"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: ClassLoader             "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG12)
      /DEFINE PLOG4RPG12
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PTYPES                        Private type definitions
      *
      *  Appender:
     D LOG4RPG_classAppender_t...
     D                 DS                  qualified               based(pDummy)
     D  srvPgm                             likeds(actSrvPgm_t )
     D  pHandle                        *
     D  proc                               like(LOG4RPG_procedure_t )
     D  procNew                            likeds(actProc_t   )
     D  procRequiresLayout...
     D                                     likeds(actProc_t   )
     D  procDoAppend                       likeds(actProc_t   )
     D  procSetProperties...
     D                                     likeds(actProc_t   )
     D  procDelete                         likeds(actProc_t   )
      *
      *  Layout:
     D LOG4RPG_classLayout_t...
     D                 DS                  qualified               based(pDummy)
     D  srvPgm                             likeds(actSrvPgm_t )
     D  pHandle                        *
     D  proc                               like(LOG4RPG_procedure_t )
     D  procNew                            likeds(actProc_t   )
     D  procFormat                         likeds(actProc_t   )
     D  procSetProperties...
     D                                     likeds(actProc_t   )
     D  procDelete                         likeds(actProc_t   )
     D  procGetHeader                      likeds(actProc_t   )
     D  procGetFooter                      likeds(actProc_t   )
      *
      *  Filter:
     D LOG4RPG_classFilter_t...
     D                 DS                  qualified               based(pDummy)
     D  srvPgm                             likeds(actSrvPgm_t )
     D  pHandle                        *
     D  proc                               like(LOG4RPG_procedure_t )
     D  procNew                            likeds(actProc_t   )
     D  procDecide                         likeds(actProc_t   )
     D  procSetProperties...
     D                                     likeds(actProc_t   )
     D  procDelete                         likeds(actProc_t   )
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Global fields
      * -----------------------------------------
      *  Appender:
     D g_pAppender_new...
     D                 S               *   procptr
     D g_pAppender_requiresLayout...
     D                 S               *   procptr
     D g_pAppender_doAppend...
     D                 S               *   procptr
     D g_pAppender_setProperties...
     D                 S               *   procptr
     D g_pAppender_delete...
     D                 S               *   procptr
      *
      *  Layout:
     D g_pLayout_new...
     D                 S               *   procptr
     D g_pLayout_format...
     D                 S               *   procptr
     D g_pLayout_setProperties...
     D                 S               *   procptr
     D g_pLayout_delete...
     D                 S               *   procptr
     D g_pLayout_getHeader...
     D                 S               *   procptr
     D g_pLayout_getFooter...
     D                 S               *   procptr
      *
      *  Filter:
     D g_pFilter_new...
     D                 S               *   procptr
     D g_pFilter_decide...
     D                 S               *   procptr
     D g_pFilter_setProperties...
     D                 S               *   procptr
     D g_pFilter_delete...
     D                 S               *   procptr
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *
      *  Resolves the service program that provides the implementation
      *  of an appender.
     D ClassLoader_resolveAppender...
     D                 PR              N
     D                                     extproc('LOG4RPG12+
     D                                     _ClassLoader_resolveAppender+
     D                                     ')
     D  i_value                            const like(LOG4RPG_Property_value_t )
     D  o_classAppender...
     D                                           likeds(LOG4RPG_classAppender_t)
      *
      *  Resolves the service program that provides the implementation
      *  of a layout.
     D ClassLoader_resolveLayout...
     D                 PR              N
     D                                     extproc('LOG4RPG12+
     D                                     _ClassLoader_resolveLayout+
     D                                     ')
     D  i_value                            const like(LOG4RPG_Property_value_t )
     D  o_classLayout                            likeds(LOG4RPG_classLayout_t  )
      *
      *  Resolves the service program that provides the implementation
      *  of a filter.
     D ClassLoader_resolveFilter...
     D                 PR              N
     D                                     extproc('LOG4RPG12+
     D                                     _ClassLoader_resolveFilter+
     D                                     ')
     D  i_value                            const like(LOG4RPG_Property_value_t )
     D  o_classFilter                            likeds(LOG4RPG_classFilter_t  )
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG13  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG13"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: Repository              "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG13)
      /DEFINE PLOG4RPG13
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PTYPES                        Private type definitions
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *
      *  Adds a logger to the repository.
     D Repository_addLogger...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG13+
     D                                     _Repository_addLogger+
     D                                     ')
     D  i_pLogger                          const  like(LOG4RPG_hLogger_t )
      *
      *  Removes a logger from the logger list of the repository.
     D Repository_removeLogger...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG13+
     D                                     _Repository_removeLogger+
     D                                     ')
     D  i_logName                          const  like(LOG4RPG_loggerName_t)
      *
      *  Test, whether the specified logger exists in the logger list.
     D Repository_existLogger...
     D                 PR              N
     D                                     extproc('LOG4RPG13+
     D                                     _Repository_existLogger+
     D                                     ')
     D  i_logName                          const  like(LOG4RPG_loggerName_t)
      *
      *  Searches the logger list for the specified logger.
     D Repository_getLogger...
     D                 PR                         like(LOG4RPG_hLogger_t )
     D                                     extproc('LOG4RPG13+
     D                                     _Repository_getLogger+
     D                                     ')
     D  i_logName                          const  like(LOG4RPG_loggerName_t)
      *
      *  Adds an appender to the repository.
     D Repository_addAppender...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG13+
     D                                     _Repository_addAppender+
     D                                     ')
     D  i_pAppender                        const  like(LOG4RPG_pAppender_t)
      *
      *  Removes an appender from the appender list of the repository.
     D Repository_removeAppender...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG13+
     D                                     _Repository_removeAppender+
     D                                     ')
     D  i_appName                          const  like(LOG4RPG_appenderName_t  )
      *
      *  Test, whether the specified logger exists in the logger list.
     D Repository_existAppender...
     D                 PR              N
     D                                     extproc('LOG4RPG13+
     D                                     _Repository_existAppender+
     D                                     ')
     D  i_appName                          const  like(LOG4RPG_appenderName_t  )
      *
      *  Searches the appender list for the specified appender.
     D Repository_getAppender...
     D                 PR                         like(LOG4RPG_pAppender_t    )
     D                                     extproc('LOG4RPG13+
     D                                     _Repository_getAppender+
     D                                     ')
     D  i_appName                          const  like(LOG4RPG_appenderName_t )
      *
      *  Adds a filter to the repository.
     D Repository_addFilter...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG13+
     D                                     _Repository_addFilter+
     D                                     ')
     D  i_pFilter                          const  like(LOG4RPG_pFilter_t)
      *
      *  Removes a filter from the filter list of the repository.
     D Repository_removeFilter...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG13+
     D                                     _Repository_removeFilter+
     D                                     ')
     D  i_fltName                          const  like(LOG4RPG_filterName_t  )
      *
      *  Test, whether the specified filter exists in the filter list.
     D Repository_existFilter...
     D                 PR              N
     D                                     extproc('LOG4RPG13+
     D                                     _Repository_existFilter+
     D                                     ')
     D  i_fltName                          const  like(LOG4RPG_filterName_t  )
      *
      *  Searches the filter list for the specified filter.
     D Repository_getFilter...
     D                 PR                         like(LOG4RPG_pFilter_t    )
     D                                     extproc('LOG4RPG13+
     D                                     _Repository_getFilter+
     D                                     ')
     D  i_fltName                          const  like(LOG4RPG_filterName_t )
      *
      *  Initializes the logger repositiory.
     D Repository_initialize...
     D                 PR
     D                                     extproc('LOG4RPG13+
     D                                     _Repository_initialize+
     D                                     ')
      *
      *  Prepare repository for re-loading configuration data.
     D Repository_prepareReload...
     D                 PR
     D                                     extproc('LOG4RPG13+
     D                                     _Repository_prepareReload+
     D                                     ')
      *
      *  Dumps the children of a given logger.
     D Repository_dumpHierarchy...
     D                 PR
     D                                     extproc('LOG4RPG13+
     D                                     _Repository_dumpHierarchy+
     D                                     ')
     D  i_pLogger                          const  like(LOG4RPG_hLogger_t )
     D                                            options(*nopass)
      *
      *  Clears the repository.
     D Repository_clear...
     D                 PR
     D                                     extproc('LOG4RPG13+
     D                                     _Repository_clear+
     D                                     ')
      *
      *  Clears all filters in the repository.
     D Repository_clearFilters...
     D                 PR
     D                                     extproc('LOG4RPG13+
     D                                     _Repository_clearFilters+
     D                                     ')
      *
      *  Clears all appenders in the repository.
     D Repository_clearAppenders...
     D                 PR
     D                                     extproc('LOG4RPG13+
     D                                     _Repository_clearAppenders+
     D                                     ')
      *
      *  Sets the SHUTDOWN-Flag if the repository.
     D Repository_setShutdown...
     D                 PR
     D                                     extproc('LOG4RPG13+
     D                                     _Repository_setShutdown+
     D                                     ')
     D  i_isShutdown                   N   const
      *
      *  Tests, if the repository is in SHUTDOWN mode.
     D Repository_isShutdown...
     D                 PR              N
     D                                     extproc('LOG4RPG13+
     D                                     _Repository_isShutdown+
     D                                     ')
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG14  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG14"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: DebugMode               "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG14)
      /DEFINE PLOG4RPG14
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PTYPES                        Private type definitions
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
     D cLOG4RPG_INT_DEBUG_QUIET...
     D                 C                   const(0)
     D cLOG4RPG_INT_DEBUG_OFF...
     D                 C                   const(1)
     D cLOG4RPG_INT_DEBUG_ON...
     D                 C                   const(2)
     D cLOG4RPG_INT_DEBUG_VERBOSE...
     D                 C                   const(3)
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *
      *  Converts the string passed as argument to an integer debug mode.
     D DebugMode_toInt...
     D                 PR             5I 0
     D                                     extproc('LOG4RPG14+
     D                                     _DebugMode_toInt+
     D                                     ')
     D  i_debugMode                        const  like(LOG4RPG_debugMode_t  )
      *
      *  Converts the integer passed as argument to a string debug mode.
     D DebugMode_toString...
     D                 PR                         like(LOG4RPG_debugMode_t  )
     D                                     extproc('LOG4RPG14+
     D                                     _DebugMode_toString+
     D                                     ')
     D  i_debugMode                   5I 0 const
      *
      *  Tests, if the specified debug mode is valid (well known).
     D DebugMode_isValid...
     D                 PR              N
     D                                     extproc('LOG4RPG14+
     D                                     _DebugMode_isValid+
     D                                     ')
     D  i_debugMode                        const  like(LOG4RPG_debugMode_t  )
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG15  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG15"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: DebugOutput             "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG15)
      /DEFINE PLOG4RPG15
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PTYPES                        Private type definitions
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
     D cLOG4RPG_INT_DEBUG_OUTPUT_PRINTER...
     D                 C                   const(1)
     D cLOG4RPG_INT_DEBUG_OUTPUT_STDOUT...
     D                 C                   const(2)
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *
      *  Converts the string passed as argument to an integer debug output.
     D DebugOutput_toInt...
     D                 PR             5I 0
     D                                     extproc('LOG4RPG15+
     D                                     _DebugOutput_toInt+
     D                                     ')
     D  i_debugOutput                      const  like(LOG4RPG_debugOutput_t)
      *
      *  Converts the integer passed as argument to a string debug output.
     D DebugOutput_toString...
     D                 PR                         like(LOG4RPG_debugOutput_t)
     D                                     extproc('LOG4RPG15+
     D                                     _DebugOutput_toString+
     D                                     ')
     D  i_debugOutput                 5I 0 const
      *
      *  Tests, if the specified debug output is valid (well known).
     D DebugOutput_isValid...
     D                 PR              N
     D                                     extproc('LOG4RPG15+
     D                                     _DebugOutput_isValid+
     D                                     ')
     D  i_debugOutput                      const  like(LOG4RPG_debugOutput_t)
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG16  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG16"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: LogEvent                "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG16)
      /DEFINE PLOG4RPG16
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PSHARE                        Type defs appenders, layouts, filters
      *
     D LOG4RPG_pLogEvent_t...
     D                 S               *                       based(pDummy)
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *
      *  Produces a new log event.
     D LogEvent_new...
     D                 PR                         like(LOG4RPG_pLogEvent_t)
     D                                     extproc('LOG4RPG16+
     D                                     _LogEvent_new+
     D                                     ')
     D  i_logName                          const  like(LOG4RPG_loggerName_t    )
     D  i_priority                         const  like(LOG4RPG_priority_t      )
     D  i_text                             const  like(LOG4RPG_formattedText_t )
     D                                            options(*varsize)
     D  i_caller                           const  likeds(LOG4RPG_caller_t      )
      *
      *  Returns the property list of the log event.
     D LogEvent_getPropertyList...
     D                 PR                         like(LOG4RPG_pPropertyList_t)
     D                                     extproc('LOG4RPG16+
     D                                     _LogEvent_getPropertyList+
     D                                     ')
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t    )
      *
      *  Sets the text of the log event
     D LogEvent_setText...
     D                 PR
     D                                     extproc('LOG4RPG16+
     D                                     _LogEvent_setText+
     D                                     ')
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
     D  i_text                             const  like(LOG4RPG_formattedText_t )
     D                                             options(*varsize)
      *
      *  Appends the text of the log event
     D LogEvent_appendText...
     D                 PR
     D                                     extproc('LOG4RPG16+
     D                                     _LogEvent_appendText+
     D                                     ')
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
     D  i_text                             const  like(LOG4RPG_formattedText_t )
     D                                             options(*varsize)
      *
      *  Returns the name of the logger that produced the specified log event.
     D LogEvent_getLoggerName...
     D                 PR                         like(LOG4RPG_loggerName_t    )
     D                                     extproc('LOG4RPG16+
     D                                     _LogEvent_getLoggerName+
     D                                     ')
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  Returns the priority of the log event.
     D LogEvent_getPriority...
     D                 PR                         like(LOG4RPG_priority_t      )
     D                                     extproc('LOG4RPG16+
     D                                     _LogEvent_getPriority+
     D                                     ')
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  Returns the level of the log event.
     D LogEvent_getLevel...
     D                 PR                         like(LOG4RPG_level_t         )
     D                                     extproc('LOG4RPG16+
     D                                     _LogEvent_getLevel+
     D                                     ')
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  Returns the time at which the log event was produced.
     D LogEvent_getTime...
     D                 PR              Z
     D                                     extproc('LOG4RPG16+
     D                                     _LogEvent_getTime+
     D                                     ')
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  Returns the qualified name of the procedure that called the logger.
     D LogEvent_getCaller...
     D                 PR                         likeds(LOG4RPG_caller_t      )
     D                                     extproc('LOG4RPG16+
     D                                     _LogEvent_getCaller+
     D                                     ')
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  Resolves the name of the library of the program that called Log4rpg.
     D LogEvent_resolveCallerPgmLibrary...
     D                 PR            10A
     D                                     extproc('LOG4RPG16+
     D                                     _LogEvent_resolveCallerPgmLibrary+
     D                                     ')
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  Returns the log event text.
     D LogEvent_getText...
     D                 PR                         like(LOG4RPG_formattedText_t )
     D                                     extproc('LOG4RPG16+
     D                                     _LogEvent_getText+
     D                                     ')
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  Returns a pointer to the log event text.
     D LogEvent_getTextPointer...
     D                 PR              *
     D                                     extproc('LOG4RPG16+
     D                                     _LogEvent_getTextPointer+
     D                                     ')
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  Returns the length of the log event text.
     D LogEvent_textLength...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG16+
     D                                     _LogEvent_textLength+
     D                                     ')
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  Returns the first line of text.
     D LogEvent_getFirstLineOfText...
     D                 PR                         like(LOG4RPG_formattedText_t )
     D                                     extproc('LOG4RPG16+
     D                                     _LogEvent_getFirstLineOfText+
     D                                     ')
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
     D  o_isText                       N
     D  i_width                      10U 0 const  options(*nopass)
      *
      *  Returns the next line of text.
     D LogEvent_getNextLineOfText...
     D                 PR                         like(LOG4RPG_formattedText_t )
     D                                     extproc('LOG4RPG16+
     D                                     _LogEvent_getNextLineOfText+
     D                                     ')
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
     D  o_isText                       N
     D  i_width                      10U 0 const  options(*nopass)
      *
      *  Deletes a given log event.
     D LogEvent_delete...
     D                 PR
     D                                     extproc('LOG4RPG16+
     D                                     _LogEvent_delete+
     D                                     ')
     D  io_pLogEvent                              like(LOG4RPG_pLogEvent_t     )
      *
      *  Tests a given log event for a NULL value.
     D LogEvent_isNull...
     D                 PR              N
     D                                     extproc('LOG4RPG16+
     D                                     _LogEvent_isNull+
     D                                     ')
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  Returns a NULL log event.
     D LogEvent_null...
     D                 PR                         like(LOG4RPG_pLogEvent_t     )
     D                                     extproc('LOG4RPG16+
     D                                     _LogEvent_null+
     D                                     ')
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG17  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG17"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: Filter                  "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG17)
      /DEFINE PLOG4RPG17
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PSHARE                        Type defs appenders, layouts, filters
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *
      *  Creates a new filter.
      *  ==> PLOG4RPG
      *
      *  Decides what to do with the log event.
     D Filter_decide...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG17+
     D                                     _Filter_decide+
     D                                     ')
     D  i_pFilter                          const  like(LOG4RPG_pFilter_t       )
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t     )
      *
      *  Returns the name of the filter.
     D Filter_getName...
     D                 PR                         like(LOG4RPG_filterName_t  )
     D                                     extproc('LOG4RPG17+
     D                                     _Filter_getName+
     D                                     ')
     D  i_pFilter                          const  like(LOG4RPG_pFilter_t     )
      *
      *  Returns the next filter.
     D Filter_getNext...
     D                 PR                         like(LOG4RPG_pFilter_t     )
     D                                     extproc('LOG4RPG17+
     D                                     _Filter_getNext+
     D                                     ')
     D  i_pFilter                          const  like(LOG4RPG_pFilter_t     )
      *
      *  Sets the next filter of the filter chain.
      *  ==> PLOG4RPG
      *
      *  Sets the properties of the specified filter.
     D Filter_setProperties...
     D                 PR
     D                                     extproc('LOG4RPG17+
     D                                     _Filter_setProperties+
     D                                     ')
     D  i_pFilter                          const  like(LOG4RPG_pFilter_t       )
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Tests, whether the specified property is known by the
      *  super filter.
     D Filter_knowsProperty...
     D                 PR              N
     D                                     extproc('LOG4RPG17+
     D                                     _Filter_knowsProperty+
     D                                     ')
     D  i_parameter                        const  like(LOG4RPG_Property_key_t  )
      *
      *  Deletes a given filter.
     D Filter_delete...
     D                 PR              N
     D                                     extproc('LOG4RPG17+
     D                                     _Filter_delete+
     D                                     ')
     D  io_pFilter                                like(LOG4RPG_pFilter_t       )
      *
      *  Tests a given filter for a NULL value.
     D Filter_isNull...
     D                 PR              N
     D                                     extproc('LOG4RPG17+
     D                                     _Filter_isNull+
     D                                     ')
     D  i_pFilter                          const  like(LOG4RPG_pFilter_t       )
      *
      *  Returns a NULL filter.
      *  ==> PLOG4RPG
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG18  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG18"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: FilterList              "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG18)
      /DEFINE PLOG4RPG18
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG17                    Filter
      *
     D LOG4RPG_pFilterList_t...
     D                 S               *                           based(pDummy)
      *
     D LOG4RPG_FilterListIterator_t...
     D                 DS                  qualified               based(pDummy)
     D  pFltList                           like(LOG4RPG_pFilterList_t )
     D  lastFlt                      10I 0
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *
      *  Creates a new filter list.
     D FilterList_new...
     D                 PR                         like(LOG4RPG_pFilterList_t )
     D                                     extproc('LOG4RPG18+
     D                                     _FilterList_new+
     D                                     ')
      *
      *  Returns the number of entries in a given filter list.
     D FilterList_getNumE...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG18+
     D                                     _FilterList_NumE+
     D                                     ')
     D  i_pFltList                         const  like(LOG4RPG_pFilterList_t )
      *
      *  Adds an filter to a given filter list.
     D FilterList_put...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG18+
     D                                     _FilterList_put+
     D                                     ')
     D  i_pFltList                         const  like(LOG4RPG_pFilterList_t )
     D  i_pFilter                          const  like(LOG4RPG_pFilter_t     )
      *
      *  Removes the specified filter from the given filter list.
     D FilterList_remove...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG18+
     D                                     _FilterList_remove+
     D                                     ')
     D  i_pFltList                         const  like(LOG4RPG_pFilterList_t )
     D  i_fltName                          const  like(LOG4RPG_filterName_t  )
      *
      *  Returns the filter that matches the specified name.
     D FilterList_get...
     D                 PR                  like(LOG4RPG_pFilter_t     )
     D                                     extproc('LOG4RPG18+
     D                                     _FilterList_get+
     D                                     ')
     D  i_pFltList                         const  like(LOG4RPG_pFilterList_t )
     D  i_fltName                          const  like(LOG4RPG_filterName_t  )
      *
      *  Tests, if the filter list contains the specified filter.
     D FilterList_exist...
     D                 PR              N
     D                                     extproc('LOG4RPG18+
     D                                     _FilterList_exist+
     D                                     ')
     D  i_pFltList                         const  like(LOG4RPG_pFilterList_t )
     D  i_fltName                          const  like(LOG4RPG_filterName_t  )
      *
      *  Returns an iterator for the specified filter list.
     D FilterList_getIterator...
     D                 PR                  likeds(LOG4RPG_Filter...
     D                                                    ListIterator_t   )
     D                                     extproc('LOG4RPG18+
     D                                     _FilterList_getIterator+
     D                                     ')
     D  i_pFltList                         const  like(LOG4RPG_pFilterList_t )
      *
      *  Returns the first filter of the specified filter list.
     D FilterList_getFirst...
     D                 PR                  like(LOG4RPG_pFilter_t     )
     D                                     extproc('LOG4RPG18+
     D                                     _FilterList_getFirst+
     D                                     ')
     D  io_fltIter                                likeds(LOG4RPG_Filter...
     D                                                           ListIterator_t)
      *
      *  Returns the next filter of the specified filter list.
     D FilterList_getNext...
     D                 PR                  like(LOG4RPG_pFilter_t     )
     D                                     extproc('LOG4RPG18+
     D                                     _FilterList_getNext+
     D                                     ')
     D  io_fltIter                                likeds(LOG4RPG_Filter...
     D                                                           ListIterator_t)
      *
      *  Deletes a given filter list.
     D FilterList_delete...
     D                 PR              N
     D                                     extproc('LOG4RPG18+
     D                                     _FilterList_delete+
     D                                     ')
     D  io_pFltList                               like(LOG4RPG_pFilterList_t )
      *
      *  Test the specified filter list object for a NULL value.
     D FilterList_isNull...
     D                 PR              N
     D                                     extproc('LOG4RPG18+
     D                                     _FilterList_isNull+
     D                                     ')
     D  i_pFltList                         const  like(LOG4RPG_pFilterList_t )
      *
      *  Returns a NULL filter list.
     D FilterList_null...
     D                 PR                         like(LOG4RPG_pFilterList_t )
     D                                     extproc('LOG4RPG18+
     D                                     _FilterList_null+
     D                                     ')
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG50  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG50"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: DailyRollingFileAppender"
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG50)
      /DEFINE PLOG4RPG50
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PSHARE                        Type defs appenders, layouts, filters
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *  Custom appender ...
      *  ... prototye: new, returns TRUE on success else FALSE
     D DailyRollingFileAppender_new...
     D                 PR              N
     D                                     extproc('DailyRollingFileAppender_+
     D                                     new+
     D                                     ')
     D  i_pSuper                           const  like(LOG4RPG_pAppender_t     )
     D  io_pHandle                     *
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Returns TRUE if the appender requires a layout.
     D DailyRollingFileAppender_requiresLayout...
     D                 PR              N
     D                                     extproc('DailyRollingFileAppender_+
     D                                     requiresLayout+
     D                                     ')
     D  i_pHandle                      *   const
      *
      *  ... prototye: append, returns TRUE on success else FALSE
     D DailyRollingFileAppender_doAppend...
     D                 PR              N
     D                                     extproc('DailyRollingFileAppender_+
     D                                     doAppend+
     D                                     ')
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const like(LOG4RPG_pLogEvent_t )
      *
      *  Used to set the properties of the appender.
     D DailyRollingFileAppender_setProperties...
     D                 PR
     D                                     extproc('DailyRollingFileAppender_+
     D                                     setProperties+
     D                                     ')
     D  i_pHandle                      *   const
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  ... prototye: delete, returns TRUE on success else FALSE
     D DailyRollingFileAppender_delete...
     D                 PR              N
     D                                     extproc('DailyRollingFileAppender_+
     D                                     delete+
     D                                     ')
     D  io_pHandle                     *
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG51  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG51"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: PrinterAppender         "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG51)
      /DEFINE PLOG4RPG51
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PSHARE                        Type defs appenders, layouts, filters
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *  Custom appender ...
      *  ... prototye: new, returns TRUE on success else FALSE
     D DailyRollingPrintAppender_new...
     D                 PR              N
     D                                     extproc('DailyRollingPrintAppender_+
     D                                     new+
     D                                     ')
     D  i_pSuper                           const  like(LOG4RPG_pAppender_t     )
     D  io_pHandle                     *
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Returns TRUE if the appender requires a layout.
     D DailyRollingPrintAppender_requiresLayout...
     D                 PR              N
     D                                     extproc('DailyRollingPrintAppender_+
     D                                     requiresLayout+
     D                                     ')
     D  i_pHandle                      *   const
      *
      *  ... prototye: append, returns TRUE on success else FALSE
     D DailyRollingPrintAppender_doAppend...
     D                 PR              N
     D                                     extproc('DailyRollingPrintAppender_+
     D                                     doAppend+
     D                                     ')
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const like(LOG4RPG_pLogEvent_t )
      *
      *  Used to set the properties of the appender.
     D DailyRollingPrintAppender_setProperties...
     D                 PR
     D                                     extproc('DailyRollingPrintAppender_+
     D                                     setProperties+
     D                                     ')
     D  i_pHandle                      *   const
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  ... prototye: delete, returns TRUE on success else FALSE
     D DailyRollingPrintAppender_delete...
     D                 PR              N
     D                                     extproc('DailyRollingPrintAppender_+
     D                                     delete+
     D                                     ')
     D  io_pHandle                     *
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG52  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG52"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: NullAppender            "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG52)
      /DEFINE PLOG4RPG52
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PSHARE                        Type defs appenders, layouts, filters
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *  Custom appender ...
      *  ... prototye: new, returns TRUE on success else FALSE
     D NullAppender_new...
     D                 PR              N
     D                                     extproc('NullAppender_+
     D                                     new+
     D                                     ')
     D  i_pSuper                           const  like(LOG4RPG_pAppender_t     )
     D  io_pHandle                     *
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  Returns TRUE if the appender requires a layout.
     D NullAppender_requiresLayout...
     D                 PR              N
     D                                     extproc('NullAppender_+
     D                                     requiresLayout+
     D                                     ')
     D  i_pHandle                      *   const
      *
      *  ... prototye: append, returns TRUE on success else FALSE
     D NullAppender_doAppend...
     D                 PR              N
     D                                     extproc('NullAppender_+
     D                                     doAppend+
     D                                     ')
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const like(LOG4RPG_pLogEvent_t )
      *
      *  Used to set the properties of the appender.
     D NullAppender_setProperties...
     D                 PR
     D                                     extproc('NullAppender_+
     D                                     setProperties+
     D                                     ')
     D  i_pHandle                      *   const
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  ... prototye: delete, returns TRUE on success else FALSE
     D NullAppender_delete...
     D                 PR              N
     D                                     extproc('NullAppender_+
     D                                     delete+
     D                                     ')
     D  io_pHandle                     *
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG60  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG60"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: PatternLayout           "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG60)
      /DEFINE PLOG4RPG60
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PSHARE                        Type defs appenders, layouts, filters
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *  Custom layout ...
      *  ... prototye: new, returns TRUE on success else FALSE
     D PatternLayout_new...
     D                 PR              N
     D                                     extproc('PatternLayout_+
     D                                     new+
     D                                     ')
     D  i_pSuper                           const  like(LOG4RPG_pLayout_t       )
     D  io_pHandle                     *
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  ... prototye: format, returns the formatted string on success, else ''.
     D PatternLayout_format...
     D                 PR
     D                                     extproc('PatternLayout_+
     D                                     format+
     D                                     ')
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t )
      *
      *  ... prototye: setProperties, sets the proeprties for the layout
     D PatternLayout_setProperties...
     D                 PR
     D                                     extproc('PatternLayout_+
     D                                     setProperties+
     D                                     ')
     D  i_pHandle                      *   const
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  ... prototye: delete, returns TRUE on success else FALSE
     D PatternLayout_delete...
     D                 PR              N
     D                                     extproc('PatternLayout_+
     D                                     delete+
     D                                     ')
     D  io_pHandle                     *
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG61  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG61"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: SimpleLayout            "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG61)
      /DEFINE PLOG4RPG61
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PSHARE                        Type defs appenders, layouts, filters
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *  Custom layout ...
      *  ... prototye: new, returns TRUE on success else FALSE
     D SimpleLayout_new...
     D                 PR              N
     D                                     extproc('SimpleLayout_+
     D                                     new+
     D                                     ')
     D  i_pSuper                           const  like(LOG4RPG_pLayout_t       )
     D  io_pHandle                     *
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  ... prototye: format, returns the formatted string on success, else ''.
     D SimpleLayout_format...
     D                 PR
     D                                     extproc('SimpleLayout_+
     D                                     format+
     D                                     ')
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t )
      *
      *  ... prototye: setProperties, sets the proeprties for the layout
     D SimpleLayout_setProperties...
     D                 PR
     D                                     extproc('SimpleLayout_+
     D                                     setProperties+
     D                                     ')
     D  i_pHandle                      *   const
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  ... prototye: delete, returns TRUE on success else FALSE
     D SimpleLayout_delete...
     D                 PR              N
     D                                     extproc('SimpleLayout_+
     D                                     delete+
     D                                     ')
     D  io_pHandle                     *
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG62  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG62"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: XMLLayout               "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG62)
      /DEFINE PLOG4RPG62
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PSHARE                        Type defs appenders, layouts, filters
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *  Custom layout ...
      *  ... prototye: new, returns TRUE on success else FALSE
     D XMLLayout_new...
     D                 PR              N
     D                                     extproc('XMLLayout_+
     D                                     new+
     D                                     ')
     D  i_pSuper                           const  like(LOG4RPG_pLayout_t       )
     D  io_pHandle                     *
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  ... prototye: format, returns the formatted string on success, else ''.
     D XMLLayout_format...
     D                 PR
     D                                     extproc('XMLLayout_+
     D                                     format+
     D                                     ')
     D  i_pHandle                      *   const
     D  i_pLogEvent                        const  like(LOG4RPG_pLogEvent_t )
      *
      *  Returns the header of this layout.
     D XMLLayout_getHeader...
     D                 PR                         like(LOG4RPG_header_t)
     D                                     extproc('XMLLayout+
     D                                     _getHeader')
     D  i_pHandle                      *   const
      *
      *  Returns the header of this layout.
     D XMLLayout_getFooter...
     D                 PR                         like(LOG4RPG_footer_t)
     D                                     extproc('XMLLayout+
     D                                     _getFooter')
     D  i_pHandle                      *   const
      *
      *  ... prototye: setProperties, sets the proeprties for the layout
     D XMLLayout_setProperties...
     D                 PR
     D                                     extproc('XMLLayout_+
     D                                     setProperties+
     D                                     ')
     D  i_pHandle                      *   const
     D  i_pPropList                        const  like(LOG4RPG_pPropertyList_t )
     D  i_prefix                           const  like(LOG4RPG_prefix_t        )
      *
      *  ... prototye: delete, returns TRUE on success else FALSE
     D XMLLayout_delete...
     D                 PR              N
     D                                     extproc('XMLLayout_+
     D                                     delete+
     D                                     ')
     D  io_pHandle                     *
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG97  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG97"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: Synchronisation         "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG97)
      /DEFINE PLOG4RPG97
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PTYPES
      /COPY QLOG4RPG,PLOG4RPG06                   Property
      *
     D LOG4RPG_syncTicket_t...
     D                 DS                  qualified           based(pDummy)
     D  jobName                      28A
     D  alcTime                        Z
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *
      *  Enables or disables logging of sync lock holder.
     D Synchronisation_setLogMode...
     D                 PR
     D                                     extproc('LOG4RPG97+
     D                                     _Synchronisation_setLogMode+
     D                                     ')
     D  i_mode                         N   const
      *
      *  Sets the object description of the synchronisation object.
     D Synchronisation_setObjectDesc...
     D                 PR
     D                                     extproc('LOG4RPG97+
     D                                     _Synchronisation_setObjectDesc+
     D                                     ')
     D  i_text                       50A   const  varying
      *
      *  Start synchronisation by adding a lock on a given synchronisation
      *  data area.
     D Synchronisation_start...
     D                 PR              N
     D                                     extproc('LOG4RPG97+
     D                                     _Synchronisation_start+
     D                                     ')
     D  i_dtaara                     10A   const
     D  i_lib                        10A   const
     D  o_ticket                                  likeds(LOG4RPG_syncTicket_t )
     D  o_msg                                     likeds(msg_t )
     D                                            options(*nopass: *omit)
      *
      *  End synchronisation and release lock.
     D Synchronisation_end...
     D                 PR
     D                                     extproc('LOG4RPG97+
     D                                     _Synchronisation_end+
     D                                     ')
     D  io_ticket                                 likeds(LOG4RPG_syncTicket_t )
     D  o_msg                                     likeds(msg_t )
     D                                            options(*nopass: *omit)
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG98  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG98"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: Option Converter        "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG98)
      /DEFINE PLOG4RPG98
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PTYPES
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *
      *  Converts a given property to a file-size-value.
     D OptionConverter_toFileSize...
     D                 PR            20I 0
     D                                     extproc('LOG4RPG98+
     D                                     _OptionConverter_toFileSize+
     D                                     ')
     D  i_value                            value  like(LOG4RPG_Property_value_t)
     D  i_default                    20I 0 value
      *
      *  Converts a given property to a RPG boolean value.
     D OptionConverter_toBoolean...
     D                 PR              N
     D                                     extproc('LOG4RPG98+
     D                                     _OptionConverter_toBoolean+
     D                                     ')
     D  i_value                            value  like(LOG4RPG_Property_value_t)
     D  i_default                      N   value
      *
      *  Converts a given property to a RPG integer value.
     D OptionConverter_toInt...
     D                 PR            10I 0
     D                                     extproc('LOG4RPG98+
     D                                     _OptionConverter_toInt+
     D                                     ')
     D  i_value                            value  like(LOG4RPG_Property_value_t)
     D  i_default                    10I 0 value
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4RPG99  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4RPG99"
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: Helper                  "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4RPG99)
      /DEFINE PLOG4RPG99
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PTYPES
      /COPY QLOG4RPG,PLOG4RPG06                   Property
      *
     D LOG4RPG_caller_t...
     D                 DS                  qualified           based(pDummy)
     D  pgm                                likeds(qObj_t)
     D  module                             likeds(qObj_t)
     D  procedure                   128A   varying
     D  stmtID                       10A
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
      *
      * -----------------------------------------
      *  Prototypes
      * -----------------------------------------
      *
      *  Retrieves the qualified name of a service program from
      *  a property value.
     D getSrvPgm...
     D                 PR                         likeds(qObj_t      )
     D                                     extproc('LOG4RPG99+
     D                                     _getSrvPgm+
     D                                     ')
     D  i_value                            const  like(LOG4RPG_Property_value_t)
      *
      *  Retrieves the procedure prefix from a property value.
     D getProcedure...
     D                 PR                         like(LOG4RPG_procedure_t     )
     D                                     extproc('LOG4RPG99+
     D                                     _getProcedure+
     D                                     ')
     D  i_value                            const  like(LOG4RPG_Property_value_t)
      *
      *  Returns the qualified object name from a string that specifies
      *  an object.
     D getObject...
     D                 PR                         likeds(qObj_t      )
     D                                     extproc('LOG4RPG99+
     D                                     _getObject+
     D                                     ')
     D  i_value                            const  like(LOG4RPG_Property_value_t)
      *
      *  Returns the name of the procedure that called LOG4RPG.
     D getCallingProcedure...
     D                 PR                         likeds(LOG4RPG_caller_t)
     D                                     extproc('LOG4RPG99+
     D                                     _getCallingProcedure+
     D                                     ')
      *
      *  Translates charcaters of the logger name.
     D translateLoggerName...
     D                 PR                         like(LOG4RPG_loggerName_t)
     D                                     extproc('LOG4RPG99+
     D                                     _translateLoggerName+
     D                                     ')
     D  i_logName                          const  like(LOG4RPG_loggerName_t)
      *
      *  Returns cTrue, if the given object name is valid, else cFalse.
     D isValidObjectName...
     D                 PR              N
     D                                     extproc('LOG4RPG99+
     D                                     _isValidObjectName+
     D                                     ')
     D  i_name                       10A   const  varying
     D  o_pos                        10I 0        options(*nopass)
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PLOG4SOCK  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PLOG4SOCK "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Object: Socket Helper           "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PLOG4SOCK)
      /DEFINE PLOG4SOCK
      *
      /COPY QLOG4RPG,FDQJOB
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
     D socket_fd_t...
     D                 S             10I 0                     based(pDummy)
     D socket_fdSet_t...
     D                 S             28A                       based(pDummy)
      *
      * -----------------------------------------
      *  RPG implementations of C macros
      * -----------------------------------------
      *
      *  Set bit in file descriptor set.
     D FD_SET...
     D                 PR
     D                                     extproc('LOG4SOCK+
     D                                     _FD_SET+
     D                                     ')
     D i_FD                                const  like(socket_fd_t   )
     D io_FDSet                                   like(socket_fdSet_t)
      *
      *  Clear bit in file descriptor set.
     D FD_CLR...
     D                 PR
     D                                     extproc('LOG4SOCK+
     D                                     _FD_CLR+
     D                                     ')
     D i_FD                                const  like(socket_fd_t   )
     D io_FDSet                                   like(socket_fdSet_t)
      *
      *  Test bit in file descriptor set.
     D FD_ISSET...
     D                 PR              N
     D                                     extproc('LOG4SOCK+
     D                                     _FD_ISSET+
     D                                     ')
     D i_FD                                value  like(socket_fd_t   )
     D i_FDSet                             value  like(socket_fdSet_t)
      *
      *  Initialize file descriptor set with x'00'.
     D FD_ZERO...
     D                 PR
     D                                     extproc('LOG4SOCK+
     D                                     _FD_ZERO+
     D                                     ')
     D io_FDSet                                   like(socket_fdSet_t)
      *
      *  Returns the IP address of the 5250 client of the
      *  specified job.
     D Job_getTcpIpAddr...
     D                 PR            15A          varying
     D                                     extproc('LOG4SOCK+
     D                                     _Job_getTcpIpAddr+
     D                                     ')
     D  i_qJob                             const  likeds(qJob_t   )
     D                                            options(*nopass)
      *
      * -----------------------------------------
      *  Constants:
      * -----------------------------------------
      *
      *  Error code
     D SOCKET_ERROR    C                   const(-1)
      *
      *  Socket NULL
     D SOCKET_NULL     C                   const(-2)
      *
      * -----------------------------------------
      *  Constants:   QSYSINC/NETINET.IN
      * -----------------------------------------
      *
      *  Macros to denote protocols
     D IPPROTO_IP      C                   const(0)
     D IPPROTO_ICMP    C                   const(1)
     D IPPROTO_TCP     C                   const(6)
     D IPPROTO_UDP     C                   const(17)
     D IPPROTO_IPV6    C                   const(41)
     D IPPROTO_ROUTING...
     D                 C                   const(43)
     D IPPROTO_FRAGMENT...
     D                 C                   const(44)
     D IPPROTO_RAW     C                   const(255)
     D IPPROTO_ICMPV6  C                   const(58)
     D IPPROTO_NONE    C                   const(59)
     D IPPROTO_MAX     C                   const(256)
      *
      *  Macros for IP level options (via setsockopt() and getsockopt())
     D IP_OPTIONS      C                   const( 5)
     D IP_TOS          C                   const(10)
     D IP_TTL          C                   const(15)
      *
     D IP_MULTICAST_IF...
     D                 C                   const(20)
     D IP_MULTICAST_TTL...
     D                 C                   const(25)
     D IP_MULTICAST_LOOP...
     D                 C                   const(30)
     D IP_ADD_MEMBERSHIP...
     D                 C                   const(35)
     D IP_DROP_MEMBERSHIP...
     D                 C                   const(40)
     D IP_DONTFRAG...
     D                 C                   const(55)
     D IP_RECVLCLIFADDR...
     D                 C                   const(99)
      *
      *  Macros for Internet address specifications
     D INADDR_ANY...
     D                 C                   const(x'00000000')
     D INADDR_BROADCAST...
     D                 C                   const(x'FFFFFFFF')
     D INADDR_LOOPBACK...
     D                 C                   const(x'7F000001')
     D INADDR_NONE...
     D                 C                   const(x'FFFFFFFF')
      *
     D INADDR_UNSPEC_GROUP...
     D                 C                   const(x'E0000000')                   224.0.0.0
     D INADDR_ALLHOSTS_GROUP...
     D                 C                   const(x'E0000001')                   224.0.0.1
     D INADDR_MAX_LOCAL_GROUP...
     D                 C                   const(x'E00000FF')                   224.0.0.255
      *
     D INET_ADDRSTRLEN...
     D                 C                   const(16)
     D INET6_ADDRSTRLEN...
     D                 C                   const(46)
      *
      *  Macros for port numbers
     D IPPORT_RESERVED...
     D                 C                   const(1024)
      *
      *  Macros defining multicast operation
     D IP_DEFAULT_MULTICAST_TTL...
     D                 C                   const(1)
     D IP_DEFAULT_MULTICAST_LOOP...
     D                 C                   const(1)
     D IP_MAX_MEMBERSHIPS...
     D                 C                   const(20)
      *
      * -----------------------------------------
      *  Constants:   QSYSINC/SYS.SOCKET
      * -----------------------------------------
      *
      *  Macros to denote address families
     D AF_UNSPEC       C                   const( 0)
     D AF_UNIX         C                   const( 1)
     D AF_INET         C                   const( 2)
     D AF_NS           C                   const( 6)
     D AF_INET6        C                   const(24)
     D AF_UNIX_CCSID   C                   const(98)
     D AF_TELEPHONY    C                   const(99)
      *
      *  Macros to denote type of socket
     D SOCK_STREAM     C                   const(1)
     D SOCK_DGRAM      C                   const(2)
     D SOCK_RAW        C                   const(3)
     D SOCK_SEQPACKET  C                   const(5)
      *
      *  Macros for socket level options (via setsockopt() & getsockopt())
     D SO_BROADCAST    C                   const( 5)
     D SO_DEBUG        C                   const(10)
     D SO_DONTROUTE    C                   const(15)
     D SO_ERROR        C                   const(20)
     D SO_KEEPALIVE    C                   const(25)
      *
     D SO_LINGER       C                   const(30)
     D SO_OOBINLINE    C                   const(35)
      *
     D SO_RCVBUF       C                   const(40)
     D SO_RCVLOWAT     C                   const(45)
     D SO_RCVTIMEO     C                   const(50)
     D SO_REUSEADDR    C                   const(55)
     D SO_SNDBUF       C                   const(60)
     D SO_SNDLOWAT     C                   const(65)
     D SO_SNDTIMEO     C                   const(70)
     D SO_TYPE         C                   const(75)
     D SO_USELOOPBACK  C                   const(80)
      *
      *  Macros to be used for the flag parameter of input/output routines
     D MSG_DONTROUTE   C                   const(x'0001')
     D MSG_OOB         C                   const(x'0004')
     D MSG_PEEK        C                   const(x'0008')
     D MSG_TRUNC       C                   const(x'0010')
     D MSG_CTRUNC      C                   const(x'0020')
     D MSG_WAITALL     C                   const(x'0040')
     D MSG_EOR         C                   const(x'0080')
      *
      *  Miscellaneous macros
     D MSG_MAXIOVLEN   C                   const(16)
     D SOL_SOCKET      C                   const(-1)
     D SOMAXCONN       C                   const(512)
      *
      *  Macros to be used for the flag parameter on send_file()
     D SF_CLOSE        C                   const(1)
     D SF_REUSE        C                   const(2)
      *
      *  Macros to be used for the how parameter on shutdown()
     D SHUT_RD         C                   const(0)
     D SHUT_WR         C                   const(1)
     D SHUT_RDWR       C                   const(2)
      *
      *  Structures
     D linger...
     D                 DS                  qualified               based(pDummy)
     D  l_onoff                      10I 0
     D  l_linger                     10I 0
      *
      *  Generic socket address
     D sockaddr_t...
     D                 DS                  qualified               based(pDummy)
     D   sa_family                    5U 0
     D   sa_data                     14A
      *
      *  Internet socket address
     D sockaddr_in_t...
     D                 DS                  qualified               based(pDummy)
     D   sin_family                   5U 0
     D   sin_port                     5U 0
     D   sin_addr                    10U 0
     D   sin_zero                     8A
      *
      * -----------------------------------------
      *  Constants:   QSYSINC/H.FCNTL
      * -----------------------------------------
      *
      *  cmd Values for fcntl()
     D F_DUPFD         C                   const(0)
     D F_GETFD         C                   const(1)
     D F_SETFD         C                   const(2)
     D F_GETLK         C                   const(3)
     D F_SETLK         C                   const(4)
     D F_SETLKW        C                   const(5)
     D F_GETFL         C                   const(6)
     D F_SETFL         C                   const(7)
     D F_GETOWN        C                   const(8)
     D F_SETOWN        C                   const(9)
      *
      *  File Status Flags for open() and fcntl()
     D O_NONBLOCK      C                   const(128)
     D O_NDELAY        C                   const(128)
     D FNDELAY         C                   const(128)
     D FASYNC          C                   const(512)
      *
      * -----------------------------------------
      *  Constants:   QSYSINC/SYS.TIME
      * -----------------------------------------
      *
     D timeval_t...
     D                 DS                  qualified               based(pDummy)
     D   tv_sec                      10I 0
     D   tv_usec                     10I 0
      *
      * -----------------------------------------
      *  Socket Functions
      * -----------------------------------------
      *
      * -----------------------------------------------------------------------
      *  accept()--Wait for Connection Request and Make Connection
      *    -1     (unsuccessful)
      *     n     (successful), where n is a socket descriptor.
      *
      *  The accept() function is used to wait for connection requests.
      *  accept() takes the first connection request on the queue of
      *  pending connection requests and creates a new socket to service
      *  the connection request.
      * -----------------------------------------------------------------------
     D accept...
     D                 PR            10I 0 extproc('accept')
     D  i_sockDesc                   10I 0 value
     D  o_pAddress                     *   value
     D  io_pAddrLen                  10I 0
      *
      * -----------------------------------------------------------------------
      *  bind()--Set Local Address for Socket
      *    -1     (unsuccessful)
      *     0     (successful)
      *
      *  The bind() function is used to associate a local address with a
      *  socket.
      * -----------------------------------------------------------------------
     D bind...
     D                 PR            10I 0 extproc('bind')
     D  i_sockDesc                   10I 0 value
     D  i_pAddress                     *   value
     D  i_AddressLen                 10I 0 value
      *
      * -----------------------------------------------------------------------
      *  close()--Close File or Socket Descriptor
      *     0      close() was successful.
      *    -1      close() was not successful.
      *            The errno global variable is set to indicate the error.
      *
      *  The close() function closes a descriptor, fildes. This frees the
      *  descriptor to be returned by future open() calls and other calls
      *  that create descriptors.
      * -----------------------------------------------------------------------
      /IF NOT DEFINED(c_close_function)
      /DEFINE c_close_function
     D close...
     D                 PR            10I 0 extproc('close')
     D  i_fd                         10I 0 value
      /ENDIF
      *
      * -----------------------------------------------------------------------
      *  connect()--Establish Connection or Destination Address
      *    -1      (unsuccessful)
      *     0      (successful)
      *
      *  The connect() function is used to establish a connection on a
      *  connection-oriented socket or establish the destination address
      *  on a connectionless socket.
      * -----------------------------------------------------------------------
     D connect...
     D                 PR            10I 0 extproc('connect')
     D  i_fd                         10I 0 value
     D  i_pAddress                     *   value
     D  i_AddressLen                 10I 0 value
      *
      * -----------------------------------------------------------------------
      *  fcntl()--Perform File Control Command
      *    value  fcntl() was successful.
      *           The value returned depends on the command that was specified.
      *    -1     fcntl() was not successful.
      *           The errno global variable is set to indicate the error.
      *
      *  The fcntl() function performs various actions on open
      *  descriptors, such as obtaining or changing the attributes of a
      *  file or socket descriptor.
      * -----------------------------------------------------------------------
     D fcntl...
     D                 PR            10I 0 extproc('fcntl')
     D  i_fd                         10I 0 value
     D  i_command                    10I 0 value
     D  i_arg                        10I 0 value options(*nopass)
      *
      * -----------------------------------------------------------------------
      *  listen()--Invite Incoming Connections Requests
      *    -1     (unsuccessful)
      *     0     (successful)
      *
      *  The listen() function is used to indicate a willingness to accept
      *  incoming connection requests. If a listen() is not done, incoming
      *  connections are silently discarded.
      * -----------------------------------------------------------------------
     D listen...
     D                 PR            10I 0 extproc('listen')
     D  i_socketDesc                 10I 0 value
     D  i_BackLog                    10I 0 value
      *
      * -----------------------------------------------------------------------
      *  select()--Wait for Events on Multiple Sockets
      *    -1     (unsuccessful)
      *     0     (if the time limit expires)
      *     n     (total number of descriptors in all sets that met selection criteria)
      *
      *  The select() function is used to enable an application to
      *  multiplex I/O. By using select(), an application with multiple
      *  interactive I/O sources avoids blocking on one I/O stream while
      *  the other stream is ready. Thus, for example, an application that
      *  receives inputs from two distinct communication endpoints (using
      *  sockets) can use select() to sleep until input is available from
      *  either of the sources. When input is available, the application
      *  wakes up and receives an indication as to which descriptor is
      *  ready for reading.
      *
      *  The application identifies descriptors to be checked for read,
      *  write, and exception status and specifies a timeout value. If any
      *  of the specified descriptors is ready for the specified event
      *  (read, write, or exception), select() returns, indicating which
      *  descriptors are ready. Otherwise, the process waits until one of
      *  the specified events occur or the wait times out.
      * -----------------------------------------------------------------------
     D select...
     D                 PR            10I 0 extproc('select')
     D  i_maxDesc                    10I 0 value
     D  io_readSet                     *   value
     D  io_writeSet                    *   value
     D  io_excpSet                     *   value
     D  i_waitTime                     *   value
      *
      * -----------------------------------------------------------------------
      *  send()--Send Data
      *    -1     (unsuccessful)
      *     n     (successful), where n is the number of bytes sent.
      *
      *  The send() function is used to send data through a connected
      *  socket.
      * -----------------------------------------------------------------------
     D send...
     D                 PR            10I 0 extproc('send')
     D  i_socketDesc                 10I 0 value
     D  i_pBuffer                      *   value  options(*string)
     D  i_length                     10I 0 value
     D  i_flags                      10I 0 value
      *
      * -----------------------------------------------------------------------
      *  setsockopt()--Set Socket Options
      *    -1     (unsuccessful)
      *     0     (successful)
      *
      *  The setsockopt() function is used to set socket options.
      * -----------------------------------------------------------------------
     D setsockopt...
     D                 PR            10I 0 extproc('setsockopt')
     D  i_socketDesc                 10I 0 value
     D  i_optLevel                   10I 0 value
     D  i_optName                    10I 0 value
     D  i_optValue                     *   value
     D  i_optLen                     10I 0 value
      *
      * -----------------------------------------------------------------------
      *  getsockopt()--Retrieve Information about Socket Options
      *    -1     (unsuccessful)
      *     0     (successful)
      *
      *  The setsockopt() function is used to set socket options.
      * -----------------------------------------------------------------------
     D getsockopt...
     D                 PR            10I 0 extproc('getsockopt')
     D  i_socketDesc                 10I 0 value
     D  i_optLevel                   10I 0 value
     D  i_optName                    10I 0 value
     D  o_optValue                     *   value
     D  io_optLen                    10I 0
      *
      * -----------------------------------------------------------------------
      *  socket()--Create Socket
      *    -1     (unsuccessful)
      *     n     (successful), where n is a socket descriptor.
      *
      *  The socket() function is used to create an end point for
      *  communications. The end point is represented by the socket
      *  descriptor returned by the socket() function.
      * -----------------------------------------------------------------------
     D socket...
     D                 PR            10I 0 extproc('socket')
     D  i_addrFamily                 10I 0 value
     D  i_socketType                 10I 0 value
     D  i_protocol                   10I 0 value
      *
      * -----------------------------------------------------------------------
      *  gethostbyname()--Get Host Information for Host Name
      *    NULL   (unsuccessful)
      *       p   (successful), where p is a pointer to struct hostent.
      *
      *  The gethostbyname() function is used to retrieve information about a host.
      * -----------------------------------------------------------------------
     D gethostbyname...
     D                 PR              *   extproc('gethostbyname')
     D  i_hostName                     *   value options(*string)
      *
     D hostent_t...
     D                 DS                  qualified               based(pDummy)
     D   h_name                        *
     D   h_aliases                     *
     D   h_addrtype                   5I 0
     D   h_length                     5I 0
     D   h_addrlist                    *
      *
      * -----------------------------------------------------------------------
      *  inet_addr()--Translate Full Address to 32-bit IP Address
      *      -1   (unsuccessful)
      *       n   (where n is the 32-bit IP address)
      *
      *  The inet_addr() function is used to translate an Internet address
      *  from dotted decimal format to a 32-bit IP address.
      * -----------------------------------------------------------------------
     D inet_addr...
     D                 PR            10U 0 extproc('inet_addr')
     D  i_charAddr                     *   value options(*string)
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PSHARE  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PSHARE    "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Type defs appenders, layouts    "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PSHARE)
      /DEFINE PSHARE
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QLOG4RPG,PLOG4RPG                      Public interface & type definitions
      /COPY QLOG4RPG,PLOG4RPG06                    Property
      /COPY QLOG4RPG,PLOG4RPG07                    PropertyList
      /COPY QLOG4RPG,PLOG4RPG03                    Appender
      /COPY QLOG4RPG,PLOG4RPG10                    LogLog
      /COPY QLOG4RPG,PLOG4RPG11                    Layout
      /COPY QLOG4RPG,PLOG4RPG16                    LogEvent
      /COPY QLOG4RPG,PLOG4RPG17                    Filter
      /COPY QLOG4RPG,PLOG4RPG99                    Helper
      *
      * -----------------------------------------
      *   Type definitions shared with
      *   appenders & layouts
      * -----------------------------------------
      *
     D LOG4RPG_prefix_t...
     D                 S            128A   varying                 based(pDummy)
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing PTYPES  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "PTYPES    "
mbrtype =  "RPGLE     "
mbrtext =  "SrvPgm: LOG4RPG - Internal Type Definitions       "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
      /IF NOT DEFINED(PTYPES)
      /DEFINE PTYPES
      *
      * -----------------------------------------
      *  Type definitions
      * -----------------------------------------
      /COPY QBASICS1,PBASICS1                      Basic RPG Extensions
      *
      /COPY QLOG4RPG,PLOG4RPG01                    Logger
      /COPY QLOG4RPG,PLOG4RPG04                    AppenderList
      *
      * -----------------------------------------
      *  Constants
      * -----------------------------------------
     D cROOT_LOGGER...
     D                 C                   const('root')
      *
      /IF NOT DEFINED(cTrue)
      /DEFINE cTrue
     D cTrue           C                   const(*on )
      /ENDIF
      *
      /IF NOT DEFINED(cFalse)
      /DEFINE cFalse
     D cFalse          C                   const(*off)
      /ENDIF
      *
      * -----------------------------------------
      *  Internal type definitions
      * -----------------------------------------
      *
     D LOG4RPG_logger_t...
     D                 DS                  qualified               based(pDummy)
     D  node                         10I 0
     D  pParent                        *
     D  name                               like(LOG4RPG_loggerName_t    )
     D  priority                           like(LOG4RPG_priority_t      )
     D  pAppenderList                      like(LOG4RPG_pAppenderList_t )
     D  pChildren                          like(BasicList_handle_t      )
      *
     D LOG4RPG_procedure_t...
     D                 S            128A   varying                 based(pDummy)
      *
      /ENDIF
]]>  </copysrc>
</mbr>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*STATUS   "><![CDATA[
Installing SDS  type RPGLE - in progress.
]]>  </sendmsg>
<!-- START OF MEMBER  -->
<mbr
mbrname =  "SDS       "
mbrtype =  "RPGLE     "
mbrtext =  "Programm Status Datenstruktur                     "
srcfile =  "QLOG4RPG  "
srclib  =  "selected  "
srclen  =  "00112"
srccssid=  "00273">
<copysrc><![CDATA[
 DEF  /IF NOT DEFINED(SDS)
 DEF  /DEFINE SDS
      *
     D sds            SDS                  qualified
     D  pgmName                1     10A
     D  pgmStat               11     15S 0
     D  prevStat              16     20S 0
     D  lastSeq               21     28A
     D  lastSubr              29     36A
     D  nbrParm               37     39S 0
     D  excType               40     42A
     D  excNbr                43     46A
     D  miInstruction         47     50A
     D  workArea              51     80A
 DEF  /IF DEFINED(SDS_EXTENDED)
     D  pgmLib                81     90A
     D  excData               91    170A
     D  rnx9001Exc           171    174A
     D  lastFileLong         175    184A
     D  unused_1             185    190A
     D  datFmt               191    198A
     D  year                 199    200S 0
     D  lastFileShort        201    208A
     D  fileStat             209    243A
     D  job                  244    253A
     D  user                 254    263A
     D  nbr                  264    269S 0
     D  startDate            270    275S 0
     D  runDate              276    281S 0
     D  runTime              282    287S 0
     D  compDate             288    293A
     D  compTime             294    299A
     D  compLevel            300    303A
     D  srcFile              304    313A
     D  srcLib               314    323A
     D  srcMbr               324    333A
     D  pgmContProc          334    343A
     D  modContProc          344    353A
     D  unused_2             354    429A
 DEF  /ENDIF
 DEF  /ENDIF
]]>  </copysrc>
</mbr>
<qcmdexc condition="*NONE" release="*CURRENT" dltsplf="A_INSTALL"><![CDATA[
CRTBNDCL PGM(&tolib/A_INSTALL) SRCFILE(&tolib/&SRCFILE) SRCMBR(*PGM) DFTACTGRP(*NO) ACTGRP(*NEW) DBG
VIEW(*LIST)
]]>  </qcmdexc>
<qcmdexc condition="*NONE" release="*CURRENT" dltsplf="*NONE"><![CDATA[
CALL PGM(&tolib/A_INSTALL) PARM('&TGTRLS' '&SRCFILE' '&tolib' '&USELIBL' '&CRTTSTPGM')
]]>  </qcmdexc>
<qcmdexc condition="*NONE" release="*CURRENT" dltsplf="*NONE"><![CDATA[
DLTPGM PGM(&tolib/A_INSTALL)
]]>  </qcmdexc>
<sendmsg  sendmsgid="CPF9897" sendmsgtype = "*COMP     "><![CDATA[
Application LOG4RPG successfully installed.
]]>  </sendmsg>
</upload>
